generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Transaction {
  id             String            @id @default(uuid())
  hash           String            @unique
  chain          ChainType
  fromAddress    String
  toAddress      String?
  value          String
  fee            String?
  gasUsed        String?
  gasPrice       String?
  blockNumber    BigInt?
  blockHash      String?
  timestamp      DateTime
  status         TransactionStatus @default(PENDING)
  data           String?
  decoded        Json?
  riskScore      Int?              @default(0)
  riskLevel      RiskLevel?        @default(LOW)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  riskAnalysis   RiskAnalysis?
  fromAddressRel Address           @relation("FromTransactions", fields: [fromAddress, chain], references: [address, chain])
  toAddressRel   Address?          @relation("ToTransactions", fields: [toAddress, chain], references: [address, chain])

  @@index([hash])
  @@index([chain])
  @@index([fromAddress])
  @@index([toAddress])
  @@index([blockNumber])
  @@index([timestamp])
}

model Address {
  id                   String              @id @default(uuid())
  address              String
  chain                ChainType
  label                String?
  isContract           Boolean             @default(false)
  firstSeen            DateTime            @default(now())
  lastSeen             DateTime            @default(now())
  transactionCount     Int                 @default(0)
  totalValueSent       String              @default("0")
  totalValueReceived   String              @default("0")
  riskScore            Int                 @default(0)
  riskLevel            RiskLevel           @default(LOW)
  tags                 String[]
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  riskFactors          AddressRiskFactor[]
  sentTransactions     Transaction[]       @relation("FromTransactions")
  receivedTransactions Transaction[]       @relation("ToTransactions")

  @@unique([address, chain])
  @@index([address])
  @@index([chain])
  @@index([riskScore])
}

model RiskAnalysis {
  id                String      @id @default(uuid())
  transactionId     String      @unique
  largeAmount       Boolean     @default(false)
  newAddress        Boolean     @default(false)
  blacklisted       Boolean     @default(false)
  mixingService     Boolean     @default(false)
  suspiciousPattern Boolean     @default(false)
  amountScore       Int         @default(0)
  addressScore      Int         @default(0)
  behaviorScore     Int         @default(0)
  totalScore        Int         @default(0)
  details           Json?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  transaction       Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model AddressRiskFactor {
  id          String    @id @default(uuid())
  addressId   String
  factor      String
  severity    RiskLevel
  description String?
  source      String?
  createdAt   DateTime  @default(now())
  address     Address   @relation(fields: [addressId], references: [id], onDelete: Cascade)

  @@index([addressId])
}

model ApiKey {
  id           String    @id @default(uuid())
  key          String    @unique
  name         String
  tier         String    @default("free")
  isActive     Boolean   @default(true)
  rateLimit    Int       @default(100)
  requestCount Int       @default(0)
  lastUsed     DateTime?
  createdAt    DateTime  @default(now())
  expiresAt    DateTime?

  @@index([key])
}

model RequestLog {
  id         String   @id @default(uuid())
  apiKey     String?
  endpoint   String
  method     String
  statusCode Int
  duration   Int
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  @@index([apiKey])
  @@index([createdAt])
}

enum ChainType {
  BITCOIN
  ETHEREUM
  POLYGON
  BSC
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  FAILED
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
