
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

enum ChainType {
  BITCOIN
  ETHEREUM
  POLYGON
  BSC
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  FAILED
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Transaction {
  id            String            @id @default(uuid())
  hash          String            @unique
  chain         ChainType
  fromAddress   String
  toAddress     String?
  value         String
  fee           String?
  gasUsed       String?
  gasPrice      String?
  blockNumber   BigInt?
  blockHash     String?
  timestamp     DateTime
  status        TransactionStatus @default(PENDING)
  data          String?           // Raw transaction data
  decoded       Json?             // Decoded transaction details
  riskScore     Int?              @default(0)
  riskLevel     RiskLevel?        @default(LOW)
  
  // Relations
  fromAddressRel Address?  @relation("FromTransactions", fields: [fromAddress, chain], references: [address, chain])
  toAddressRel   Address?  @relation("ToTransactions", fields: [toAddress, chain], references: [address, chain])
  riskAnalysis   RiskAnalysis?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([hash])
  @@index([chain])
  @@index([fromAddress])
  @@index([toAddress])
  @@index([blockNumber])
  @@index([timestamp])
}

model Address {
  id              String      @id @default(uuid())
  address         String
  chain           ChainType
  label           String?     // Exchange, DeFi Protocol, etc.
  isContract      Boolean     @default(false)
  firstSeen       DateTime    @default(now())
  lastSeen        DateTime    @default(now())
  transactionCount Int        @default(0)
  totalValueSent   String     @default("0")
  totalValueReceived String   @default("0")
  riskScore       Int         @default(0)
  riskLevel       RiskLevel   @default(LOW)
  tags            String[]    // ["exchange", "whale", "suspicious"]
  
  // Relations
  sentTransactions     Transaction[] @relation("FromTransactions")
  receivedTransactions Transaction[] @relation("ToTransactions")
  riskFactors          AddressRiskFactor[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([address, chain])
  @@index([address])
  @@index([chain])
  @@index([riskScore])
}

model RiskAnalysis {
  id              String      @id @default(uuid())
  transactionId   String      @unique
  transaction     Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  
  // Risk factors
  largeAmount     Boolean     @default(false)
  newAddress      Boolean     @default(false)
  blacklisted     Boolean     @default(false)
  mixingService   Boolean     @default(false)
  suspiciousPattern Boolean   @default(false)
  
  // Scores
  amountScore     Int         @default(0)
  addressScore    Int         @default(0)
  behaviorScore   Int         @default(0)
  totalScore      Int         @default(0)
  
  details         Json?       // Additional analysis details
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model AddressRiskFactor {
  id          String    @id @default(uuid())
  addressId   String
  address     Address   @relation(fields: [addressId], references: [id], onDelete: Cascade)
  
  factor      String    // "sanctioned", "scam", "mixer", etc.
  severity    RiskLevel
  description String?
  source      String?   // Where this info came from
  
  createdAt   DateTime  @default(now())
  
  @@index([addressId])
}

model ApiKey {
  id          String   @id @default(uuid())
  key         String   @unique
  name        String
  tier        String   @default("free") // free, pro, enterprise
  isActive    Boolean  @default(true)
  rateLimit   Int      @default(100)   // Requests per window
  
  // Usage stats
  requestCount Int     @default(0)
  lastUsed    DateTime?
  
  createdAt   DateTime @default(now())
  expiresAt   DateTime?
  
  @@index([key])
}

model RequestLog {
  id          String   @id @default(uuid())
  apiKey      String?
  endpoint    String
  method      String
  statusCode  Int
  duration    Int      // milliseconds
  ipAddress   String?
  userAgent   String?
  
  createdAt   DateTime @default(now())
  
  @@index([apiKey])
  @@index([createdAt])
}
