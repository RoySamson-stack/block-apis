
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Transaction
 * 
 */
export type Transaction = $Result.DefaultSelection<Prisma.$TransactionPayload>
/**
 * Model Address
 * 
 */
export type Address = $Result.DefaultSelection<Prisma.$AddressPayload>
/**
 * Model RiskAnalysis
 * 
 */
export type RiskAnalysis = $Result.DefaultSelection<Prisma.$RiskAnalysisPayload>
/**
 * Model AddressRiskFactor
 * 
 */
export type AddressRiskFactor = $Result.DefaultSelection<Prisma.$AddressRiskFactorPayload>
/**
 * Model ApiKey
 * 
 */
export type ApiKey = $Result.DefaultSelection<Prisma.$ApiKeyPayload>
/**
 * Model RequestLog
 * 
 */
export type RequestLog = $Result.DefaultSelection<Prisma.$RequestLogPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const ChainType: {
  BITCOIN: 'BITCOIN',
  ETHEREUM: 'ETHEREUM',
  POLYGON: 'POLYGON',
  BSC: 'BSC'
};

export type ChainType = (typeof ChainType)[keyof typeof ChainType]


export const TransactionStatus: {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  FAILED: 'FAILED'
};

export type TransactionStatus = (typeof TransactionStatus)[keyof typeof TransactionStatus]


export const RiskLevel: {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

export type RiskLevel = (typeof RiskLevel)[keyof typeof RiskLevel]

}

export type ChainType = $Enums.ChainType

export const ChainType: typeof $Enums.ChainType

export type TransactionStatus = $Enums.TransactionStatus

export const TransactionStatus: typeof $Enums.TransactionStatus

export type RiskLevel = $Enums.RiskLevel

export const RiskLevel: typeof $Enums.RiskLevel

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Transactions
 * const transactions = await prisma.transaction.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Transactions
   * const transactions = await prisma.transaction.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.transaction`: Exposes CRUD operations for the **Transaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transaction.findMany()
    * ```
    */
  get transaction(): Prisma.TransactionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.address`: Exposes CRUD operations for the **Address** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Addresses
    * const addresses = await prisma.address.findMany()
    * ```
    */
  get address(): Prisma.AddressDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.riskAnalysis`: Exposes CRUD operations for the **RiskAnalysis** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RiskAnalyses
    * const riskAnalyses = await prisma.riskAnalysis.findMany()
    * ```
    */
  get riskAnalysis(): Prisma.RiskAnalysisDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.addressRiskFactor`: Exposes CRUD operations for the **AddressRiskFactor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AddressRiskFactors
    * const addressRiskFactors = await prisma.addressRiskFactor.findMany()
    * ```
    */
  get addressRiskFactor(): Prisma.AddressRiskFactorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.apiKey`: Exposes CRUD operations for the **ApiKey** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ApiKeys
    * const apiKeys = await prisma.apiKey.findMany()
    * ```
    */
  get apiKey(): Prisma.ApiKeyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.requestLog`: Exposes CRUD operations for the **RequestLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RequestLogs
    * const requestLogs = await prisma.requestLog.findMany()
    * ```
    */
  get requestLog(): Prisma.RequestLogDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.17.1
   * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Transaction: 'Transaction',
    Address: 'Address',
    RiskAnalysis: 'RiskAnalysis',
    AddressRiskFactor: 'AddressRiskFactor',
    ApiKey: 'ApiKey',
    RequestLog: 'RequestLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "transaction" | "address" | "riskAnalysis" | "addressRiskFactor" | "apiKey" | "requestLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Transaction: {
        payload: Prisma.$TransactionPayload<ExtArgs>
        fields: Prisma.TransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findFirst: {
            args: Prisma.TransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findMany: {
            args: Prisma.TransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          create: {
            args: Prisma.TransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          createMany: {
            args: Prisma.TransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          delete: {
            args: Prisma.TransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          update: {
            args: Prisma.TransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          deleteMany: {
            args: Prisma.TransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TransactionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          upsert: {
            args: Prisma.TransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          aggregate: {
            args: Prisma.TransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransaction>
          }
          groupBy: {
            args: Prisma.TransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransactionCountArgs<ExtArgs>
            result: $Utils.Optional<TransactionCountAggregateOutputType> | number
          }
        }
      }
      Address: {
        payload: Prisma.$AddressPayload<ExtArgs>
        fields: Prisma.AddressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AddressFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AddressFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          findFirst: {
            args: Prisma.AddressFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AddressFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          findMany: {
            args: Prisma.AddressFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>[]
          }
          create: {
            args: Prisma.AddressCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          createMany: {
            args: Prisma.AddressCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AddressCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>[]
          }
          delete: {
            args: Prisma.AddressDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          update: {
            args: Prisma.AddressUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          deleteMany: {
            args: Prisma.AddressDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AddressUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AddressUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>[]
          }
          upsert: {
            args: Prisma.AddressUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          aggregate: {
            args: Prisma.AddressAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAddress>
          }
          groupBy: {
            args: Prisma.AddressGroupByArgs<ExtArgs>
            result: $Utils.Optional<AddressGroupByOutputType>[]
          }
          count: {
            args: Prisma.AddressCountArgs<ExtArgs>
            result: $Utils.Optional<AddressCountAggregateOutputType> | number
          }
        }
      }
      RiskAnalysis: {
        payload: Prisma.$RiskAnalysisPayload<ExtArgs>
        fields: Prisma.RiskAnalysisFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RiskAnalysisFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskAnalysisPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RiskAnalysisFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskAnalysisPayload>
          }
          findFirst: {
            args: Prisma.RiskAnalysisFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskAnalysisPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RiskAnalysisFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskAnalysisPayload>
          }
          findMany: {
            args: Prisma.RiskAnalysisFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskAnalysisPayload>[]
          }
          create: {
            args: Prisma.RiskAnalysisCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskAnalysisPayload>
          }
          createMany: {
            args: Prisma.RiskAnalysisCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RiskAnalysisCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskAnalysisPayload>[]
          }
          delete: {
            args: Prisma.RiskAnalysisDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskAnalysisPayload>
          }
          update: {
            args: Prisma.RiskAnalysisUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskAnalysisPayload>
          }
          deleteMany: {
            args: Prisma.RiskAnalysisDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RiskAnalysisUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RiskAnalysisUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskAnalysisPayload>[]
          }
          upsert: {
            args: Prisma.RiskAnalysisUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskAnalysisPayload>
          }
          aggregate: {
            args: Prisma.RiskAnalysisAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRiskAnalysis>
          }
          groupBy: {
            args: Prisma.RiskAnalysisGroupByArgs<ExtArgs>
            result: $Utils.Optional<RiskAnalysisGroupByOutputType>[]
          }
          count: {
            args: Prisma.RiskAnalysisCountArgs<ExtArgs>
            result: $Utils.Optional<RiskAnalysisCountAggregateOutputType> | number
          }
        }
      }
      AddressRiskFactor: {
        payload: Prisma.$AddressRiskFactorPayload<ExtArgs>
        fields: Prisma.AddressRiskFactorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AddressRiskFactorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressRiskFactorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AddressRiskFactorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressRiskFactorPayload>
          }
          findFirst: {
            args: Prisma.AddressRiskFactorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressRiskFactorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AddressRiskFactorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressRiskFactorPayload>
          }
          findMany: {
            args: Prisma.AddressRiskFactorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressRiskFactorPayload>[]
          }
          create: {
            args: Prisma.AddressRiskFactorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressRiskFactorPayload>
          }
          createMany: {
            args: Prisma.AddressRiskFactorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AddressRiskFactorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressRiskFactorPayload>[]
          }
          delete: {
            args: Prisma.AddressRiskFactorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressRiskFactorPayload>
          }
          update: {
            args: Prisma.AddressRiskFactorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressRiskFactorPayload>
          }
          deleteMany: {
            args: Prisma.AddressRiskFactorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AddressRiskFactorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AddressRiskFactorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressRiskFactorPayload>[]
          }
          upsert: {
            args: Prisma.AddressRiskFactorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressRiskFactorPayload>
          }
          aggregate: {
            args: Prisma.AddressRiskFactorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAddressRiskFactor>
          }
          groupBy: {
            args: Prisma.AddressRiskFactorGroupByArgs<ExtArgs>
            result: $Utils.Optional<AddressRiskFactorGroupByOutputType>[]
          }
          count: {
            args: Prisma.AddressRiskFactorCountArgs<ExtArgs>
            result: $Utils.Optional<AddressRiskFactorCountAggregateOutputType> | number
          }
        }
      }
      ApiKey: {
        payload: Prisma.$ApiKeyPayload<ExtArgs>
        fields: Prisma.ApiKeyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApiKeyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApiKeyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>
          }
          findFirst: {
            args: Prisma.ApiKeyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApiKeyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>
          }
          findMany: {
            args: Prisma.ApiKeyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>[]
          }
          create: {
            args: Prisma.ApiKeyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>
          }
          createMany: {
            args: Prisma.ApiKeyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ApiKeyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>[]
          }
          delete: {
            args: Prisma.ApiKeyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>
          }
          update: {
            args: Prisma.ApiKeyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>
          }
          deleteMany: {
            args: Prisma.ApiKeyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ApiKeyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ApiKeyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>[]
          }
          upsert: {
            args: Prisma.ApiKeyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>
          }
          aggregate: {
            args: Prisma.ApiKeyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApiKey>
          }
          groupBy: {
            args: Prisma.ApiKeyGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApiKeyGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApiKeyCountArgs<ExtArgs>
            result: $Utils.Optional<ApiKeyCountAggregateOutputType> | number
          }
        }
      }
      RequestLog: {
        payload: Prisma.$RequestLogPayload<ExtArgs>
        fields: Prisma.RequestLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RequestLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RequestLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestLogPayload>
          }
          findFirst: {
            args: Prisma.RequestLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RequestLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestLogPayload>
          }
          findMany: {
            args: Prisma.RequestLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestLogPayload>[]
          }
          create: {
            args: Prisma.RequestLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestLogPayload>
          }
          createMany: {
            args: Prisma.RequestLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RequestLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestLogPayload>[]
          }
          delete: {
            args: Prisma.RequestLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestLogPayload>
          }
          update: {
            args: Prisma.RequestLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestLogPayload>
          }
          deleteMany: {
            args: Prisma.RequestLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RequestLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RequestLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestLogPayload>[]
          }
          upsert: {
            args: Prisma.RequestLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestLogPayload>
          }
          aggregate: {
            args: Prisma.RequestLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRequestLog>
          }
          groupBy: {
            args: Prisma.RequestLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<RequestLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.RequestLogCountArgs<ExtArgs>
            result: $Utils.Optional<RequestLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    transaction?: TransactionOmit
    address?: AddressOmit
    riskAnalysis?: RiskAnalysisOmit
    addressRiskFactor?: AddressRiskFactorOmit
    apiKey?: ApiKeyOmit
    requestLog?: RequestLogOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AddressCountOutputType
   */

  export type AddressCountOutputType = {
    sentTransactions: number
    receivedTransactions: number
    riskFactors: number
  }

  export type AddressCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sentTransactions?: boolean | AddressCountOutputTypeCountSentTransactionsArgs
    receivedTransactions?: boolean | AddressCountOutputTypeCountReceivedTransactionsArgs
    riskFactors?: boolean | AddressCountOutputTypeCountRiskFactorsArgs
  }

  // Custom InputTypes
  /**
   * AddressCountOutputType without action
   */
  export type AddressCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddressCountOutputType
     */
    select?: AddressCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AddressCountOutputType without action
   */
  export type AddressCountOutputTypeCountSentTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }

  /**
   * AddressCountOutputType without action
   */
  export type AddressCountOutputTypeCountReceivedTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }

  /**
   * AddressCountOutputType without action
   */
  export type AddressCountOutputTypeCountRiskFactorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AddressRiskFactorWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Transaction
   */

  export type AggregateTransaction = {
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  export type TransactionAvgAggregateOutputType = {
    blockNumber: number | null
    riskScore: number | null
  }

  export type TransactionSumAggregateOutputType = {
    blockNumber: bigint | null
    riskScore: number | null
  }

  export type TransactionMinAggregateOutputType = {
    id: string | null
    hash: string | null
    chain: $Enums.ChainType | null
    fromAddress: string | null
    toAddress: string | null
    value: string | null
    fee: string | null
    gasUsed: string | null
    gasPrice: string | null
    blockNumber: bigint | null
    blockHash: string | null
    timestamp: Date | null
    status: $Enums.TransactionStatus | null
    data: string | null
    riskScore: number | null
    riskLevel: $Enums.RiskLevel | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransactionMaxAggregateOutputType = {
    id: string | null
    hash: string | null
    chain: $Enums.ChainType | null
    fromAddress: string | null
    toAddress: string | null
    value: string | null
    fee: string | null
    gasUsed: string | null
    gasPrice: string | null
    blockNumber: bigint | null
    blockHash: string | null
    timestamp: Date | null
    status: $Enums.TransactionStatus | null
    data: string | null
    riskScore: number | null
    riskLevel: $Enums.RiskLevel | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransactionCountAggregateOutputType = {
    id: number
    hash: number
    chain: number
    fromAddress: number
    toAddress: number
    value: number
    fee: number
    gasUsed: number
    gasPrice: number
    blockNumber: number
    blockHash: number
    timestamp: number
    status: number
    data: number
    decoded: number
    riskScore: number
    riskLevel: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TransactionAvgAggregateInputType = {
    blockNumber?: true
    riskScore?: true
  }

  export type TransactionSumAggregateInputType = {
    blockNumber?: true
    riskScore?: true
  }

  export type TransactionMinAggregateInputType = {
    id?: true
    hash?: true
    chain?: true
    fromAddress?: true
    toAddress?: true
    value?: true
    fee?: true
    gasUsed?: true
    gasPrice?: true
    blockNumber?: true
    blockHash?: true
    timestamp?: true
    status?: true
    data?: true
    riskScore?: true
    riskLevel?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransactionMaxAggregateInputType = {
    id?: true
    hash?: true
    chain?: true
    fromAddress?: true
    toAddress?: true
    value?: true
    fee?: true
    gasUsed?: true
    gasPrice?: true
    blockNumber?: true
    blockHash?: true
    timestamp?: true
    status?: true
    data?: true
    riskScore?: true
    riskLevel?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransactionCountAggregateInputType = {
    id?: true
    hash?: true
    chain?: true
    fromAddress?: true
    toAddress?: true
    value?: true
    fee?: true
    gasUsed?: true
    gasPrice?: true
    blockNumber?: true
    blockHash?: true
    timestamp?: true
    status?: true
    data?: true
    decoded?: true
    riskScore?: true
    riskLevel?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transaction to aggregate.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transactions
    **/
    _count?: true | TransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionMaxAggregateInputType
  }

  export type GetTransactionAggregateType<T extends TransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransaction[P]>
      : GetScalarType<T[P], AggregateTransaction[P]>
  }




  export type TransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithAggregationInput | TransactionOrderByWithAggregationInput[]
    by: TransactionScalarFieldEnum[] | TransactionScalarFieldEnum
    having?: TransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionCountAggregateInputType | true
    _avg?: TransactionAvgAggregateInputType
    _sum?: TransactionSumAggregateInputType
    _min?: TransactionMinAggregateInputType
    _max?: TransactionMaxAggregateInputType
  }

  export type TransactionGroupByOutputType = {
    id: string
    hash: string
    chain: $Enums.ChainType
    fromAddress: string
    toAddress: string | null
    value: string
    fee: string | null
    gasUsed: string | null
    gasPrice: string | null
    blockNumber: bigint | null
    blockHash: string | null
    timestamp: Date
    status: $Enums.TransactionStatus
    data: string | null
    decoded: JsonValue | null
    riskScore: number | null
    riskLevel: $Enums.RiskLevel | null
    createdAt: Date
    updatedAt: Date
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  type GetTransactionGroupByPayload<T extends TransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionGroupByOutputType[P]>
        }
      >
    >


  export type TransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hash?: boolean
    chain?: boolean
    fromAddress?: boolean
    toAddress?: boolean
    value?: boolean
    fee?: boolean
    gasUsed?: boolean
    gasPrice?: boolean
    blockNumber?: boolean
    blockHash?: boolean
    timestamp?: boolean
    status?: boolean
    data?: boolean
    decoded?: boolean
    riskScore?: boolean
    riskLevel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fromAddressRel?: boolean | Transaction$fromAddressRelArgs<ExtArgs>
    toAddressRel?: boolean | Transaction$toAddressRelArgs<ExtArgs>
    riskAnalysis?: boolean | Transaction$riskAnalysisArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hash?: boolean
    chain?: boolean
    fromAddress?: boolean
    toAddress?: boolean
    value?: boolean
    fee?: boolean
    gasUsed?: boolean
    gasPrice?: boolean
    blockNumber?: boolean
    blockHash?: boolean
    timestamp?: boolean
    status?: boolean
    data?: boolean
    decoded?: boolean
    riskScore?: boolean
    riskLevel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fromAddressRel?: boolean | Transaction$fromAddressRelArgs<ExtArgs>
    toAddressRel?: boolean | Transaction$toAddressRelArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hash?: boolean
    chain?: boolean
    fromAddress?: boolean
    toAddress?: boolean
    value?: boolean
    fee?: boolean
    gasUsed?: boolean
    gasPrice?: boolean
    blockNumber?: boolean
    blockHash?: boolean
    timestamp?: boolean
    status?: boolean
    data?: boolean
    decoded?: boolean
    riskScore?: boolean
    riskLevel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fromAddressRel?: boolean | Transaction$fromAddressRelArgs<ExtArgs>
    toAddressRel?: boolean | Transaction$toAddressRelArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectScalar = {
    id?: boolean
    hash?: boolean
    chain?: boolean
    fromAddress?: boolean
    toAddress?: boolean
    value?: boolean
    fee?: boolean
    gasUsed?: boolean
    gasPrice?: boolean
    blockNumber?: boolean
    blockHash?: boolean
    timestamp?: boolean
    status?: boolean
    data?: boolean
    decoded?: boolean
    riskScore?: boolean
    riskLevel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TransactionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "hash" | "chain" | "fromAddress" | "toAddress" | "value" | "fee" | "gasUsed" | "gasPrice" | "blockNumber" | "blockHash" | "timestamp" | "status" | "data" | "decoded" | "riskScore" | "riskLevel" | "createdAt" | "updatedAt", ExtArgs["result"]["transaction"]>
  export type TransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fromAddressRel?: boolean | Transaction$fromAddressRelArgs<ExtArgs>
    toAddressRel?: boolean | Transaction$toAddressRelArgs<ExtArgs>
    riskAnalysis?: boolean | Transaction$riskAnalysisArgs<ExtArgs>
  }
  export type TransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fromAddressRel?: boolean | Transaction$fromAddressRelArgs<ExtArgs>
    toAddressRel?: boolean | Transaction$toAddressRelArgs<ExtArgs>
  }
  export type TransactionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fromAddressRel?: boolean | Transaction$fromAddressRelArgs<ExtArgs>
    toAddressRel?: boolean | Transaction$toAddressRelArgs<ExtArgs>
  }

  export type $TransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transaction"
    objects: {
      fromAddressRel: Prisma.$AddressPayload<ExtArgs> | null
      toAddressRel: Prisma.$AddressPayload<ExtArgs> | null
      riskAnalysis: Prisma.$RiskAnalysisPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      hash: string
      chain: $Enums.ChainType
      fromAddress: string
      toAddress: string | null
      value: string
      fee: string | null
      gasUsed: string | null
      gasPrice: string | null
      blockNumber: bigint | null
      blockHash: string | null
      timestamp: Date
      status: $Enums.TransactionStatus
      data: string | null
      decoded: Prisma.JsonValue | null
      riskScore: number | null
      riskLevel: $Enums.RiskLevel | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["transaction"]>
    composites: {}
  }

  type TransactionGetPayload<S extends boolean | null | undefined | TransactionDefaultArgs> = $Result.GetResult<Prisma.$TransactionPayload, S>

  type TransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TransactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TransactionCountAggregateInputType | true
    }

  export interface TransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transaction'], meta: { name: 'Transaction' } }
    /**
     * Find zero or one Transaction that matches the filter.
     * @param {TransactionFindUniqueArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransactionFindUniqueArgs>(args: SelectSubset<T, TransactionFindUniqueArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Transaction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TransactionFindUniqueOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, TransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransactionFindFirstArgs>(args?: SelectSubset<T, TransactionFindFirstArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, TransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transaction.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionWithIdOnly = await prisma.transaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransactionFindManyArgs>(args?: SelectSubset<T, TransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Transaction.
     * @param {TransactionCreateArgs} args - Arguments to create a Transaction.
     * @example
     * // Create one Transaction
     * const Transaction = await prisma.transaction.create({
     *   data: {
     *     // ... data to create a Transaction
     *   }
     * })
     * 
     */
    create<T extends TransactionCreateArgs>(args: SelectSubset<T, TransactionCreateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Transactions.
     * @param {TransactionCreateManyArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransactionCreateManyArgs>(args?: SelectSubset<T, TransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Transactions and returns the data saved in the database.
     * @param {TransactionCreateManyAndReturnArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Transactions and only return the `id`
     * const transactionWithIdOnly = await prisma.transaction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, TransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Transaction.
     * @param {TransactionDeleteArgs} args - Arguments to delete one Transaction.
     * @example
     * // Delete one Transaction
     * const Transaction = await prisma.transaction.delete({
     *   where: {
     *     // ... filter to delete one Transaction
     *   }
     * })
     * 
     */
    delete<T extends TransactionDeleteArgs>(args: SelectSubset<T, TransactionDeleteArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Transaction.
     * @param {TransactionUpdateArgs} args - Arguments to update one Transaction.
     * @example
     * // Update one Transaction
     * const transaction = await prisma.transaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransactionUpdateArgs>(args: SelectSubset<T, TransactionUpdateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Transactions.
     * @param {TransactionDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransactionDeleteManyArgs>(args?: SelectSubset<T, TransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransactionUpdateManyArgs>(args: SelectSubset<T, TransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions and returns the data updated in the database.
     * @param {TransactionUpdateManyAndReturnArgs} args - Arguments to update many Transactions.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Transactions and only return the `id`
     * const transactionWithIdOnly = await prisma.transaction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TransactionUpdateManyAndReturnArgs>(args: SelectSubset<T, TransactionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Transaction.
     * @param {TransactionUpsertArgs} args - Arguments to update or create a Transaction.
     * @example
     * // Update or create a Transaction
     * const transaction = await prisma.transaction.upsert({
     *   create: {
     *     // ... data to create a Transaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transaction we want to update
     *   }
     * })
     */
    upsert<T extends TransactionUpsertArgs>(args: SelectSubset<T, TransactionUpsertArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transaction.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends TransactionCountArgs>(
      args?: Subset<T, TransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionAggregateArgs>(args: Subset<T, TransactionAggregateArgs>): Prisma.PrismaPromise<GetTransactionAggregateType<T>>

    /**
     * Group by Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionGroupByArgs['orderBy'] }
        : { orderBy?: TransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transaction model
   */
  readonly fields: TransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    fromAddressRel<T extends Transaction$fromAddressRelArgs<ExtArgs> = {}>(args?: Subset<T, Transaction$fromAddressRelArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    toAddressRel<T extends Transaction$toAddressRelArgs<ExtArgs> = {}>(args?: Subset<T, Transaction$toAddressRelArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    riskAnalysis<T extends Transaction$riskAnalysisArgs<ExtArgs> = {}>(args?: Subset<T, Transaction$riskAnalysisArgs<ExtArgs>>): Prisma__RiskAnalysisClient<$Result.GetResult<Prisma.$RiskAnalysisPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Transaction model
   */
  interface TransactionFieldRefs {
    readonly id: FieldRef<"Transaction", 'String'>
    readonly hash: FieldRef<"Transaction", 'String'>
    readonly chain: FieldRef<"Transaction", 'ChainType'>
    readonly fromAddress: FieldRef<"Transaction", 'String'>
    readonly toAddress: FieldRef<"Transaction", 'String'>
    readonly value: FieldRef<"Transaction", 'String'>
    readonly fee: FieldRef<"Transaction", 'String'>
    readonly gasUsed: FieldRef<"Transaction", 'String'>
    readonly gasPrice: FieldRef<"Transaction", 'String'>
    readonly blockNumber: FieldRef<"Transaction", 'BigInt'>
    readonly blockHash: FieldRef<"Transaction", 'String'>
    readonly timestamp: FieldRef<"Transaction", 'DateTime'>
    readonly status: FieldRef<"Transaction", 'TransactionStatus'>
    readonly data: FieldRef<"Transaction", 'String'>
    readonly decoded: FieldRef<"Transaction", 'Json'>
    readonly riskScore: FieldRef<"Transaction", 'Int'>
    readonly riskLevel: FieldRef<"Transaction", 'RiskLevel'>
    readonly createdAt: FieldRef<"Transaction", 'DateTime'>
    readonly updatedAt: FieldRef<"Transaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Transaction findUnique
   */
  export type TransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findUniqueOrThrow
   */
  export type TransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findFirst
   */
  export type TransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findFirstOrThrow
   */
  export type TransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findMany
   */
  export type TransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transactions to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction create
   */
  export type TransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a Transaction.
     */
    data: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
  }

  /**
   * Transaction createMany
   */
  export type TransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Transaction createManyAndReturn
   */
  export type TransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transaction update
   */
  export type TransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a Transaction.
     */
    data: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
    /**
     * Choose, which Transaction to update.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction updateMany
   */
  export type TransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to update.
     */
    limit?: number
  }

  /**
   * Transaction updateManyAndReturn
   */
  export type TransactionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transaction upsert
   */
  export type TransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the Transaction to update in case it exists.
     */
    where: TransactionWhereUniqueInput
    /**
     * In case the Transaction found by the `where` argument doesn't exist, create a new Transaction with this data.
     */
    create: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
    /**
     * In case the Transaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
  }

  /**
   * Transaction delete
   */
  export type TransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter which Transaction to delete.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction deleteMany
   */
  export type TransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transactions to delete
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to delete.
     */
    limit?: number
  }

  /**
   * Transaction.fromAddressRel
   */
  export type Transaction$fromAddressRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    where?: AddressWhereInput
  }

  /**
   * Transaction.toAddressRel
   */
  export type Transaction$toAddressRelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    where?: AddressWhereInput
  }

  /**
   * Transaction.riskAnalysis
   */
  export type Transaction$riskAnalysisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAnalysis
     */
    select?: RiskAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RiskAnalysis
     */
    omit?: RiskAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAnalysisInclude<ExtArgs> | null
    where?: RiskAnalysisWhereInput
  }

  /**
   * Transaction without action
   */
  export type TransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
  }


  /**
   * Model Address
   */

  export type AggregateAddress = {
    _count: AddressCountAggregateOutputType | null
    _avg: AddressAvgAggregateOutputType | null
    _sum: AddressSumAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  export type AddressAvgAggregateOutputType = {
    transactionCount: number | null
    riskScore: number | null
  }

  export type AddressSumAggregateOutputType = {
    transactionCount: number | null
    riskScore: number | null
  }

  export type AddressMinAggregateOutputType = {
    id: string | null
    address: string | null
    chain: $Enums.ChainType | null
    label: string | null
    isContract: boolean | null
    firstSeen: Date | null
    lastSeen: Date | null
    transactionCount: number | null
    totalValueSent: string | null
    totalValueReceived: string | null
    riskScore: number | null
    riskLevel: $Enums.RiskLevel | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AddressMaxAggregateOutputType = {
    id: string | null
    address: string | null
    chain: $Enums.ChainType | null
    label: string | null
    isContract: boolean | null
    firstSeen: Date | null
    lastSeen: Date | null
    transactionCount: number | null
    totalValueSent: string | null
    totalValueReceived: string | null
    riskScore: number | null
    riskLevel: $Enums.RiskLevel | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AddressCountAggregateOutputType = {
    id: number
    address: number
    chain: number
    label: number
    isContract: number
    firstSeen: number
    lastSeen: number
    transactionCount: number
    totalValueSent: number
    totalValueReceived: number
    riskScore: number
    riskLevel: number
    tags: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AddressAvgAggregateInputType = {
    transactionCount?: true
    riskScore?: true
  }

  export type AddressSumAggregateInputType = {
    transactionCount?: true
    riskScore?: true
  }

  export type AddressMinAggregateInputType = {
    id?: true
    address?: true
    chain?: true
    label?: true
    isContract?: true
    firstSeen?: true
    lastSeen?: true
    transactionCount?: true
    totalValueSent?: true
    totalValueReceived?: true
    riskScore?: true
    riskLevel?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AddressMaxAggregateInputType = {
    id?: true
    address?: true
    chain?: true
    label?: true
    isContract?: true
    firstSeen?: true
    lastSeen?: true
    transactionCount?: true
    totalValueSent?: true
    totalValueReceived?: true
    riskScore?: true
    riskLevel?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AddressCountAggregateInputType = {
    id?: true
    address?: true
    chain?: true
    label?: true
    isContract?: true
    firstSeen?: true
    lastSeen?: true
    transactionCount?: true
    totalValueSent?: true
    totalValueReceived?: true
    riskScore?: true
    riskLevel?: true
    tags?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AddressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Address to aggregate.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Addresses
    **/
    _count?: true | AddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AddressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AddressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AddressMaxAggregateInputType
  }

  export type GetAddressAggregateType<T extends AddressAggregateArgs> = {
        [P in keyof T & keyof AggregateAddress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAddress[P]>
      : GetScalarType<T[P], AggregateAddress[P]>
  }




  export type AddressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AddressWhereInput
    orderBy?: AddressOrderByWithAggregationInput | AddressOrderByWithAggregationInput[]
    by: AddressScalarFieldEnum[] | AddressScalarFieldEnum
    having?: AddressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AddressCountAggregateInputType | true
    _avg?: AddressAvgAggregateInputType
    _sum?: AddressSumAggregateInputType
    _min?: AddressMinAggregateInputType
    _max?: AddressMaxAggregateInputType
  }

  export type AddressGroupByOutputType = {
    id: string
    address: string
    chain: $Enums.ChainType
    label: string | null
    isContract: boolean
    firstSeen: Date
    lastSeen: Date
    transactionCount: number
    totalValueSent: string
    totalValueReceived: string
    riskScore: number
    riskLevel: $Enums.RiskLevel
    tags: string[]
    createdAt: Date
    updatedAt: Date
    _count: AddressCountAggregateOutputType | null
    _avg: AddressAvgAggregateOutputType | null
    _sum: AddressSumAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  type GetAddressGroupByPayload<T extends AddressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AddressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AddressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AddressGroupByOutputType[P]>
            : GetScalarType<T[P], AddressGroupByOutputType[P]>
        }
      >
    >


  export type AddressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    address?: boolean
    chain?: boolean
    label?: boolean
    isContract?: boolean
    firstSeen?: boolean
    lastSeen?: boolean
    transactionCount?: boolean
    totalValueSent?: boolean
    totalValueReceived?: boolean
    riskScore?: boolean
    riskLevel?: boolean
    tags?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sentTransactions?: boolean | Address$sentTransactionsArgs<ExtArgs>
    receivedTransactions?: boolean | Address$receivedTransactionsArgs<ExtArgs>
    riskFactors?: boolean | Address$riskFactorsArgs<ExtArgs>
    _count?: boolean | AddressCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["address"]>

  export type AddressSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    address?: boolean
    chain?: boolean
    label?: boolean
    isContract?: boolean
    firstSeen?: boolean
    lastSeen?: boolean
    transactionCount?: boolean
    totalValueSent?: boolean
    totalValueReceived?: boolean
    riskScore?: boolean
    riskLevel?: boolean
    tags?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["address"]>

  export type AddressSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    address?: boolean
    chain?: boolean
    label?: boolean
    isContract?: boolean
    firstSeen?: boolean
    lastSeen?: boolean
    transactionCount?: boolean
    totalValueSent?: boolean
    totalValueReceived?: boolean
    riskScore?: boolean
    riskLevel?: boolean
    tags?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["address"]>

  export type AddressSelectScalar = {
    id?: boolean
    address?: boolean
    chain?: boolean
    label?: boolean
    isContract?: boolean
    firstSeen?: boolean
    lastSeen?: boolean
    transactionCount?: boolean
    totalValueSent?: boolean
    totalValueReceived?: boolean
    riskScore?: boolean
    riskLevel?: boolean
    tags?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AddressOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "address" | "chain" | "label" | "isContract" | "firstSeen" | "lastSeen" | "transactionCount" | "totalValueSent" | "totalValueReceived" | "riskScore" | "riskLevel" | "tags" | "createdAt" | "updatedAt", ExtArgs["result"]["address"]>
  export type AddressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sentTransactions?: boolean | Address$sentTransactionsArgs<ExtArgs>
    receivedTransactions?: boolean | Address$receivedTransactionsArgs<ExtArgs>
    riskFactors?: boolean | Address$riskFactorsArgs<ExtArgs>
    _count?: boolean | AddressCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AddressIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type AddressIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AddressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Address"
    objects: {
      sentTransactions: Prisma.$TransactionPayload<ExtArgs>[]
      receivedTransactions: Prisma.$TransactionPayload<ExtArgs>[]
      riskFactors: Prisma.$AddressRiskFactorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      address: string
      chain: $Enums.ChainType
      label: string | null
      isContract: boolean
      firstSeen: Date
      lastSeen: Date
      transactionCount: number
      totalValueSent: string
      totalValueReceived: string
      riskScore: number
      riskLevel: $Enums.RiskLevel
      tags: string[]
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["address"]>
    composites: {}
  }

  type AddressGetPayload<S extends boolean | null | undefined | AddressDefaultArgs> = $Result.GetResult<Prisma.$AddressPayload, S>

  type AddressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AddressFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AddressCountAggregateInputType | true
    }

  export interface AddressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Address'], meta: { name: 'Address' } }
    /**
     * Find zero or one Address that matches the filter.
     * @param {AddressFindUniqueArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AddressFindUniqueArgs>(args: SelectSubset<T, AddressFindUniqueArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Address that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AddressFindUniqueOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AddressFindUniqueOrThrowArgs>(args: SelectSubset<T, AddressFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Address that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AddressFindFirstArgs>(args?: SelectSubset<T, AddressFindFirstArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Address that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AddressFindFirstOrThrowArgs>(args?: SelectSubset<T, AddressFindFirstOrThrowArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Addresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Addresses
     * const addresses = await prisma.address.findMany()
     * 
     * // Get first 10 Addresses
     * const addresses = await prisma.address.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const addressWithIdOnly = await prisma.address.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AddressFindManyArgs>(args?: SelectSubset<T, AddressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Address.
     * @param {AddressCreateArgs} args - Arguments to create a Address.
     * @example
     * // Create one Address
     * const Address = await prisma.address.create({
     *   data: {
     *     // ... data to create a Address
     *   }
     * })
     * 
     */
    create<T extends AddressCreateArgs>(args: SelectSubset<T, AddressCreateArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Addresses.
     * @param {AddressCreateManyArgs} args - Arguments to create many Addresses.
     * @example
     * // Create many Addresses
     * const address = await prisma.address.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AddressCreateManyArgs>(args?: SelectSubset<T, AddressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Addresses and returns the data saved in the database.
     * @param {AddressCreateManyAndReturnArgs} args - Arguments to create many Addresses.
     * @example
     * // Create many Addresses
     * const address = await prisma.address.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Addresses and only return the `id`
     * const addressWithIdOnly = await prisma.address.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AddressCreateManyAndReturnArgs>(args?: SelectSubset<T, AddressCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Address.
     * @param {AddressDeleteArgs} args - Arguments to delete one Address.
     * @example
     * // Delete one Address
     * const Address = await prisma.address.delete({
     *   where: {
     *     // ... filter to delete one Address
     *   }
     * })
     * 
     */
    delete<T extends AddressDeleteArgs>(args: SelectSubset<T, AddressDeleteArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Address.
     * @param {AddressUpdateArgs} args - Arguments to update one Address.
     * @example
     * // Update one Address
     * const address = await prisma.address.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AddressUpdateArgs>(args: SelectSubset<T, AddressUpdateArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Addresses.
     * @param {AddressDeleteManyArgs} args - Arguments to filter Addresses to delete.
     * @example
     * // Delete a few Addresses
     * const { count } = await prisma.address.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AddressDeleteManyArgs>(args?: SelectSubset<T, AddressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Addresses
     * const address = await prisma.address.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AddressUpdateManyArgs>(args: SelectSubset<T, AddressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Addresses and returns the data updated in the database.
     * @param {AddressUpdateManyAndReturnArgs} args - Arguments to update many Addresses.
     * @example
     * // Update many Addresses
     * const address = await prisma.address.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Addresses and only return the `id`
     * const addressWithIdOnly = await prisma.address.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AddressUpdateManyAndReturnArgs>(args: SelectSubset<T, AddressUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Address.
     * @param {AddressUpsertArgs} args - Arguments to update or create a Address.
     * @example
     * // Update or create a Address
     * const address = await prisma.address.upsert({
     *   create: {
     *     // ... data to create a Address
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Address we want to update
     *   }
     * })
     */
    upsert<T extends AddressUpsertArgs>(args: SelectSubset<T, AddressUpsertArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressCountArgs} args - Arguments to filter Addresses to count.
     * @example
     * // Count the number of Addresses
     * const count = await prisma.address.count({
     *   where: {
     *     // ... the filter for the Addresses we want to count
     *   }
     * })
    **/
    count<T extends AddressCountArgs>(
      args?: Subset<T, AddressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AddressAggregateArgs>(args: Subset<T, AddressAggregateArgs>): Prisma.PrismaPromise<GetAddressAggregateType<T>>

    /**
     * Group by Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AddressGroupByArgs['orderBy'] }
        : { orderBy?: AddressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAddressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Address model
   */
  readonly fields: AddressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Address.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AddressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sentTransactions<T extends Address$sentTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, Address$sentTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    receivedTransactions<T extends Address$receivedTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, Address$receivedTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    riskFactors<T extends Address$riskFactorsArgs<ExtArgs> = {}>(args?: Subset<T, Address$riskFactorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressRiskFactorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Address model
   */
  interface AddressFieldRefs {
    readonly id: FieldRef<"Address", 'String'>
    readonly address: FieldRef<"Address", 'String'>
    readonly chain: FieldRef<"Address", 'ChainType'>
    readonly label: FieldRef<"Address", 'String'>
    readonly isContract: FieldRef<"Address", 'Boolean'>
    readonly firstSeen: FieldRef<"Address", 'DateTime'>
    readonly lastSeen: FieldRef<"Address", 'DateTime'>
    readonly transactionCount: FieldRef<"Address", 'Int'>
    readonly totalValueSent: FieldRef<"Address", 'String'>
    readonly totalValueReceived: FieldRef<"Address", 'String'>
    readonly riskScore: FieldRef<"Address", 'Int'>
    readonly riskLevel: FieldRef<"Address", 'RiskLevel'>
    readonly tags: FieldRef<"Address", 'String[]'>
    readonly createdAt: FieldRef<"Address", 'DateTime'>
    readonly updatedAt: FieldRef<"Address", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Address findUnique
   */
  export type AddressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address findUniqueOrThrow
   */
  export type AddressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address findFirst
   */
  export type AddressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     */
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * Address findFirstOrThrow
   */
  export type AddressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     */
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * Address findMany
   */
  export type AddressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Addresses to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * Address create
   */
  export type AddressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The data needed to create a Address.
     */
    data: XOR<AddressCreateInput, AddressUncheckedCreateInput>
  }

  /**
   * Address createMany
   */
  export type AddressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Addresses.
     */
    data: AddressCreateManyInput | AddressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Address createManyAndReturn
   */
  export type AddressCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * The data used to create many Addresses.
     */
    data: AddressCreateManyInput | AddressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Address update
   */
  export type AddressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The data needed to update a Address.
     */
    data: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
    /**
     * Choose, which Address to update.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address updateMany
   */
  export type AddressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Addresses.
     */
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyInput>
    /**
     * Filter which Addresses to update
     */
    where?: AddressWhereInput
    /**
     * Limit how many Addresses to update.
     */
    limit?: number
  }

  /**
   * Address updateManyAndReturn
   */
  export type AddressUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * The data used to update Addresses.
     */
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyInput>
    /**
     * Filter which Addresses to update
     */
    where?: AddressWhereInput
    /**
     * Limit how many Addresses to update.
     */
    limit?: number
  }

  /**
   * Address upsert
   */
  export type AddressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The filter to search for the Address to update in case it exists.
     */
    where: AddressWhereUniqueInput
    /**
     * In case the Address found by the `where` argument doesn't exist, create a new Address with this data.
     */
    create: XOR<AddressCreateInput, AddressUncheckedCreateInput>
    /**
     * In case the Address was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
  }

  /**
   * Address delete
   */
  export type AddressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter which Address to delete.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address deleteMany
   */
  export type AddressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Addresses to delete
     */
    where?: AddressWhereInput
    /**
     * Limit how many Addresses to delete.
     */
    limit?: number
  }

  /**
   * Address.sentTransactions
   */
  export type Address$sentTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Address.receivedTransactions
   */
  export type Address$receivedTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Address.riskFactors
   */
  export type Address$riskFactorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddressRiskFactor
     */
    select?: AddressRiskFactorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AddressRiskFactor
     */
    omit?: AddressRiskFactorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressRiskFactorInclude<ExtArgs> | null
    where?: AddressRiskFactorWhereInput
    orderBy?: AddressRiskFactorOrderByWithRelationInput | AddressRiskFactorOrderByWithRelationInput[]
    cursor?: AddressRiskFactorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AddressRiskFactorScalarFieldEnum | AddressRiskFactorScalarFieldEnum[]
  }

  /**
   * Address without action
   */
  export type AddressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
  }


  /**
   * Model RiskAnalysis
   */

  export type AggregateRiskAnalysis = {
    _count: RiskAnalysisCountAggregateOutputType | null
    _avg: RiskAnalysisAvgAggregateOutputType | null
    _sum: RiskAnalysisSumAggregateOutputType | null
    _min: RiskAnalysisMinAggregateOutputType | null
    _max: RiskAnalysisMaxAggregateOutputType | null
  }

  export type RiskAnalysisAvgAggregateOutputType = {
    amountScore: number | null
    addressScore: number | null
    behaviorScore: number | null
    totalScore: number | null
  }

  export type RiskAnalysisSumAggregateOutputType = {
    amountScore: number | null
    addressScore: number | null
    behaviorScore: number | null
    totalScore: number | null
  }

  export type RiskAnalysisMinAggregateOutputType = {
    id: string | null
    transactionId: string | null
    largeAmount: boolean | null
    newAddress: boolean | null
    blacklisted: boolean | null
    mixingService: boolean | null
    suspiciousPattern: boolean | null
    amountScore: number | null
    addressScore: number | null
    behaviorScore: number | null
    totalScore: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RiskAnalysisMaxAggregateOutputType = {
    id: string | null
    transactionId: string | null
    largeAmount: boolean | null
    newAddress: boolean | null
    blacklisted: boolean | null
    mixingService: boolean | null
    suspiciousPattern: boolean | null
    amountScore: number | null
    addressScore: number | null
    behaviorScore: number | null
    totalScore: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RiskAnalysisCountAggregateOutputType = {
    id: number
    transactionId: number
    largeAmount: number
    newAddress: number
    blacklisted: number
    mixingService: number
    suspiciousPattern: number
    amountScore: number
    addressScore: number
    behaviorScore: number
    totalScore: number
    details: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RiskAnalysisAvgAggregateInputType = {
    amountScore?: true
    addressScore?: true
    behaviorScore?: true
    totalScore?: true
  }

  export type RiskAnalysisSumAggregateInputType = {
    amountScore?: true
    addressScore?: true
    behaviorScore?: true
    totalScore?: true
  }

  export type RiskAnalysisMinAggregateInputType = {
    id?: true
    transactionId?: true
    largeAmount?: true
    newAddress?: true
    blacklisted?: true
    mixingService?: true
    suspiciousPattern?: true
    amountScore?: true
    addressScore?: true
    behaviorScore?: true
    totalScore?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RiskAnalysisMaxAggregateInputType = {
    id?: true
    transactionId?: true
    largeAmount?: true
    newAddress?: true
    blacklisted?: true
    mixingService?: true
    suspiciousPattern?: true
    amountScore?: true
    addressScore?: true
    behaviorScore?: true
    totalScore?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RiskAnalysisCountAggregateInputType = {
    id?: true
    transactionId?: true
    largeAmount?: true
    newAddress?: true
    blacklisted?: true
    mixingService?: true
    suspiciousPattern?: true
    amountScore?: true
    addressScore?: true
    behaviorScore?: true
    totalScore?: true
    details?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RiskAnalysisAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RiskAnalysis to aggregate.
     */
    where?: RiskAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RiskAnalyses to fetch.
     */
    orderBy?: RiskAnalysisOrderByWithRelationInput | RiskAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RiskAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RiskAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RiskAnalyses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RiskAnalyses
    **/
    _count?: true | RiskAnalysisCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RiskAnalysisAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RiskAnalysisSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RiskAnalysisMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RiskAnalysisMaxAggregateInputType
  }

  export type GetRiskAnalysisAggregateType<T extends RiskAnalysisAggregateArgs> = {
        [P in keyof T & keyof AggregateRiskAnalysis]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRiskAnalysis[P]>
      : GetScalarType<T[P], AggregateRiskAnalysis[P]>
  }




  export type RiskAnalysisGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RiskAnalysisWhereInput
    orderBy?: RiskAnalysisOrderByWithAggregationInput | RiskAnalysisOrderByWithAggregationInput[]
    by: RiskAnalysisScalarFieldEnum[] | RiskAnalysisScalarFieldEnum
    having?: RiskAnalysisScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RiskAnalysisCountAggregateInputType | true
    _avg?: RiskAnalysisAvgAggregateInputType
    _sum?: RiskAnalysisSumAggregateInputType
    _min?: RiskAnalysisMinAggregateInputType
    _max?: RiskAnalysisMaxAggregateInputType
  }

  export type RiskAnalysisGroupByOutputType = {
    id: string
    transactionId: string
    largeAmount: boolean
    newAddress: boolean
    blacklisted: boolean
    mixingService: boolean
    suspiciousPattern: boolean
    amountScore: number
    addressScore: number
    behaviorScore: number
    totalScore: number
    details: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: RiskAnalysisCountAggregateOutputType | null
    _avg: RiskAnalysisAvgAggregateOutputType | null
    _sum: RiskAnalysisSumAggregateOutputType | null
    _min: RiskAnalysisMinAggregateOutputType | null
    _max: RiskAnalysisMaxAggregateOutputType | null
  }

  type GetRiskAnalysisGroupByPayload<T extends RiskAnalysisGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RiskAnalysisGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RiskAnalysisGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RiskAnalysisGroupByOutputType[P]>
            : GetScalarType<T[P], RiskAnalysisGroupByOutputType[P]>
        }
      >
    >


  export type RiskAnalysisSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    transactionId?: boolean
    largeAmount?: boolean
    newAddress?: boolean
    blacklisted?: boolean
    mixingService?: boolean
    suspiciousPattern?: boolean
    amountScore?: boolean
    addressScore?: boolean
    behaviorScore?: boolean
    totalScore?: boolean
    details?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    transaction?: boolean | TransactionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["riskAnalysis"]>

  export type RiskAnalysisSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    transactionId?: boolean
    largeAmount?: boolean
    newAddress?: boolean
    blacklisted?: boolean
    mixingService?: boolean
    suspiciousPattern?: boolean
    amountScore?: boolean
    addressScore?: boolean
    behaviorScore?: boolean
    totalScore?: boolean
    details?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    transaction?: boolean | TransactionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["riskAnalysis"]>

  export type RiskAnalysisSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    transactionId?: boolean
    largeAmount?: boolean
    newAddress?: boolean
    blacklisted?: boolean
    mixingService?: boolean
    suspiciousPattern?: boolean
    amountScore?: boolean
    addressScore?: boolean
    behaviorScore?: boolean
    totalScore?: boolean
    details?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    transaction?: boolean | TransactionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["riskAnalysis"]>

  export type RiskAnalysisSelectScalar = {
    id?: boolean
    transactionId?: boolean
    largeAmount?: boolean
    newAddress?: boolean
    blacklisted?: boolean
    mixingService?: boolean
    suspiciousPattern?: boolean
    amountScore?: boolean
    addressScore?: boolean
    behaviorScore?: boolean
    totalScore?: boolean
    details?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RiskAnalysisOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "transactionId" | "largeAmount" | "newAddress" | "blacklisted" | "mixingService" | "suspiciousPattern" | "amountScore" | "addressScore" | "behaviorScore" | "totalScore" | "details" | "createdAt" | "updatedAt", ExtArgs["result"]["riskAnalysis"]>
  export type RiskAnalysisInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transaction?: boolean | TransactionDefaultArgs<ExtArgs>
  }
  export type RiskAnalysisIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transaction?: boolean | TransactionDefaultArgs<ExtArgs>
  }
  export type RiskAnalysisIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transaction?: boolean | TransactionDefaultArgs<ExtArgs>
  }

  export type $RiskAnalysisPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RiskAnalysis"
    objects: {
      transaction: Prisma.$TransactionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      transactionId: string
      largeAmount: boolean
      newAddress: boolean
      blacklisted: boolean
      mixingService: boolean
      suspiciousPattern: boolean
      amountScore: number
      addressScore: number
      behaviorScore: number
      totalScore: number
      details: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["riskAnalysis"]>
    composites: {}
  }

  type RiskAnalysisGetPayload<S extends boolean | null | undefined | RiskAnalysisDefaultArgs> = $Result.GetResult<Prisma.$RiskAnalysisPayload, S>

  type RiskAnalysisCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RiskAnalysisFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RiskAnalysisCountAggregateInputType | true
    }

  export interface RiskAnalysisDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RiskAnalysis'], meta: { name: 'RiskAnalysis' } }
    /**
     * Find zero or one RiskAnalysis that matches the filter.
     * @param {RiskAnalysisFindUniqueArgs} args - Arguments to find a RiskAnalysis
     * @example
     * // Get one RiskAnalysis
     * const riskAnalysis = await prisma.riskAnalysis.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RiskAnalysisFindUniqueArgs>(args: SelectSubset<T, RiskAnalysisFindUniqueArgs<ExtArgs>>): Prisma__RiskAnalysisClient<$Result.GetResult<Prisma.$RiskAnalysisPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RiskAnalysis that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RiskAnalysisFindUniqueOrThrowArgs} args - Arguments to find a RiskAnalysis
     * @example
     * // Get one RiskAnalysis
     * const riskAnalysis = await prisma.riskAnalysis.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RiskAnalysisFindUniqueOrThrowArgs>(args: SelectSubset<T, RiskAnalysisFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RiskAnalysisClient<$Result.GetResult<Prisma.$RiskAnalysisPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RiskAnalysis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RiskAnalysisFindFirstArgs} args - Arguments to find a RiskAnalysis
     * @example
     * // Get one RiskAnalysis
     * const riskAnalysis = await prisma.riskAnalysis.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RiskAnalysisFindFirstArgs>(args?: SelectSubset<T, RiskAnalysisFindFirstArgs<ExtArgs>>): Prisma__RiskAnalysisClient<$Result.GetResult<Prisma.$RiskAnalysisPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RiskAnalysis that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RiskAnalysisFindFirstOrThrowArgs} args - Arguments to find a RiskAnalysis
     * @example
     * // Get one RiskAnalysis
     * const riskAnalysis = await prisma.riskAnalysis.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RiskAnalysisFindFirstOrThrowArgs>(args?: SelectSubset<T, RiskAnalysisFindFirstOrThrowArgs<ExtArgs>>): Prisma__RiskAnalysisClient<$Result.GetResult<Prisma.$RiskAnalysisPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RiskAnalyses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RiskAnalysisFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RiskAnalyses
     * const riskAnalyses = await prisma.riskAnalysis.findMany()
     * 
     * // Get first 10 RiskAnalyses
     * const riskAnalyses = await prisma.riskAnalysis.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const riskAnalysisWithIdOnly = await prisma.riskAnalysis.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RiskAnalysisFindManyArgs>(args?: SelectSubset<T, RiskAnalysisFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RiskAnalysisPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RiskAnalysis.
     * @param {RiskAnalysisCreateArgs} args - Arguments to create a RiskAnalysis.
     * @example
     * // Create one RiskAnalysis
     * const RiskAnalysis = await prisma.riskAnalysis.create({
     *   data: {
     *     // ... data to create a RiskAnalysis
     *   }
     * })
     * 
     */
    create<T extends RiskAnalysisCreateArgs>(args: SelectSubset<T, RiskAnalysisCreateArgs<ExtArgs>>): Prisma__RiskAnalysisClient<$Result.GetResult<Prisma.$RiskAnalysisPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RiskAnalyses.
     * @param {RiskAnalysisCreateManyArgs} args - Arguments to create many RiskAnalyses.
     * @example
     * // Create many RiskAnalyses
     * const riskAnalysis = await prisma.riskAnalysis.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RiskAnalysisCreateManyArgs>(args?: SelectSubset<T, RiskAnalysisCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RiskAnalyses and returns the data saved in the database.
     * @param {RiskAnalysisCreateManyAndReturnArgs} args - Arguments to create many RiskAnalyses.
     * @example
     * // Create many RiskAnalyses
     * const riskAnalysis = await prisma.riskAnalysis.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RiskAnalyses and only return the `id`
     * const riskAnalysisWithIdOnly = await prisma.riskAnalysis.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RiskAnalysisCreateManyAndReturnArgs>(args?: SelectSubset<T, RiskAnalysisCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RiskAnalysisPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RiskAnalysis.
     * @param {RiskAnalysisDeleteArgs} args - Arguments to delete one RiskAnalysis.
     * @example
     * // Delete one RiskAnalysis
     * const RiskAnalysis = await prisma.riskAnalysis.delete({
     *   where: {
     *     // ... filter to delete one RiskAnalysis
     *   }
     * })
     * 
     */
    delete<T extends RiskAnalysisDeleteArgs>(args: SelectSubset<T, RiskAnalysisDeleteArgs<ExtArgs>>): Prisma__RiskAnalysisClient<$Result.GetResult<Prisma.$RiskAnalysisPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RiskAnalysis.
     * @param {RiskAnalysisUpdateArgs} args - Arguments to update one RiskAnalysis.
     * @example
     * // Update one RiskAnalysis
     * const riskAnalysis = await prisma.riskAnalysis.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RiskAnalysisUpdateArgs>(args: SelectSubset<T, RiskAnalysisUpdateArgs<ExtArgs>>): Prisma__RiskAnalysisClient<$Result.GetResult<Prisma.$RiskAnalysisPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RiskAnalyses.
     * @param {RiskAnalysisDeleteManyArgs} args - Arguments to filter RiskAnalyses to delete.
     * @example
     * // Delete a few RiskAnalyses
     * const { count } = await prisma.riskAnalysis.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RiskAnalysisDeleteManyArgs>(args?: SelectSubset<T, RiskAnalysisDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RiskAnalyses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RiskAnalysisUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RiskAnalyses
     * const riskAnalysis = await prisma.riskAnalysis.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RiskAnalysisUpdateManyArgs>(args: SelectSubset<T, RiskAnalysisUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RiskAnalyses and returns the data updated in the database.
     * @param {RiskAnalysisUpdateManyAndReturnArgs} args - Arguments to update many RiskAnalyses.
     * @example
     * // Update many RiskAnalyses
     * const riskAnalysis = await prisma.riskAnalysis.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RiskAnalyses and only return the `id`
     * const riskAnalysisWithIdOnly = await prisma.riskAnalysis.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RiskAnalysisUpdateManyAndReturnArgs>(args: SelectSubset<T, RiskAnalysisUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RiskAnalysisPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RiskAnalysis.
     * @param {RiskAnalysisUpsertArgs} args - Arguments to update or create a RiskAnalysis.
     * @example
     * // Update or create a RiskAnalysis
     * const riskAnalysis = await prisma.riskAnalysis.upsert({
     *   create: {
     *     // ... data to create a RiskAnalysis
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RiskAnalysis we want to update
     *   }
     * })
     */
    upsert<T extends RiskAnalysisUpsertArgs>(args: SelectSubset<T, RiskAnalysisUpsertArgs<ExtArgs>>): Prisma__RiskAnalysisClient<$Result.GetResult<Prisma.$RiskAnalysisPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RiskAnalyses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RiskAnalysisCountArgs} args - Arguments to filter RiskAnalyses to count.
     * @example
     * // Count the number of RiskAnalyses
     * const count = await prisma.riskAnalysis.count({
     *   where: {
     *     // ... the filter for the RiskAnalyses we want to count
     *   }
     * })
    **/
    count<T extends RiskAnalysisCountArgs>(
      args?: Subset<T, RiskAnalysisCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RiskAnalysisCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RiskAnalysis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RiskAnalysisAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RiskAnalysisAggregateArgs>(args: Subset<T, RiskAnalysisAggregateArgs>): Prisma.PrismaPromise<GetRiskAnalysisAggregateType<T>>

    /**
     * Group by RiskAnalysis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RiskAnalysisGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RiskAnalysisGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RiskAnalysisGroupByArgs['orderBy'] }
        : { orderBy?: RiskAnalysisGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RiskAnalysisGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRiskAnalysisGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RiskAnalysis model
   */
  readonly fields: RiskAnalysisFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RiskAnalysis.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RiskAnalysisClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    transaction<T extends TransactionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TransactionDefaultArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RiskAnalysis model
   */
  interface RiskAnalysisFieldRefs {
    readonly id: FieldRef<"RiskAnalysis", 'String'>
    readonly transactionId: FieldRef<"RiskAnalysis", 'String'>
    readonly largeAmount: FieldRef<"RiskAnalysis", 'Boolean'>
    readonly newAddress: FieldRef<"RiskAnalysis", 'Boolean'>
    readonly blacklisted: FieldRef<"RiskAnalysis", 'Boolean'>
    readonly mixingService: FieldRef<"RiskAnalysis", 'Boolean'>
    readonly suspiciousPattern: FieldRef<"RiskAnalysis", 'Boolean'>
    readonly amountScore: FieldRef<"RiskAnalysis", 'Int'>
    readonly addressScore: FieldRef<"RiskAnalysis", 'Int'>
    readonly behaviorScore: FieldRef<"RiskAnalysis", 'Int'>
    readonly totalScore: FieldRef<"RiskAnalysis", 'Int'>
    readonly details: FieldRef<"RiskAnalysis", 'Json'>
    readonly createdAt: FieldRef<"RiskAnalysis", 'DateTime'>
    readonly updatedAt: FieldRef<"RiskAnalysis", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RiskAnalysis findUnique
   */
  export type RiskAnalysisFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAnalysis
     */
    select?: RiskAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RiskAnalysis
     */
    omit?: RiskAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which RiskAnalysis to fetch.
     */
    where: RiskAnalysisWhereUniqueInput
  }

  /**
   * RiskAnalysis findUniqueOrThrow
   */
  export type RiskAnalysisFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAnalysis
     */
    select?: RiskAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RiskAnalysis
     */
    omit?: RiskAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which RiskAnalysis to fetch.
     */
    where: RiskAnalysisWhereUniqueInput
  }

  /**
   * RiskAnalysis findFirst
   */
  export type RiskAnalysisFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAnalysis
     */
    select?: RiskAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RiskAnalysis
     */
    omit?: RiskAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which RiskAnalysis to fetch.
     */
    where?: RiskAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RiskAnalyses to fetch.
     */
    orderBy?: RiskAnalysisOrderByWithRelationInput | RiskAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RiskAnalyses.
     */
    cursor?: RiskAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RiskAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RiskAnalyses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RiskAnalyses.
     */
    distinct?: RiskAnalysisScalarFieldEnum | RiskAnalysisScalarFieldEnum[]
  }

  /**
   * RiskAnalysis findFirstOrThrow
   */
  export type RiskAnalysisFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAnalysis
     */
    select?: RiskAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RiskAnalysis
     */
    omit?: RiskAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which RiskAnalysis to fetch.
     */
    where?: RiskAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RiskAnalyses to fetch.
     */
    orderBy?: RiskAnalysisOrderByWithRelationInput | RiskAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RiskAnalyses.
     */
    cursor?: RiskAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RiskAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RiskAnalyses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RiskAnalyses.
     */
    distinct?: RiskAnalysisScalarFieldEnum | RiskAnalysisScalarFieldEnum[]
  }

  /**
   * RiskAnalysis findMany
   */
  export type RiskAnalysisFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAnalysis
     */
    select?: RiskAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RiskAnalysis
     */
    omit?: RiskAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which RiskAnalyses to fetch.
     */
    where?: RiskAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RiskAnalyses to fetch.
     */
    orderBy?: RiskAnalysisOrderByWithRelationInput | RiskAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RiskAnalyses.
     */
    cursor?: RiskAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RiskAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RiskAnalyses.
     */
    skip?: number
    distinct?: RiskAnalysisScalarFieldEnum | RiskAnalysisScalarFieldEnum[]
  }

  /**
   * RiskAnalysis create
   */
  export type RiskAnalysisCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAnalysis
     */
    select?: RiskAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RiskAnalysis
     */
    omit?: RiskAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAnalysisInclude<ExtArgs> | null
    /**
     * The data needed to create a RiskAnalysis.
     */
    data: XOR<RiskAnalysisCreateInput, RiskAnalysisUncheckedCreateInput>
  }

  /**
   * RiskAnalysis createMany
   */
  export type RiskAnalysisCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RiskAnalyses.
     */
    data: RiskAnalysisCreateManyInput | RiskAnalysisCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RiskAnalysis createManyAndReturn
   */
  export type RiskAnalysisCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAnalysis
     */
    select?: RiskAnalysisSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RiskAnalysis
     */
    omit?: RiskAnalysisOmit<ExtArgs> | null
    /**
     * The data used to create many RiskAnalyses.
     */
    data: RiskAnalysisCreateManyInput | RiskAnalysisCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAnalysisIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RiskAnalysis update
   */
  export type RiskAnalysisUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAnalysis
     */
    select?: RiskAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RiskAnalysis
     */
    omit?: RiskAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAnalysisInclude<ExtArgs> | null
    /**
     * The data needed to update a RiskAnalysis.
     */
    data: XOR<RiskAnalysisUpdateInput, RiskAnalysisUncheckedUpdateInput>
    /**
     * Choose, which RiskAnalysis to update.
     */
    where: RiskAnalysisWhereUniqueInput
  }

  /**
   * RiskAnalysis updateMany
   */
  export type RiskAnalysisUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RiskAnalyses.
     */
    data: XOR<RiskAnalysisUpdateManyMutationInput, RiskAnalysisUncheckedUpdateManyInput>
    /**
     * Filter which RiskAnalyses to update
     */
    where?: RiskAnalysisWhereInput
    /**
     * Limit how many RiskAnalyses to update.
     */
    limit?: number
  }

  /**
   * RiskAnalysis updateManyAndReturn
   */
  export type RiskAnalysisUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAnalysis
     */
    select?: RiskAnalysisSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RiskAnalysis
     */
    omit?: RiskAnalysisOmit<ExtArgs> | null
    /**
     * The data used to update RiskAnalyses.
     */
    data: XOR<RiskAnalysisUpdateManyMutationInput, RiskAnalysisUncheckedUpdateManyInput>
    /**
     * Filter which RiskAnalyses to update
     */
    where?: RiskAnalysisWhereInput
    /**
     * Limit how many RiskAnalyses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAnalysisIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RiskAnalysis upsert
   */
  export type RiskAnalysisUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAnalysis
     */
    select?: RiskAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RiskAnalysis
     */
    omit?: RiskAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAnalysisInclude<ExtArgs> | null
    /**
     * The filter to search for the RiskAnalysis to update in case it exists.
     */
    where: RiskAnalysisWhereUniqueInput
    /**
     * In case the RiskAnalysis found by the `where` argument doesn't exist, create a new RiskAnalysis with this data.
     */
    create: XOR<RiskAnalysisCreateInput, RiskAnalysisUncheckedCreateInput>
    /**
     * In case the RiskAnalysis was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RiskAnalysisUpdateInput, RiskAnalysisUncheckedUpdateInput>
  }

  /**
   * RiskAnalysis delete
   */
  export type RiskAnalysisDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAnalysis
     */
    select?: RiskAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RiskAnalysis
     */
    omit?: RiskAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAnalysisInclude<ExtArgs> | null
    /**
     * Filter which RiskAnalysis to delete.
     */
    where: RiskAnalysisWhereUniqueInput
  }

  /**
   * RiskAnalysis deleteMany
   */
  export type RiskAnalysisDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RiskAnalyses to delete
     */
    where?: RiskAnalysisWhereInput
    /**
     * Limit how many RiskAnalyses to delete.
     */
    limit?: number
  }

  /**
   * RiskAnalysis without action
   */
  export type RiskAnalysisDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAnalysis
     */
    select?: RiskAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RiskAnalysis
     */
    omit?: RiskAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAnalysisInclude<ExtArgs> | null
  }


  /**
   * Model AddressRiskFactor
   */

  export type AggregateAddressRiskFactor = {
    _count: AddressRiskFactorCountAggregateOutputType | null
    _min: AddressRiskFactorMinAggregateOutputType | null
    _max: AddressRiskFactorMaxAggregateOutputType | null
  }

  export type AddressRiskFactorMinAggregateOutputType = {
    id: string | null
    addressId: string | null
    factor: string | null
    severity: $Enums.RiskLevel | null
    description: string | null
    source: string | null
    createdAt: Date | null
  }

  export type AddressRiskFactorMaxAggregateOutputType = {
    id: string | null
    addressId: string | null
    factor: string | null
    severity: $Enums.RiskLevel | null
    description: string | null
    source: string | null
    createdAt: Date | null
  }

  export type AddressRiskFactorCountAggregateOutputType = {
    id: number
    addressId: number
    factor: number
    severity: number
    description: number
    source: number
    createdAt: number
    _all: number
  }


  export type AddressRiskFactorMinAggregateInputType = {
    id?: true
    addressId?: true
    factor?: true
    severity?: true
    description?: true
    source?: true
    createdAt?: true
  }

  export type AddressRiskFactorMaxAggregateInputType = {
    id?: true
    addressId?: true
    factor?: true
    severity?: true
    description?: true
    source?: true
    createdAt?: true
  }

  export type AddressRiskFactorCountAggregateInputType = {
    id?: true
    addressId?: true
    factor?: true
    severity?: true
    description?: true
    source?: true
    createdAt?: true
    _all?: true
  }

  export type AddressRiskFactorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AddressRiskFactor to aggregate.
     */
    where?: AddressRiskFactorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AddressRiskFactors to fetch.
     */
    orderBy?: AddressRiskFactorOrderByWithRelationInput | AddressRiskFactorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AddressRiskFactorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AddressRiskFactors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AddressRiskFactors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AddressRiskFactors
    **/
    _count?: true | AddressRiskFactorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AddressRiskFactorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AddressRiskFactorMaxAggregateInputType
  }

  export type GetAddressRiskFactorAggregateType<T extends AddressRiskFactorAggregateArgs> = {
        [P in keyof T & keyof AggregateAddressRiskFactor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAddressRiskFactor[P]>
      : GetScalarType<T[P], AggregateAddressRiskFactor[P]>
  }




  export type AddressRiskFactorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AddressRiskFactorWhereInput
    orderBy?: AddressRiskFactorOrderByWithAggregationInput | AddressRiskFactorOrderByWithAggregationInput[]
    by: AddressRiskFactorScalarFieldEnum[] | AddressRiskFactorScalarFieldEnum
    having?: AddressRiskFactorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AddressRiskFactorCountAggregateInputType | true
    _min?: AddressRiskFactorMinAggregateInputType
    _max?: AddressRiskFactorMaxAggregateInputType
  }

  export type AddressRiskFactorGroupByOutputType = {
    id: string
    addressId: string
    factor: string
    severity: $Enums.RiskLevel
    description: string | null
    source: string | null
    createdAt: Date
    _count: AddressRiskFactorCountAggregateOutputType | null
    _min: AddressRiskFactorMinAggregateOutputType | null
    _max: AddressRiskFactorMaxAggregateOutputType | null
  }

  type GetAddressRiskFactorGroupByPayload<T extends AddressRiskFactorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AddressRiskFactorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AddressRiskFactorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AddressRiskFactorGroupByOutputType[P]>
            : GetScalarType<T[P], AddressRiskFactorGroupByOutputType[P]>
        }
      >
    >


  export type AddressRiskFactorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    addressId?: boolean
    factor?: boolean
    severity?: boolean
    description?: boolean
    source?: boolean
    createdAt?: boolean
    address?: boolean | AddressDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["addressRiskFactor"]>

  export type AddressRiskFactorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    addressId?: boolean
    factor?: boolean
    severity?: boolean
    description?: boolean
    source?: boolean
    createdAt?: boolean
    address?: boolean | AddressDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["addressRiskFactor"]>

  export type AddressRiskFactorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    addressId?: boolean
    factor?: boolean
    severity?: boolean
    description?: boolean
    source?: boolean
    createdAt?: boolean
    address?: boolean | AddressDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["addressRiskFactor"]>

  export type AddressRiskFactorSelectScalar = {
    id?: boolean
    addressId?: boolean
    factor?: boolean
    severity?: boolean
    description?: boolean
    source?: boolean
    createdAt?: boolean
  }

  export type AddressRiskFactorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "addressId" | "factor" | "severity" | "description" | "source" | "createdAt", ExtArgs["result"]["addressRiskFactor"]>
  export type AddressRiskFactorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    address?: boolean | AddressDefaultArgs<ExtArgs>
  }
  export type AddressRiskFactorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    address?: boolean | AddressDefaultArgs<ExtArgs>
  }
  export type AddressRiskFactorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    address?: boolean | AddressDefaultArgs<ExtArgs>
  }

  export type $AddressRiskFactorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AddressRiskFactor"
    objects: {
      address: Prisma.$AddressPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      addressId: string
      factor: string
      severity: $Enums.RiskLevel
      description: string | null
      source: string | null
      createdAt: Date
    }, ExtArgs["result"]["addressRiskFactor"]>
    composites: {}
  }

  type AddressRiskFactorGetPayload<S extends boolean | null | undefined | AddressRiskFactorDefaultArgs> = $Result.GetResult<Prisma.$AddressRiskFactorPayload, S>

  type AddressRiskFactorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AddressRiskFactorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AddressRiskFactorCountAggregateInputType | true
    }

  export interface AddressRiskFactorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AddressRiskFactor'], meta: { name: 'AddressRiskFactor' } }
    /**
     * Find zero or one AddressRiskFactor that matches the filter.
     * @param {AddressRiskFactorFindUniqueArgs} args - Arguments to find a AddressRiskFactor
     * @example
     * // Get one AddressRiskFactor
     * const addressRiskFactor = await prisma.addressRiskFactor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AddressRiskFactorFindUniqueArgs>(args: SelectSubset<T, AddressRiskFactorFindUniqueArgs<ExtArgs>>): Prisma__AddressRiskFactorClient<$Result.GetResult<Prisma.$AddressRiskFactorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AddressRiskFactor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AddressRiskFactorFindUniqueOrThrowArgs} args - Arguments to find a AddressRiskFactor
     * @example
     * // Get one AddressRiskFactor
     * const addressRiskFactor = await prisma.addressRiskFactor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AddressRiskFactorFindUniqueOrThrowArgs>(args: SelectSubset<T, AddressRiskFactorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AddressRiskFactorClient<$Result.GetResult<Prisma.$AddressRiskFactorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AddressRiskFactor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressRiskFactorFindFirstArgs} args - Arguments to find a AddressRiskFactor
     * @example
     * // Get one AddressRiskFactor
     * const addressRiskFactor = await prisma.addressRiskFactor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AddressRiskFactorFindFirstArgs>(args?: SelectSubset<T, AddressRiskFactorFindFirstArgs<ExtArgs>>): Prisma__AddressRiskFactorClient<$Result.GetResult<Prisma.$AddressRiskFactorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AddressRiskFactor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressRiskFactorFindFirstOrThrowArgs} args - Arguments to find a AddressRiskFactor
     * @example
     * // Get one AddressRiskFactor
     * const addressRiskFactor = await prisma.addressRiskFactor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AddressRiskFactorFindFirstOrThrowArgs>(args?: SelectSubset<T, AddressRiskFactorFindFirstOrThrowArgs<ExtArgs>>): Prisma__AddressRiskFactorClient<$Result.GetResult<Prisma.$AddressRiskFactorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AddressRiskFactors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressRiskFactorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AddressRiskFactors
     * const addressRiskFactors = await prisma.addressRiskFactor.findMany()
     * 
     * // Get first 10 AddressRiskFactors
     * const addressRiskFactors = await prisma.addressRiskFactor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const addressRiskFactorWithIdOnly = await prisma.addressRiskFactor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AddressRiskFactorFindManyArgs>(args?: SelectSubset<T, AddressRiskFactorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressRiskFactorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AddressRiskFactor.
     * @param {AddressRiskFactorCreateArgs} args - Arguments to create a AddressRiskFactor.
     * @example
     * // Create one AddressRiskFactor
     * const AddressRiskFactor = await prisma.addressRiskFactor.create({
     *   data: {
     *     // ... data to create a AddressRiskFactor
     *   }
     * })
     * 
     */
    create<T extends AddressRiskFactorCreateArgs>(args: SelectSubset<T, AddressRiskFactorCreateArgs<ExtArgs>>): Prisma__AddressRiskFactorClient<$Result.GetResult<Prisma.$AddressRiskFactorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AddressRiskFactors.
     * @param {AddressRiskFactorCreateManyArgs} args - Arguments to create many AddressRiskFactors.
     * @example
     * // Create many AddressRiskFactors
     * const addressRiskFactor = await prisma.addressRiskFactor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AddressRiskFactorCreateManyArgs>(args?: SelectSubset<T, AddressRiskFactorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AddressRiskFactors and returns the data saved in the database.
     * @param {AddressRiskFactorCreateManyAndReturnArgs} args - Arguments to create many AddressRiskFactors.
     * @example
     * // Create many AddressRiskFactors
     * const addressRiskFactor = await prisma.addressRiskFactor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AddressRiskFactors and only return the `id`
     * const addressRiskFactorWithIdOnly = await prisma.addressRiskFactor.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AddressRiskFactorCreateManyAndReturnArgs>(args?: SelectSubset<T, AddressRiskFactorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressRiskFactorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AddressRiskFactor.
     * @param {AddressRiskFactorDeleteArgs} args - Arguments to delete one AddressRiskFactor.
     * @example
     * // Delete one AddressRiskFactor
     * const AddressRiskFactor = await prisma.addressRiskFactor.delete({
     *   where: {
     *     // ... filter to delete one AddressRiskFactor
     *   }
     * })
     * 
     */
    delete<T extends AddressRiskFactorDeleteArgs>(args: SelectSubset<T, AddressRiskFactorDeleteArgs<ExtArgs>>): Prisma__AddressRiskFactorClient<$Result.GetResult<Prisma.$AddressRiskFactorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AddressRiskFactor.
     * @param {AddressRiskFactorUpdateArgs} args - Arguments to update one AddressRiskFactor.
     * @example
     * // Update one AddressRiskFactor
     * const addressRiskFactor = await prisma.addressRiskFactor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AddressRiskFactorUpdateArgs>(args: SelectSubset<T, AddressRiskFactorUpdateArgs<ExtArgs>>): Prisma__AddressRiskFactorClient<$Result.GetResult<Prisma.$AddressRiskFactorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AddressRiskFactors.
     * @param {AddressRiskFactorDeleteManyArgs} args - Arguments to filter AddressRiskFactors to delete.
     * @example
     * // Delete a few AddressRiskFactors
     * const { count } = await prisma.addressRiskFactor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AddressRiskFactorDeleteManyArgs>(args?: SelectSubset<T, AddressRiskFactorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AddressRiskFactors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressRiskFactorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AddressRiskFactors
     * const addressRiskFactor = await prisma.addressRiskFactor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AddressRiskFactorUpdateManyArgs>(args: SelectSubset<T, AddressRiskFactorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AddressRiskFactors and returns the data updated in the database.
     * @param {AddressRiskFactorUpdateManyAndReturnArgs} args - Arguments to update many AddressRiskFactors.
     * @example
     * // Update many AddressRiskFactors
     * const addressRiskFactor = await prisma.addressRiskFactor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AddressRiskFactors and only return the `id`
     * const addressRiskFactorWithIdOnly = await prisma.addressRiskFactor.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AddressRiskFactorUpdateManyAndReturnArgs>(args: SelectSubset<T, AddressRiskFactorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressRiskFactorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AddressRiskFactor.
     * @param {AddressRiskFactorUpsertArgs} args - Arguments to update or create a AddressRiskFactor.
     * @example
     * // Update or create a AddressRiskFactor
     * const addressRiskFactor = await prisma.addressRiskFactor.upsert({
     *   create: {
     *     // ... data to create a AddressRiskFactor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AddressRiskFactor we want to update
     *   }
     * })
     */
    upsert<T extends AddressRiskFactorUpsertArgs>(args: SelectSubset<T, AddressRiskFactorUpsertArgs<ExtArgs>>): Prisma__AddressRiskFactorClient<$Result.GetResult<Prisma.$AddressRiskFactorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AddressRiskFactors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressRiskFactorCountArgs} args - Arguments to filter AddressRiskFactors to count.
     * @example
     * // Count the number of AddressRiskFactors
     * const count = await prisma.addressRiskFactor.count({
     *   where: {
     *     // ... the filter for the AddressRiskFactors we want to count
     *   }
     * })
    **/
    count<T extends AddressRiskFactorCountArgs>(
      args?: Subset<T, AddressRiskFactorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AddressRiskFactorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AddressRiskFactor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressRiskFactorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AddressRiskFactorAggregateArgs>(args: Subset<T, AddressRiskFactorAggregateArgs>): Prisma.PrismaPromise<GetAddressRiskFactorAggregateType<T>>

    /**
     * Group by AddressRiskFactor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressRiskFactorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AddressRiskFactorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AddressRiskFactorGroupByArgs['orderBy'] }
        : { orderBy?: AddressRiskFactorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AddressRiskFactorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAddressRiskFactorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AddressRiskFactor model
   */
  readonly fields: AddressRiskFactorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AddressRiskFactor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AddressRiskFactorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    address<T extends AddressDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AddressDefaultArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AddressRiskFactor model
   */
  interface AddressRiskFactorFieldRefs {
    readonly id: FieldRef<"AddressRiskFactor", 'String'>
    readonly addressId: FieldRef<"AddressRiskFactor", 'String'>
    readonly factor: FieldRef<"AddressRiskFactor", 'String'>
    readonly severity: FieldRef<"AddressRiskFactor", 'RiskLevel'>
    readonly description: FieldRef<"AddressRiskFactor", 'String'>
    readonly source: FieldRef<"AddressRiskFactor", 'String'>
    readonly createdAt: FieldRef<"AddressRiskFactor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AddressRiskFactor findUnique
   */
  export type AddressRiskFactorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddressRiskFactor
     */
    select?: AddressRiskFactorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AddressRiskFactor
     */
    omit?: AddressRiskFactorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressRiskFactorInclude<ExtArgs> | null
    /**
     * Filter, which AddressRiskFactor to fetch.
     */
    where: AddressRiskFactorWhereUniqueInput
  }

  /**
   * AddressRiskFactor findUniqueOrThrow
   */
  export type AddressRiskFactorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddressRiskFactor
     */
    select?: AddressRiskFactorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AddressRiskFactor
     */
    omit?: AddressRiskFactorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressRiskFactorInclude<ExtArgs> | null
    /**
     * Filter, which AddressRiskFactor to fetch.
     */
    where: AddressRiskFactorWhereUniqueInput
  }

  /**
   * AddressRiskFactor findFirst
   */
  export type AddressRiskFactorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddressRiskFactor
     */
    select?: AddressRiskFactorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AddressRiskFactor
     */
    omit?: AddressRiskFactorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressRiskFactorInclude<ExtArgs> | null
    /**
     * Filter, which AddressRiskFactor to fetch.
     */
    where?: AddressRiskFactorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AddressRiskFactors to fetch.
     */
    orderBy?: AddressRiskFactorOrderByWithRelationInput | AddressRiskFactorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AddressRiskFactors.
     */
    cursor?: AddressRiskFactorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AddressRiskFactors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AddressRiskFactors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AddressRiskFactors.
     */
    distinct?: AddressRiskFactorScalarFieldEnum | AddressRiskFactorScalarFieldEnum[]
  }

  /**
   * AddressRiskFactor findFirstOrThrow
   */
  export type AddressRiskFactorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddressRiskFactor
     */
    select?: AddressRiskFactorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AddressRiskFactor
     */
    omit?: AddressRiskFactorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressRiskFactorInclude<ExtArgs> | null
    /**
     * Filter, which AddressRiskFactor to fetch.
     */
    where?: AddressRiskFactorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AddressRiskFactors to fetch.
     */
    orderBy?: AddressRiskFactorOrderByWithRelationInput | AddressRiskFactorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AddressRiskFactors.
     */
    cursor?: AddressRiskFactorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AddressRiskFactors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AddressRiskFactors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AddressRiskFactors.
     */
    distinct?: AddressRiskFactorScalarFieldEnum | AddressRiskFactorScalarFieldEnum[]
  }

  /**
   * AddressRiskFactor findMany
   */
  export type AddressRiskFactorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddressRiskFactor
     */
    select?: AddressRiskFactorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AddressRiskFactor
     */
    omit?: AddressRiskFactorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressRiskFactorInclude<ExtArgs> | null
    /**
     * Filter, which AddressRiskFactors to fetch.
     */
    where?: AddressRiskFactorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AddressRiskFactors to fetch.
     */
    orderBy?: AddressRiskFactorOrderByWithRelationInput | AddressRiskFactorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AddressRiskFactors.
     */
    cursor?: AddressRiskFactorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AddressRiskFactors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AddressRiskFactors.
     */
    skip?: number
    distinct?: AddressRiskFactorScalarFieldEnum | AddressRiskFactorScalarFieldEnum[]
  }

  /**
   * AddressRiskFactor create
   */
  export type AddressRiskFactorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddressRiskFactor
     */
    select?: AddressRiskFactorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AddressRiskFactor
     */
    omit?: AddressRiskFactorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressRiskFactorInclude<ExtArgs> | null
    /**
     * The data needed to create a AddressRiskFactor.
     */
    data: XOR<AddressRiskFactorCreateInput, AddressRiskFactorUncheckedCreateInput>
  }

  /**
   * AddressRiskFactor createMany
   */
  export type AddressRiskFactorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AddressRiskFactors.
     */
    data: AddressRiskFactorCreateManyInput | AddressRiskFactorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AddressRiskFactor createManyAndReturn
   */
  export type AddressRiskFactorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddressRiskFactor
     */
    select?: AddressRiskFactorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AddressRiskFactor
     */
    omit?: AddressRiskFactorOmit<ExtArgs> | null
    /**
     * The data used to create many AddressRiskFactors.
     */
    data: AddressRiskFactorCreateManyInput | AddressRiskFactorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressRiskFactorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AddressRiskFactor update
   */
  export type AddressRiskFactorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddressRiskFactor
     */
    select?: AddressRiskFactorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AddressRiskFactor
     */
    omit?: AddressRiskFactorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressRiskFactorInclude<ExtArgs> | null
    /**
     * The data needed to update a AddressRiskFactor.
     */
    data: XOR<AddressRiskFactorUpdateInput, AddressRiskFactorUncheckedUpdateInput>
    /**
     * Choose, which AddressRiskFactor to update.
     */
    where: AddressRiskFactorWhereUniqueInput
  }

  /**
   * AddressRiskFactor updateMany
   */
  export type AddressRiskFactorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AddressRiskFactors.
     */
    data: XOR<AddressRiskFactorUpdateManyMutationInput, AddressRiskFactorUncheckedUpdateManyInput>
    /**
     * Filter which AddressRiskFactors to update
     */
    where?: AddressRiskFactorWhereInput
    /**
     * Limit how many AddressRiskFactors to update.
     */
    limit?: number
  }

  /**
   * AddressRiskFactor updateManyAndReturn
   */
  export type AddressRiskFactorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddressRiskFactor
     */
    select?: AddressRiskFactorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AddressRiskFactor
     */
    omit?: AddressRiskFactorOmit<ExtArgs> | null
    /**
     * The data used to update AddressRiskFactors.
     */
    data: XOR<AddressRiskFactorUpdateManyMutationInput, AddressRiskFactorUncheckedUpdateManyInput>
    /**
     * Filter which AddressRiskFactors to update
     */
    where?: AddressRiskFactorWhereInput
    /**
     * Limit how many AddressRiskFactors to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressRiskFactorIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AddressRiskFactor upsert
   */
  export type AddressRiskFactorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddressRiskFactor
     */
    select?: AddressRiskFactorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AddressRiskFactor
     */
    omit?: AddressRiskFactorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressRiskFactorInclude<ExtArgs> | null
    /**
     * The filter to search for the AddressRiskFactor to update in case it exists.
     */
    where: AddressRiskFactorWhereUniqueInput
    /**
     * In case the AddressRiskFactor found by the `where` argument doesn't exist, create a new AddressRiskFactor with this data.
     */
    create: XOR<AddressRiskFactorCreateInput, AddressRiskFactorUncheckedCreateInput>
    /**
     * In case the AddressRiskFactor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AddressRiskFactorUpdateInput, AddressRiskFactorUncheckedUpdateInput>
  }

  /**
   * AddressRiskFactor delete
   */
  export type AddressRiskFactorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddressRiskFactor
     */
    select?: AddressRiskFactorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AddressRiskFactor
     */
    omit?: AddressRiskFactorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressRiskFactorInclude<ExtArgs> | null
    /**
     * Filter which AddressRiskFactor to delete.
     */
    where: AddressRiskFactorWhereUniqueInput
  }

  /**
   * AddressRiskFactor deleteMany
   */
  export type AddressRiskFactorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AddressRiskFactors to delete
     */
    where?: AddressRiskFactorWhereInput
    /**
     * Limit how many AddressRiskFactors to delete.
     */
    limit?: number
  }

  /**
   * AddressRiskFactor without action
   */
  export type AddressRiskFactorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddressRiskFactor
     */
    select?: AddressRiskFactorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AddressRiskFactor
     */
    omit?: AddressRiskFactorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressRiskFactorInclude<ExtArgs> | null
  }


  /**
   * Model ApiKey
   */

  export type AggregateApiKey = {
    _count: ApiKeyCountAggregateOutputType | null
    _avg: ApiKeyAvgAggregateOutputType | null
    _sum: ApiKeySumAggregateOutputType | null
    _min: ApiKeyMinAggregateOutputType | null
    _max: ApiKeyMaxAggregateOutputType | null
  }

  export type ApiKeyAvgAggregateOutputType = {
    rateLimit: number | null
    requestCount: number | null
  }

  export type ApiKeySumAggregateOutputType = {
    rateLimit: number | null
    requestCount: number | null
  }

  export type ApiKeyMinAggregateOutputType = {
    id: string | null
    key: string | null
    name: string | null
    tier: string | null
    isActive: boolean | null
    rateLimit: number | null
    requestCount: number | null
    lastUsed: Date | null
    createdAt: Date | null
    expiresAt: Date | null
  }

  export type ApiKeyMaxAggregateOutputType = {
    id: string | null
    key: string | null
    name: string | null
    tier: string | null
    isActive: boolean | null
    rateLimit: number | null
    requestCount: number | null
    lastUsed: Date | null
    createdAt: Date | null
    expiresAt: Date | null
  }

  export type ApiKeyCountAggregateOutputType = {
    id: number
    key: number
    name: number
    tier: number
    isActive: number
    rateLimit: number
    requestCount: number
    lastUsed: number
    createdAt: number
    expiresAt: number
    _all: number
  }


  export type ApiKeyAvgAggregateInputType = {
    rateLimit?: true
    requestCount?: true
  }

  export type ApiKeySumAggregateInputType = {
    rateLimit?: true
    requestCount?: true
  }

  export type ApiKeyMinAggregateInputType = {
    id?: true
    key?: true
    name?: true
    tier?: true
    isActive?: true
    rateLimit?: true
    requestCount?: true
    lastUsed?: true
    createdAt?: true
    expiresAt?: true
  }

  export type ApiKeyMaxAggregateInputType = {
    id?: true
    key?: true
    name?: true
    tier?: true
    isActive?: true
    rateLimit?: true
    requestCount?: true
    lastUsed?: true
    createdAt?: true
    expiresAt?: true
  }

  export type ApiKeyCountAggregateInputType = {
    id?: true
    key?: true
    name?: true
    tier?: true
    isActive?: true
    rateLimit?: true
    requestCount?: true
    lastUsed?: true
    createdAt?: true
    expiresAt?: true
    _all?: true
  }

  export type ApiKeyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApiKey to aggregate.
     */
    where?: ApiKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeys to fetch.
     */
    orderBy?: ApiKeyOrderByWithRelationInput | ApiKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApiKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ApiKeys
    **/
    _count?: true | ApiKeyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ApiKeyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ApiKeySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApiKeyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApiKeyMaxAggregateInputType
  }

  export type GetApiKeyAggregateType<T extends ApiKeyAggregateArgs> = {
        [P in keyof T & keyof AggregateApiKey]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApiKey[P]>
      : GetScalarType<T[P], AggregateApiKey[P]>
  }




  export type ApiKeyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApiKeyWhereInput
    orderBy?: ApiKeyOrderByWithAggregationInput | ApiKeyOrderByWithAggregationInput[]
    by: ApiKeyScalarFieldEnum[] | ApiKeyScalarFieldEnum
    having?: ApiKeyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApiKeyCountAggregateInputType | true
    _avg?: ApiKeyAvgAggregateInputType
    _sum?: ApiKeySumAggregateInputType
    _min?: ApiKeyMinAggregateInputType
    _max?: ApiKeyMaxAggregateInputType
  }

  export type ApiKeyGroupByOutputType = {
    id: string
    key: string
    name: string
    tier: string
    isActive: boolean
    rateLimit: number
    requestCount: number
    lastUsed: Date | null
    createdAt: Date
    expiresAt: Date | null
    _count: ApiKeyCountAggregateOutputType | null
    _avg: ApiKeyAvgAggregateOutputType | null
    _sum: ApiKeySumAggregateOutputType | null
    _min: ApiKeyMinAggregateOutputType | null
    _max: ApiKeyMaxAggregateOutputType | null
  }

  type GetApiKeyGroupByPayload<T extends ApiKeyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApiKeyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApiKeyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApiKeyGroupByOutputType[P]>
            : GetScalarType<T[P], ApiKeyGroupByOutputType[P]>
        }
      >
    >


  export type ApiKeySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    name?: boolean
    tier?: boolean
    isActive?: boolean
    rateLimit?: boolean
    requestCount?: boolean
    lastUsed?: boolean
    createdAt?: boolean
    expiresAt?: boolean
  }, ExtArgs["result"]["apiKey"]>

  export type ApiKeySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    name?: boolean
    tier?: boolean
    isActive?: boolean
    rateLimit?: boolean
    requestCount?: boolean
    lastUsed?: boolean
    createdAt?: boolean
    expiresAt?: boolean
  }, ExtArgs["result"]["apiKey"]>

  export type ApiKeySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    name?: boolean
    tier?: boolean
    isActive?: boolean
    rateLimit?: boolean
    requestCount?: boolean
    lastUsed?: boolean
    createdAt?: boolean
    expiresAt?: boolean
  }, ExtArgs["result"]["apiKey"]>

  export type ApiKeySelectScalar = {
    id?: boolean
    key?: boolean
    name?: boolean
    tier?: boolean
    isActive?: boolean
    rateLimit?: boolean
    requestCount?: boolean
    lastUsed?: boolean
    createdAt?: boolean
    expiresAt?: boolean
  }

  export type ApiKeyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "key" | "name" | "tier" | "isActive" | "rateLimit" | "requestCount" | "lastUsed" | "createdAt" | "expiresAt", ExtArgs["result"]["apiKey"]>

  export type $ApiKeyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ApiKey"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      key: string
      name: string
      tier: string
      isActive: boolean
      rateLimit: number
      requestCount: number
      lastUsed: Date | null
      createdAt: Date
      expiresAt: Date | null
    }, ExtArgs["result"]["apiKey"]>
    composites: {}
  }

  type ApiKeyGetPayload<S extends boolean | null | undefined | ApiKeyDefaultArgs> = $Result.GetResult<Prisma.$ApiKeyPayload, S>

  type ApiKeyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ApiKeyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ApiKeyCountAggregateInputType | true
    }

  export interface ApiKeyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ApiKey'], meta: { name: 'ApiKey' } }
    /**
     * Find zero or one ApiKey that matches the filter.
     * @param {ApiKeyFindUniqueArgs} args - Arguments to find a ApiKey
     * @example
     * // Get one ApiKey
     * const apiKey = await prisma.apiKey.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ApiKeyFindUniqueArgs>(args: SelectSubset<T, ApiKeyFindUniqueArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ApiKey that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ApiKeyFindUniqueOrThrowArgs} args - Arguments to find a ApiKey
     * @example
     * // Get one ApiKey
     * const apiKey = await prisma.apiKey.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ApiKeyFindUniqueOrThrowArgs>(args: SelectSubset<T, ApiKeyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ApiKey that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyFindFirstArgs} args - Arguments to find a ApiKey
     * @example
     * // Get one ApiKey
     * const apiKey = await prisma.apiKey.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ApiKeyFindFirstArgs>(args?: SelectSubset<T, ApiKeyFindFirstArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ApiKey that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyFindFirstOrThrowArgs} args - Arguments to find a ApiKey
     * @example
     * // Get one ApiKey
     * const apiKey = await prisma.apiKey.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ApiKeyFindFirstOrThrowArgs>(args?: SelectSubset<T, ApiKeyFindFirstOrThrowArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ApiKeys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ApiKeys
     * const apiKeys = await prisma.apiKey.findMany()
     * 
     * // Get first 10 ApiKeys
     * const apiKeys = await prisma.apiKey.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const apiKeyWithIdOnly = await prisma.apiKey.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ApiKeyFindManyArgs>(args?: SelectSubset<T, ApiKeyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ApiKey.
     * @param {ApiKeyCreateArgs} args - Arguments to create a ApiKey.
     * @example
     * // Create one ApiKey
     * const ApiKey = await prisma.apiKey.create({
     *   data: {
     *     // ... data to create a ApiKey
     *   }
     * })
     * 
     */
    create<T extends ApiKeyCreateArgs>(args: SelectSubset<T, ApiKeyCreateArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ApiKeys.
     * @param {ApiKeyCreateManyArgs} args - Arguments to create many ApiKeys.
     * @example
     * // Create many ApiKeys
     * const apiKey = await prisma.apiKey.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ApiKeyCreateManyArgs>(args?: SelectSubset<T, ApiKeyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ApiKeys and returns the data saved in the database.
     * @param {ApiKeyCreateManyAndReturnArgs} args - Arguments to create many ApiKeys.
     * @example
     * // Create many ApiKeys
     * const apiKey = await prisma.apiKey.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ApiKeys and only return the `id`
     * const apiKeyWithIdOnly = await prisma.apiKey.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ApiKeyCreateManyAndReturnArgs>(args?: SelectSubset<T, ApiKeyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ApiKey.
     * @param {ApiKeyDeleteArgs} args - Arguments to delete one ApiKey.
     * @example
     * // Delete one ApiKey
     * const ApiKey = await prisma.apiKey.delete({
     *   where: {
     *     // ... filter to delete one ApiKey
     *   }
     * })
     * 
     */
    delete<T extends ApiKeyDeleteArgs>(args: SelectSubset<T, ApiKeyDeleteArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ApiKey.
     * @param {ApiKeyUpdateArgs} args - Arguments to update one ApiKey.
     * @example
     * // Update one ApiKey
     * const apiKey = await prisma.apiKey.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ApiKeyUpdateArgs>(args: SelectSubset<T, ApiKeyUpdateArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ApiKeys.
     * @param {ApiKeyDeleteManyArgs} args - Arguments to filter ApiKeys to delete.
     * @example
     * // Delete a few ApiKeys
     * const { count } = await prisma.apiKey.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ApiKeyDeleteManyArgs>(args?: SelectSubset<T, ApiKeyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApiKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ApiKeys
     * const apiKey = await prisma.apiKey.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ApiKeyUpdateManyArgs>(args: SelectSubset<T, ApiKeyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApiKeys and returns the data updated in the database.
     * @param {ApiKeyUpdateManyAndReturnArgs} args - Arguments to update many ApiKeys.
     * @example
     * // Update many ApiKeys
     * const apiKey = await prisma.apiKey.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ApiKeys and only return the `id`
     * const apiKeyWithIdOnly = await prisma.apiKey.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ApiKeyUpdateManyAndReturnArgs>(args: SelectSubset<T, ApiKeyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ApiKey.
     * @param {ApiKeyUpsertArgs} args - Arguments to update or create a ApiKey.
     * @example
     * // Update or create a ApiKey
     * const apiKey = await prisma.apiKey.upsert({
     *   create: {
     *     // ... data to create a ApiKey
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ApiKey we want to update
     *   }
     * })
     */
    upsert<T extends ApiKeyUpsertArgs>(args: SelectSubset<T, ApiKeyUpsertArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ApiKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyCountArgs} args - Arguments to filter ApiKeys to count.
     * @example
     * // Count the number of ApiKeys
     * const count = await prisma.apiKey.count({
     *   where: {
     *     // ... the filter for the ApiKeys we want to count
     *   }
     * })
    **/
    count<T extends ApiKeyCountArgs>(
      args?: Subset<T, ApiKeyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApiKeyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ApiKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApiKeyAggregateArgs>(args: Subset<T, ApiKeyAggregateArgs>): Prisma.PrismaPromise<GetApiKeyAggregateType<T>>

    /**
     * Group by ApiKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApiKeyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApiKeyGroupByArgs['orderBy'] }
        : { orderBy?: ApiKeyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApiKeyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApiKeyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ApiKey model
   */
  readonly fields: ApiKeyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ApiKey.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApiKeyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ApiKey model
   */
  interface ApiKeyFieldRefs {
    readonly id: FieldRef<"ApiKey", 'String'>
    readonly key: FieldRef<"ApiKey", 'String'>
    readonly name: FieldRef<"ApiKey", 'String'>
    readonly tier: FieldRef<"ApiKey", 'String'>
    readonly isActive: FieldRef<"ApiKey", 'Boolean'>
    readonly rateLimit: FieldRef<"ApiKey", 'Int'>
    readonly requestCount: FieldRef<"ApiKey", 'Int'>
    readonly lastUsed: FieldRef<"ApiKey", 'DateTime'>
    readonly createdAt: FieldRef<"ApiKey", 'DateTime'>
    readonly expiresAt: FieldRef<"ApiKey", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ApiKey findUnique
   */
  export type ApiKeyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * Filter, which ApiKey to fetch.
     */
    where: ApiKeyWhereUniqueInput
  }

  /**
   * ApiKey findUniqueOrThrow
   */
  export type ApiKeyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * Filter, which ApiKey to fetch.
     */
    where: ApiKeyWhereUniqueInput
  }

  /**
   * ApiKey findFirst
   */
  export type ApiKeyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * Filter, which ApiKey to fetch.
     */
    where?: ApiKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeys to fetch.
     */
    orderBy?: ApiKeyOrderByWithRelationInput | ApiKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApiKeys.
     */
    cursor?: ApiKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApiKeys.
     */
    distinct?: ApiKeyScalarFieldEnum | ApiKeyScalarFieldEnum[]
  }

  /**
   * ApiKey findFirstOrThrow
   */
  export type ApiKeyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * Filter, which ApiKey to fetch.
     */
    where?: ApiKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeys to fetch.
     */
    orderBy?: ApiKeyOrderByWithRelationInput | ApiKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApiKeys.
     */
    cursor?: ApiKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApiKeys.
     */
    distinct?: ApiKeyScalarFieldEnum | ApiKeyScalarFieldEnum[]
  }

  /**
   * ApiKey findMany
   */
  export type ApiKeyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * Filter, which ApiKeys to fetch.
     */
    where?: ApiKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeys to fetch.
     */
    orderBy?: ApiKeyOrderByWithRelationInput | ApiKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ApiKeys.
     */
    cursor?: ApiKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeys.
     */
    skip?: number
    distinct?: ApiKeyScalarFieldEnum | ApiKeyScalarFieldEnum[]
  }

  /**
   * ApiKey create
   */
  export type ApiKeyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * The data needed to create a ApiKey.
     */
    data: XOR<ApiKeyCreateInput, ApiKeyUncheckedCreateInput>
  }

  /**
   * ApiKey createMany
   */
  export type ApiKeyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ApiKeys.
     */
    data: ApiKeyCreateManyInput | ApiKeyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ApiKey createManyAndReturn
   */
  export type ApiKeyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * The data used to create many ApiKeys.
     */
    data: ApiKeyCreateManyInput | ApiKeyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ApiKey update
   */
  export type ApiKeyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * The data needed to update a ApiKey.
     */
    data: XOR<ApiKeyUpdateInput, ApiKeyUncheckedUpdateInput>
    /**
     * Choose, which ApiKey to update.
     */
    where: ApiKeyWhereUniqueInput
  }

  /**
   * ApiKey updateMany
   */
  export type ApiKeyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ApiKeys.
     */
    data: XOR<ApiKeyUpdateManyMutationInput, ApiKeyUncheckedUpdateManyInput>
    /**
     * Filter which ApiKeys to update
     */
    where?: ApiKeyWhereInput
    /**
     * Limit how many ApiKeys to update.
     */
    limit?: number
  }

  /**
   * ApiKey updateManyAndReturn
   */
  export type ApiKeyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * The data used to update ApiKeys.
     */
    data: XOR<ApiKeyUpdateManyMutationInput, ApiKeyUncheckedUpdateManyInput>
    /**
     * Filter which ApiKeys to update
     */
    where?: ApiKeyWhereInput
    /**
     * Limit how many ApiKeys to update.
     */
    limit?: number
  }

  /**
   * ApiKey upsert
   */
  export type ApiKeyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * The filter to search for the ApiKey to update in case it exists.
     */
    where: ApiKeyWhereUniqueInput
    /**
     * In case the ApiKey found by the `where` argument doesn't exist, create a new ApiKey with this data.
     */
    create: XOR<ApiKeyCreateInput, ApiKeyUncheckedCreateInput>
    /**
     * In case the ApiKey was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApiKeyUpdateInput, ApiKeyUncheckedUpdateInput>
  }

  /**
   * ApiKey delete
   */
  export type ApiKeyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
    /**
     * Filter which ApiKey to delete.
     */
    where: ApiKeyWhereUniqueInput
  }

  /**
   * ApiKey deleteMany
   */
  export type ApiKeyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApiKeys to delete
     */
    where?: ApiKeyWhereInput
    /**
     * Limit how many ApiKeys to delete.
     */
    limit?: number
  }

  /**
   * ApiKey without action
   */
  export type ApiKeyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApiKey
     */
    omit?: ApiKeyOmit<ExtArgs> | null
  }


  /**
   * Model RequestLog
   */

  export type AggregateRequestLog = {
    _count: RequestLogCountAggregateOutputType | null
    _avg: RequestLogAvgAggregateOutputType | null
    _sum: RequestLogSumAggregateOutputType | null
    _min: RequestLogMinAggregateOutputType | null
    _max: RequestLogMaxAggregateOutputType | null
  }

  export type RequestLogAvgAggregateOutputType = {
    statusCode: number | null
    duration: number | null
  }

  export type RequestLogSumAggregateOutputType = {
    statusCode: number | null
    duration: number | null
  }

  export type RequestLogMinAggregateOutputType = {
    id: string | null
    apiKey: string | null
    endpoint: string | null
    method: string | null
    statusCode: number | null
    duration: number | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type RequestLogMaxAggregateOutputType = {
    id: string | null
    apiKey: string | null
    endpoint: string | null
    method: string | null
    statusCode: number | null
    duration: number | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type RequestLogCountAggregateOutputType = {
    id: number
    apiKey: number
    endpoint: number
    method: number
    statusCode: number
    duration: number
    ipAddress: number
    userAgent: number
    createdAt: number
    _all: number
  }


  export type RequestLogAvgAggregateInputType = {
    statusCode?: true
    duration?: true
  }

  export type RequestLogSumAggregateInputType = {
    statusCode?: true
    duration?: true
  }

  export type RequestLogMinAggregateInputType = {
    id?: true
    apiKey?: true
    endpoint?: true
    method?: true
    statusCode?: true
    duration?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type RequestLogMaxAggregateInputType = {
    id?: true
    apiKey?: true
    endpoint?: true
    method?: true
    statusCode?: true
    duration?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type RequestLogCountAggregateInputType = {
    id?: true
    apiKey?: true
    endpoint?: true
    method?: true
    statusCode?: true
    duration?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    _all?: true
  }

  export type RequestLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RequestLog to aggregate.
     */
    where?: RequestLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestLogs to fetch.
     */
    orderBy?: RequestLogOrderByWithRelationInput | RequestLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RequestLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RequestLogs
    **/
    _count?: true | RequestLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RequestLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RequestLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RequestLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RequestLogMaxAggregateInputType
  }

  export type GetRequestLogAggregateType<T extends RequestLogAggregateArgs> = {
        [P in keyof T & keyof AggregateRequestLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRequestLog[P]>
      : GetScalarType<T[P], AggregateRequestLog[P]>
  }




  export type RequestLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestLogWhereInput
    orderBy?: RequestLogOrderByWithAggregationInput | RequestLogOrderByWithAggregationInput[]
    by: RequestLogScalarFieldEnum[] | RequestLogScalarFieldEnum
    having?: RequestLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RequestLogCountAggregateInputType | true
    _avg?: RequestLogAvgAggregateInputType
    _sum?: RequestLogSumAggregateInputType
    _min?: RequestLogMinAggregateInputType
    _max?: RequestLogMaxAggregateInputType
  }

  export type RequestLogGroupByOutputType = {
    id: string
    apiKey: string | null
    endpoint: string
    method: string
    statusCode: number
    duration: number
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date
    _count: RequestLogCountAggregateOutputType | null
    _avg: RequestLogAvgAggregateOutputType | null
    _sum: RequestLogSumAggregateOutputType | null
    _min: RequestLogMinAggregateOutputType | null
    _max: RequestLogMaxAggregateOutputType | null
  }

  type GetRequestLogGroupByPayload<T extends RequestLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RequestLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RequestLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RequestLogGroupByOutputType[P]>
            : GetScalarType<T[P], RequestLogGroupByOutputType[P]>
        }
      >
    >


  export type RequestLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    apiKey?: boolean
    endpoint?: boolean
    method?: boolean
    statusCode?: boolean
    duration?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["requestLog"]>

  export type RequestLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    apiKey?: boolean
    endpoint?: boolean
    method?: boolean
    statusCode?: boolean
    duration?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["requestLog"]>

  export type RequestLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    apiKey?: boolean
    endpoint?: boolean
    method?: boolean
    statusCode?: boolean
    duration?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["requestLog"]>

  export type RequestLogSelectScalar = {
    id?: boolean
    apiKey?: boolean
    endpoint?: boolean
    method?: boolean
    statusCode?: boolean
    duration?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
  }

  export type RequestLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "apiKey" | "endpoint" | "method" | "statusCode" | "duration" | "ipAddress" | "userAgent" | "createdAt", ExtArgs["result"]["requestLog"]>

  export type $RequestLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RequestLog"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      apiKey: string | null
      endpoint: string
      method: string
      statusCode: number
      duration: number
      ipAddress: string | null
      userAgent: string | null
      createdAt: Date
    }, ExtArgs["result"]["requestLog"]>
    composites: {}
  }

  type RequestLogGetPayload<S extends boolean | null | undefined | RequestLogDefaultArgs> = $Result.GetResult<Prisma.$RequestLogPayload, S>

  type RequestLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RequestLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RequestLogCountAggregateInputType | true
    }

  export interface RequestLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RequestLog'], meta: { name: 'RequestLog' } }
    /**
     * Find zero or one RequestLog that matches the filter.
     * @param {RequestLogFindUniqueArgs} args - Arguments to find a RequestLog
     * @example
     * // Get one RequestLog
     * const requestLog = await prisma.requestLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RequestLogFindUniqueArgs>(args: SelectSubset<T, RequestLogFindUniqueArgs<ExtArgs>>): Prisma__RequestLogClient<$Result.GetResult<Prisma.$RequestLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RequestLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RequestLogFindUniqueOrThrowArgs} args - Arguments to find a RequestLog
     * @example
     * // Get one RequestLog
     * const requestLog = await prisma.requestLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RequestLogFindUniqueOrThrowArgs>(args: SelectSubset<T, RequestLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RequestLogClient<$Result.GetResult<Prisma.$RequestLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RequestLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestLogFindFirstArgs} args - Arguments to find a RequestLog
     * @example
     * // Get one RequestLog
     * const requestLog = await prisma.requestLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RequestLogFindFirstArgs>(args?: SelectSubset<T, RequestLogFindFirstArgs<ExtArgs>>): Prisma__RequestLogClient<$Result.GetResult<Prisma.$RequestLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RequestLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestLogFindFirstOrThrowArgs} args - Arguments to find a RequestLog
     * @example
     * // Get one RequestLog
     * const requestLog = await prisma.requestLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RequestLogFindFirstOrThrowArgs>(args?: SelectSubset<T, RequestLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__RequestLogClient<$Result.GetResult<Prisma.$RequestLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RequestLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RequestLogs
     * const requestLogs = await prisma.requestLog.findMany()
     * 
     * // Get first 10 RequestLogs
     * const requestLogs = await prisma.requestLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const requestLogWithIdOnly = await prisma.requestLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RequestLogFindManyArgs>(args?: SelectSubset<T, RequestLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RequestLog.
     * @param {RequestLogCreateArgs} args - Arguments to create a RequestLog.
     * @example
     * // Create one RequestLog
     * const RequestLog = await prisma.requestLog.create({
     *   data: {
     *     // ... data to create a RequestLog
     *   }
     * })
     * 
     */
    create<T extends RequestLogCreateArgs>(args: SelectSubset<T, RequestLogCreateArgs<ExtArgs>>): Prisma__RequestLogClient<$Result.GetResult<Prisma.$RequestLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RequestLogs.
     * @param {RequestLogCreateManyArgs} args - Arguments to create many RequestLogs.
     * @example
     * // Create many RequestLogs
     * const requestLog = await prisma.requestLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RequestLogCreateManyArgs>(args?: SelectSubset<T, RequestLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RequestLogs and returns the data saved in the database.
     * @param {RequestLogCreateManyAndReturnArgs} args - Arguments to create many RequestLogs.
     * @example
     * // Create many RequestLogs
     * const requestLog = await prisma.requestLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RequestLogs and only return the `id`
     * const requestLogWithIdOnly = await prisma.requestLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RequestLogCreateManyAndReturnArgs>(args?: SelectSubset<T, RequestLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RequestLog.
     * @param {RequestLogDeleteArgs} args - Arguments to delete one RequestLog.
     * @example
     * // Delete one RequestLog
     * const RequestLog = await prisma.requestLog.delete({
     *   where: {
     *     // ... filter to delete one RequestLog
     *   }
     * })
     * 
     */
    delete<T extends RequestLogDeleteArgs>(args: SelectSubset<T, RequestLogDeleteArgs<ExtArgs>>): Prisma__RequestLogClient<$Result.GetResult<Prisma.$RequestLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RequestLog.
     * @param {RequestLogUpdateArgs} args - Arguments to update one RequestLog.
     * @example
     * // Update one RequestLog
     * const requestLog = await prisma.requestLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RequestLogUpdateArgs>(args: SelectSubset<T, RequestLogUpdateArgs<ExtArgs>>): Prisma__RequestLogClient<$Result.GetResult<Prisma.$RequestLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RequestLogs.
     * @param {RequestLogDeleteManyArgs} args - Arguments to filter RequestLogs to delete.
     * @example
     * // Delete a few RequestLogs
     * const { count } = await prisma.requestLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RequestLogDeleteManyArgs>(args?: SelectSubset<T, RequestLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RequestLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RequestLogs
     * const requestLog = await prisma.requestLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RequestLogUpdateManyArgs>(args: SelectSubset<T, RequestLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RequestLogs and returns the data updated in the database.
     * @param {RequestLogUpdateManyAndReturnArgs} args - Arguments to update many RequestLogs.
     * @example
     * // Update many RequestLogs
     * const requestLog = await prisma.requestLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RequestLogs and only return the `id`
     * const requestLogWithIdOnly = await prisma.requestLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RequestLogUpdateManyAndReturnArgs>(args: SelectSubset<T, RequestLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RequestLog.
     * @param {RequestLogUpsertArgs} args - Arguments to update or create a RequestLog.
     * @example
     * // Update or create a RequestLog
     * const requestLog = await prisma.requestLog.upsert({
     *   create: {
     *     // ... data to create a RequestLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RequestLog we want to update
     *   }
     * })
     */
    upsert<T extends RequestLogUpsertArgs>(args: SelectSubset<T, RequestLogUpsertArgs<ExtArgs>>): Prisma__RequestLogClient<$Result.GetResult<Prisma.$RequestLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RequestLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestLogCountArgs} args - Arguments to filter RequestLogs to count.
     * @example
     * // Count the number of RequestLogs
     * const count = await prisma.requestLog.count({
     *   where: {
     *     // ... the filter for the RequestLogs we want to count
     *   }
     * })
    **/
    count<T extends RequestLogCountArgs>(
      args?: Subset<T, RequestLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RequestLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RequestLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RequestLogAggregateArgs>(args: Subset<T, RequestLogAggregateArgs>): Prisma.PrismaPromise<GetRequestLogAggregateType<T>>

    /**
     * Group by RequestLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RequestLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RequestLogGroupByArgs['orderBy'] }
        : { orderBy?: RequestLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RequestLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRequestLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RequestLog model
   */
  readonly fields: RequestLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RequestLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RequestLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RequestLog model
   */
  interface RequestLogFieldRefs {
    readonly id: FieldRef<"RequestLog", 'String'>
    readonly apiKey: FieldRef<"RequestLog", 'String'>
    readonly endpoint: FieldRef<"RequestLog", 'String'>
    readonly method: FieldRef<"RequestLog", 'String'>
    readonly statusCode: FieldRef<"RequestLog", 'Int'>
    readonly duration: FieldRef<"RequestLog", 'Int'>
    readonly ipAddress: FieldRef<"RequestLog", 'String'>
    readonly userAgent: FieldRef<"RequestLog", 'String'>
    readonly createdAt: FieldRef<"RequestLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RequestLog findUnique
   */
  export type RequestLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestLog
     */
    select?: RequestLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestLog
     */
    omit?: RequestLogOmit<ExtArgs> | null
    /**
     * Filter, which RequestLog to fetch.
     */
    where: RequestLogWhereUniqueInput
  }

  /**
   * RequestLog findUniqueOrThrow
   */
  export type RequestLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestLog
     */
    select?: RequestLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestLog
     */
    omit?: RequestLogOmit<ExtArgs> | null
    /**
     * Filter, which RequestLog to fetch.
     */
    where: RequestLogWhereUniqueInput
  }

  /**
   * RequestLog findFirst
   */
  export type RequestLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestLog
     */
    select?: RequestLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestLog
     */
    omit?: RequestLogOmit<ExtArgs> | null
    /**
     * Filter, which RequestLog to fetch.
     */
    where?: RequestLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestLogs to fetch.
     */
    orderBy?: RequestLogOrderByWithRelationInput | RequestLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RequestLogs.
     */
    cursor?: RequestLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RequestLogs.
     */
    distinct?: RequestLogScalarFieldEnum | RequestLogScalarFieldEnum[]
  }

  /**
   * RequestLog findFirstOrThrow
   */
  export type RequestLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestLog
     */
    select?: RequestLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestLog
     */
    omit?: RequestLogOmit<ExtArgs> | null
    /**
     * Filter, which RequestLog to fetch.
     */
    where?: RequestLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestLogs to fetch.
     */
    orderBy?: RequestLogOrderByWithRelationInput | RequestLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RequestLogs.
     */
    cursor?: RequestLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RequestLogs.
     */
    distinct?: RequestLogScalarFieldEnum | RequestLogScalarFieldEnum[]
  }

  /**
   * RequestLog findMany
   */
  export type RequestLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestLog
     */
    select?: RequestLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestLog
     */
    omit?: RequestLogOmit<ExtArgs> | null
    /**
     * Filter, which RequestLogs to fetch.
     */
    where?: RequestLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestLogs to fetch.
     */
    orderBy?: RequestLogOrderByWithRelationInput | RequestLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RequestLogs.
     */
    cursor?: RequestLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestLogs.
     */
    skip?: number
    distinct?: RequestLogScalarFieldEnum | RequestLogScalarFieldEnum[]
  }

  /**
   * RequestLog create
   */
  export type RequestLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestLog
     */
    select?: RequestLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestLog
     */
    omit?: RequestLogOmit<ExtArgs> | null
    /**
     * The data needed to create a RequestLog.
     */
    data: XOR<RequestLogCreateInput, RequestLogUncheckedCreateInput>
  }

  /**
   * RequestLog createMany
   */
  export type RequestLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RequestLogs.
     */
    data: RequestLogCreateManyInput | RequestLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RequestLog createManyAndReturn
   */
  export type RequestLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestLog
     */
    select?: RequestLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RequestLog
     */
    omit?: RequestLogOmit<ExtArgs> | null
    /**
     * The data used to create many RequestLogs.
     */
    data: RequestLogCreateManyInput | RequestLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RequestLog update
   */
  export type RequestLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestLog
     */
    select?: RequestLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestLog
     */
    omit?: RequestLogOmit<ExtArgs> | null
    /**
     * The data needed to update a RequestLog.
     */
    data: XOR<RequestLogUpdateInput, RequestLogUncheckedUpdateInput>
    /**
     * Choose, which RequestLog to update.
     */
    where: RequestLogWhereUniqueInput
  }

  /**
   * RequestLog updateMany
   */
  export type RequestLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RequestLogs.
     */
    data: XOR<RequestLogUpdateManyMutationInput, RequestLogUncheckedUpdateManyInput>
    /**
     * Filter which RequestLogs to update
     */
    where?: RequestLogWhereInput
    /**
     * Limit how many RequestLogs to update.
     */
    limit?: number
  }

  /**
   * RequestLog updateManyAndReturn
   */
  export type RequestLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestLog
     */
    select?: RequestLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RequestLog
     */
    omit?: RequestLogOmit<ExtArgs> | null
    /**
     * The data used to update RequestLogs.
     */
    data: XOR<RequestLogUpdateManyMutationInput, RequestLogUncheckedUpdateManyInput>
    /**
     * Filter which RequestLogs to update
     */
    where?: RequestLogWhereInput
    /**
     * Limit how many RequestLogs to update.
     */
    limit?: number
  }

  /**
   * RequestLog upsert
   */
  export type RequestLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestLog
     */
    select?: RequestLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestLog
     */
    omit?: RequestLogOmit<ExtArgs> | null
    /**
     * The filter to search for the RequestLog to update in case it exists.
     */
    where: RequestLogWhereUniqueInput
    /**
     * In case the RequestLog found by the `where` argument doesn't exist, create a new RequestLog with this data.
     */
    create: XOR<RequestLogCreateInput, RequestLogUncheckedCreateInput>
    /**
     * In case the RequestLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RequestLogUpdateInput, RequestLogUncheckedUpdateInput>
  }

  /**
   * RequestLog delete
   */
  export type RequestLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestLog
     */
    select?: RequestLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestLog
     */
    omit?: RequestLogOmit<ExtArgs> | null
    /**
     * Filter which RequestLog to delete.
     */
    where: RequestLogWhereUniqueInput
  }

  /**
   * RequestLog deleteMany
   */
  export type RequestLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RequestLogs to delete
     */
    where?: RequestLogWhereInput
    /**
     * Limit how many RequestLogs to delete.
     */
    limit?: number
  }

  /**
   * RequestLog without action
   */
  export type RequestLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestLog
     */
    select?: RequestLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RequestLog
     */
    omit?: RequestLogOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TransactionScalarFieldEnum: {
    id: 'id',
    hash: 'hash',
    chain: 'chain',
    fromAddress: 'fromAddress',
    toAddress: 'toAddress',
    value: 'value',
    fee: 'fee',
    gasUsed: 'gasUsed',
    gasPrice: 'gasPrice',
    blockNumber: 'blockNumber',
    blockHash: 'blockHash',
    timestamp: 'timestamp',
    status: 'status',
    data: 'data',
    decoded: 'decoded',
    riskScore: 'riskScore',
    riskLevel: 'riskLevel',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TransactionScalarFieldEnum = (typeof TransactionScalarFieldEnum)[keyof typeof TransactionScalarFieldEnum]


  export const AddressScalarFieldEnum: {
    id: 'id',
    address: 'address',
    chain: 'chain',
    label: 'label',
    isContract: 'isContract',
    firstSeen: 'firstSeen',
    lastSeen: 'lastSeen',
    transactionCount: 'transactionCount',
    totalValueSent: 'totalValueSent',
    totalValueReceived: 'totalValueReceived',
    riskScore: 'riskScore',
    riskLevel: 'riskLevel',
    tags: 'tags',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AddressScalarFieldEnum = (typeof AddressScalarFieldEnum)[keyof typeof AddressScalarFieldEnum]


  export const RiskAnalysisScalarFieldEnum: {
    id: 'id',
    transactionId: 'transactionId',
    largeAmount: 'largeAmount',
    newAddress: 'newAddress',
    blacklisted: 'blacklisted',
    mixingService: 'mixingService',
    suspiciousPattern: 'suspiciousPattern',
    amountScore: 'amountScore',
    addressScore: 'addressScore',
    behaviorScore: 'behaviorScore',
    totalScore: 'totalScore',
    details: 'details',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RiskAnalysisScalarFieldEnum = (typeof RiskAnalysisScalarFieldEnum)[keyof typeof RiskAnalysisScalarFieldEnum]


  export const AddressRiskFactorScalarFieldEnum: {
    id: 'id',
    addressId: 'addressId',
    factor: 'factor',
    severity: 'severity',
    description: 'description',
    source: 'source',
    createdAt: 'createdAt'
  };

  export type AddressRiskFactorScalarFieldEnum = (typeof AddressRiskFactorScalarFieldEnum)[keyof typeof AddressRiskFactorScalarFieldEnum]


  export const ApiKeyScalarFieldEnum: {
    id: 'id',
    key: 'key',
    name: 'name',
    tier: 'tier',
    isActive: 'isActive',
    rateLimit: 'rateLimit',
    requestCount: 'requestCount',
    lastUsed: 'lastUsed',
    createdAt: 'createdAt',
    expiresAt: 'expiresAt'
  };

  export type ApiKeyScalarFieldEnum = (typeof ApiKeyScalarFieldEnum)[keyof typeof ApiKeyScalarFieldEnum]


  export const RequestLogScalarFieldEnum: {
    id: 'id',
    apiKey: 'apiKey',
    endpoint: 'endpoint',
    method: 'method',
    statusCode: 'statusCode',
    duration: 'duration',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    createdAt: 'createdAt'
  };

  export type RequestLogScalarFieldEnum = (typeof RequestLogScalarFieldEnum)[keyof typeof RequestLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'ChainType'
   */
  export type EnumChainTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ChainType'>
    


  /**
   * Reference to a field of type 'ChainType[]'
   */
  export type ListEnumChainTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ChainType[]'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'TransactionStatus'
   */
  export type EnumTransactionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransactionStatus'>
    


  /**
   * Reference to a field of type 'TransactionStatus[]'
   */
  export type ListEnumTransactionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransactionStatus[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'RiskLevel'
   */
  export type EnumRiskLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RiskLevel'>
    


  /**
   * Reference to a field of type 'RiskLevel[]'
   */
  export type ListEnumRiskLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RiskLevel[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type TransactionWhereInput = {
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    id?: StringFilter<"Transaction"> | string
    hash?: StringFilter<"Transaction"> | string
    chain?: EnumChainTypeFilter<"Transaction"> | $Enums.ChainType
    fromAddress?: StringFilter<"Transaction"> | string
    toAddress?: StringNullableFilter<"Transaction"> | string | null
    value?: StringFilter<"Transaction"> | string
    fee?: StringNullableFilter<"Transaction"> | string | null
    gasUsed?: StringNullableFilter<"Transaction"> | string | null
    gasPrice?: StringNullableFilter<"Transaction"> | string | null
    blockNumber?: BigIntNullableFilter<"Transaction"> | bigint | number | null
    blockHash?: StringNullableFilter<"Transaction"> | string | null
    timestamp?: DateTimeFilter<"Transaction"> | Date | string
    status?: EnumTransactionStatusFilter<"Transaction"> | $Enums.TransactionStatus
    data?: StringNullableFilter<"Transaction"> | string | null
    decoded?: JsonNullableFilter<"Transaction">
    riskScore?: IntNullableFilter<"Transaction"> | number | null
    riskLevel?: EnumRiskLevelNullableFilter<"Transaction"> | $Enums.RiskLevel | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
    fromAddressRel?: XOR<AddressNullableScalarRelationFilter, AddressWhereInput> | null
    toAddressRel?: XOR<AddressNullableScalarRelationFilter, AddressWhereInput> | null
    riskAnalysis?: XOR<RiskAnalysisNullableScalarRelationFilter, RiskAnalysisWhereInput> | null
  }

  export type TransactionOrderByWithRelationInput = {
    id?: SortOrder
    hash?: SortOrder
    chain?: SortOrder
    fromAddress?: SortOrder
    toAddress?: SortOrderInput | SortOrder
    value?: SortOrder
    fee?: SortOrderInput | SortOrder
    gasUsed?: SortOrderInput | SortOrder
    gasPrice?: SortOrderInput | SortOrder
    blockNumber?: SortOrderInput | SortOrder
    blockHash?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    status?: SortOrder
    data?: SortOrderInput | SortOrder
    decoded?: SortOrderInput | SortOrder
    riskScore?: SortOrderInput | SortOrder
    riskLevel?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fromAddressRel?: AddressOrderByWithRelationInput
    toAddressRel?: AddressOrderByWithRelationInput
    riskAnalysis?: RiskAnalysisOrderByWithRelationInput
  }

  export type TransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    hash?: string
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    chain?: EnumChainTypeFilter<"Transaction"> | $Enums.ChainType
    fromAddress?: StringFilter<"Transaction"> | string
    toAddress?: StringNullableFilter<"Transaction"> | string | null
    value?: StringFilter<"Transaction"> | string
    fee?: StringNullableFilter<"Transaction"> | string | null
    gasUsed?: StringNullableFilter<"Transaction"> | string | null
    gasPrice?: StringNullableFilter<"Transaction"> | string | null
    blockNumber?: BigIntNullableFilter<"Transaction"> | bigint | number | null
    blockHash?: StringNullableFilter<"Transaction"> | string | null
    timestamp?: DateTimeFilter<"Transaction"> | Date | string
    status?: EnumTransactionStatusFilter<"Transaction"> | $Enums.TransactionStatus
    data?: StringNullableFilter<"Transaction"> | string | null
    decoded?: JsonNullableFilter<"Transaction">
    riskScore?: IntNullableFilter<"Transaction"> | number | null
    riskLevel?: EnumRiskLevelNullableFilter<"Transaction"> | $Enums.RiskLevel | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
    fromAddressRel?: XOR<AddressNullableScalarRelationFilter, AddressWhereInput> | null
    toAddressRel?: XOR<AddressNullableScalarRelationFilter, AddressWhereInput> | null
    riskAnalysis?: XOR<RiskAnalysisNullableScalarRelationFilter, RiskAnalysisWhereInput> | null
  }, "id" | "hash">

  export type TransactionOrderByWithAggregationInput = {
    id?: SortOrder
    hash?: SortOrder
    chain?: SortOrder
    fromAddress?: SortOrder
    toAddress?: SortOrderInput | SortOrder
    value?: SortOrder
    fee?: SortOrderInput | SortOrder
    gasUsed?: SortOrderInput | SortOrder
    gasPrice?: SortOrderInput | SortOrder
    blockNumber?: SortOrderInput | SortOrder
    blockHash?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    status?: SortOrder
    data?: SortOrderInput | SortOrder
    decoded?: SortOrderInput | SortOrder
    riskScore?: SortOrderInput | SortOrder
    riskLevel?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TransactionCountOrderByAggregateInput
    _avg?: TransactionAvgOrderByAggregateInput
    _max?: TransactionMaxOrderByAggregateInput
    _min?: TransactionMinOrderByAggregateInput
    _sum?: TransactionSumOrderByAggregateInput
  }

  export type TransactionScalarWhereWithAggregatesInput = {
    AND?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    OR?: TransactionScalarWhereWithAggregatesInput[]
    NOT?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Transaction"> | string
    hash?: StringWithAggregatesFilter<"Transaction"> | string
    chain?: EnumChainTypeWithAggregatesFilter<"Transaction"> | $Enums.ChainType
    fromAddress?: StringWithAggregatesFilter<"Transaction"> | string
    toAddress?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    value?: StringWithAggregatesFilter<"Transaction"> | string
    fee?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    gasUsed?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    gasPrice?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    blockNumber?: BigIntNullableWithAggregatesFilter<"Transaction"> | bigint | number | null
    blockHash?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    timestamp?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
    status?: EnumTransactionStatusWithAggregatesFilter<"Transaction"> | $Enums.TransactionStatus
    data?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    decoded?: JsonNullableWithAggregatesFilter<"Transaction">
    riskScore?: IntNullableWithAggregatesFilter<"Transaction"> | number | null
    riskLevel?: EnumRiskLevelNullableWithAggregatesFilter<"Transaction"> | $Enums.RiskLevel | null
    createdAt?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
  }

  export type AddressWhereInput = {
    AND?: AddressWhereInput | AddressWhereInput[]
    OR?: AddressWhereInput[]
    NOT?: AddressWhereInput | AddressWhereInput[]
    id?: StringFilter<"Address"> | string
    address?: StringFilter<"Address"> | string
    chain?: EnumChainTypeFilter<"Address"> | $Enums.ChainType
    label?: StringNullableFilter<"Address"> | string | null
    isContract?: BoolFilter<"Address"> | boolean
    firstSeen?: DateTimeFilter<"Address"> | Date | string
    lastSeen?: DateTimeFilter<"Address"> | Date | string
    transactionCount?: IntFilter<"Address"> | number
    totalValueSent?: StringFilter<"Address"> | string
    totalValueReceived?: StringFilter<"Address"> | string
    riskScore?: IntFilter<"Address"> | number
    riskLevel?: EnumRiskLevelFilter<"Address"> | $Enums.RiskLevel
    tags?: StringNullableListFilter<"Address">
    createdAt?: DateTimeFilter<"Address"> | Date | string
    updatedAt?: DateTimeFilter<"Address"> | Date | string
    sentTransactions?: TransactionListRelationFilter
    receivedTransactions?: TransactionListRelationFilter
    riskFactors?: AddressRiskFactorListRelationFilter
  }

  export type AddressOrderByWithRelationInput = {
    id?: SortOrder
    address?: SortOrder
    chain?: SortOrder
    label?: SortOrderInput | SortOrder
    isContract?: SortOrder
    firstSeen?: SortOrder
    lastSeen?: SortOrder
    transactionCount?: SortOrder
    totalValueSent?: SortOrder
    totalValueReceived?: SortOrder
    riskScore?: SortOrder
    riskLevel?: SortOrder
    tags?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sentTransactions?: TransactionOrderByRelationAggregateInput
    receivedTransactions?: TransactionOrderByRelationAggregateInput
    riskFactors?: AddressRiskFactorOrderByRelationAggregateInput
  }

  export type AddressWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    address_chain?: AddressAddressChainCompoundUniqueInput
    AND?: AddressWhereInput | AddressWhereInput[]
    OR?: AddressWhereInput[]
    NOT?: AddressWhereInput | AddressWhereInput[]
    address?: StringFilter<"Address"> | string
    chain?: EnumChainTypeFilter<"Address"> | $Enums.ChainType
    label?: StringNullableFilter<"Address"> | string | null
    isContract?: BoolFilter<"Address"> | boolean
    firstSeen?: DateTimeFilter<"Address"> | Date | string
    lastSeen?: DateTimeFilter<"Address"> | Date | string
    transactionCount?: IntFilter<"Address"> | number
    totalValueSent?: StringFilter<"Address"> | string
    totalValueReceived?: StringFilter<"Address"> | string
    riskScore?: IntFilter<"Address"> | number
    riskLevel?: EnumRiskLevelFilter<"Address"> | $Enums.RiskLevel
    tags?: StringNullableListFilter<"Address">
    createdAt?: DateTimeFilter<"Address"> | Date | string
    updatedAt?: DateTimeFilter<"Address"> | Date | string
    sentTransactions?: TransactionListRelationFilter
    receivedTransactions?: TransactionListRelationFilter
    riskFactors?: AddressRiskFactorListRelationFilter
  }, "id" | "address_chain">

  export type AddressOrderByWithAggregationInput = {
    id?: SortOrder
    address?: SortOrder
    chain?: SortOrder
    label?: SortOrderInput | SortOrder
    isContract?: SortOrder
    firstSeen?: SortOrder
    lastSeen?: SortOrder
    transactionCount?: SortOrder
    totalValueSent?: SortOrder
    totalValueReceived?: SortOrder
    riskScore?: SortOrder
    riskLevel?: SortOrder
    tags?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AddressCountOrderByAggregateInput
    _avg?: AddressAvgOrderByAggregateInput
    _max?: AddressMaxOrderByAggregateInput
    _min?: AddressMinOrderByAggregateInput
    _sum?: AddressSumOrderByAggregateInput
  }

  export type AddressScalarWhereWithAggregatesInput = {
    AND?: AddressScalarWhereWithAggregatesInput | AddressScalarWhereWithAggregatesInput[]
    OR?: AddressScalarWhereWithAggregatesInput[]
    NOT?: AddressScalarWhereWithAggregatesInput | AddressScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Address"> | string
    address?: StringWithAggregatesFilter<"Address"> | string
    chain?: EnumChainTypeWithAggregatesFilter<"Address"> | $Enums.ChainType
    label?: StringNullableWithAggregatesFilter<"Address"> | string | null
    isContract?: BoolWithAggregatesFilter<"Address"> | boolean
    firstSeen?: DateTimeWithAggregatesFilter<"Address"> | Date | string
    lastSeen?: DateTimeWithAggregatesFilter<"Address"> | Date | string
    transactionCount?: IntWithAggregatesFilter<"Address"> | number
    totalValueSent?: StringWithAggregatesFilter<"Address"> | string
    totalValueReceived?: StringWithAggregatesFilter<"Address"> | string
    riskScore?: IntWithAggregatesFilter<"Address"> | number
    riskLevel?: EnumRiskLevelWithAggregatesFilter<"Address"> | $Enums.RiskLevel
    tags?: StringNullableListFilter<"Address">
    createdAt?: DateTimeWithAggregatesFilter<"Address"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Address"> | Date | string
  }

  export type RiskAnalysisWhereInput = {
    AND?: RiskAnalysisWhereInput | RiskAnalysisWhereInput[]
    OR?: RiskAnalysisWhereInput[]
    NOT?: RiskAnalysisWhereInput | RiskAnalysisWhereInput[]
    id?: StringFilter<"RiskAnalysis"> | string
    transactionId?: StringFilter<"RiskAnalysis"> | string
    largeAmount?: BoolFilter<"RiskAnalysis"> | boolean
    newAddress?: BoolFilter<"RiskAnalysis"> | boolean
    blacklisted?: BoolFilter<"RiskAnalysis"> | boolean
    mixingService?: BoolFilter<"RiskAnalysis"> | boolean
    suspiciousPattern?: BoolFilter<"RiskAnalysis"> | boolean
    amountScore?: IntFilter<"RiskAnalysis"> | number
    addressScore?: IntFilter<"RiskAnalysis"> | number
    behaviorScore?: IntFilter<"RiskAnalysis"> | number
    totalScore?: IntFilter<"RiskAnalysis"> | number
    details?: JsonNullableFilter<"RiskAnalysis">
    createdAt?: DateTimeFilter<"RiskAnalysis"> | Date | string
    updatedAt?: DateTimeFilter<"RiskAnalysis"> | Date | string
    transaction?: XOR<TransactionScalarRelationFilter, TransactionWhereInput>
  }

  export type RiskAnalysisOrderByWithRelationInput = {
    id?: SortOrder
    transactionId?: SortOrder
    largeAmount?: SortOrder
    newAddress?: SortOrder
    blacklisted?: SortOrder
    mixingService?: SortOrder
    suspiciousPattern?: SortOrder
    amountScore?: SortOrder
    addressScore?: SortOrder
    behaviorScore?: SortOrder
    totalScore?: SortOrder
    details?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    transaction?: TransactionOrderByWithRelationInput
  }

  export type RiskAnalysisWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    transactionId?: string
    AND?: RiskAnalysisWhereInput | RiskAnalysisWhereInput[]
    OR?: RiskAnalysisWhereInput[]
    NOT?: RiskAnalysisWhereInput | RiskAnalysisWhereInput[]
    largeAmount?: BoolFilter<"RiskAnalysis"> | boolean
    newAddress?: BoolFilter<"RiskAnalysis"> | boolean
    blacklisted?: BoolFilter<"RiskAnalysis"> | boolean
    mixingService?: BoolFilter<"RiskAnalysis"> | boolean
    suspiciousPattern?: BoolFilter<"RiskAnalysis"> | boolean
    amountScore?: IntFilter<"RiskAnalysis"> | number
    addressScore?: IntFilter<"RiskAnalysis"> | number
    behaviorScore?: IntFilter<"RiskAnalysis"> | number
    totalScore?: IntFilter<"RiskAnalysis"> | number
    details?: JsonNullableFilter<"RiskAnalysis">
    createdAt?: DateTimeFilter<"RiskAnalysis"> | Date | string
    updatedAt?: DateTimeFilter<"RiskAnalysis"> | Date | string
    transaction?: XOR<TransactionScalarRelationFilter, TransactionWhereInput>
  }, "id" | "transactionId">

  export type RiskAnalysisOrderByWithAggregationInput = {
    id?: SortOrder
    transactionId?: SortOrder
    largeAmount?: SortOrder
    newAddress?: SortOrder
    blacklisted?: SortOrder
    mixingService?: SortOrder
    suspiciousPattern?: SortOrder
    amountScore?: SortOrder
    addressScore?: SortOrder
    behaviorScore?: SortOrder
    totalScore?: SortOrder
    details?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RiskAnalysisCountOrderByAggregateInput
    _avg?: RiskAnalysisAvgOrderByAggregateInput
    _max?: RiskAnalysisMaxOrderByAggregateInput
    _min?: RiskAnalysisMinOrderByAggregateInput
    _sum?: RiskAnalysisSumOrderByAggregateInput
  }

  export type RiskAnalysisScalarWhereWithAggregatesInput = {
    AND?: RiskAnalysisScalarWhereWithAggregatesInput | RiskAnalysisScalarWhereWithAggregatesInput[]
    OR?: RiskAnalysisScalarWhereWithAggregatesInput[]
    NOT?: RiskAnalysisScalarWhereWithAggregatesInput | RiskAnalysisScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RiskAnalysis"> | string
    transactionId?: StringWithAggregatesFilter<"RiskAnalysis"> | string
    largeAmount?: BoolWithAggregatesFilter<"RiskAnalysis"> | boolean
    newAddress?: BoolWithAggregatesFilter<"RiskAnalysis"> | boolean
    blacklisted?: BoolWithAggregatesFilter<"RiskAnalysis"> | boolean
    mixingService?: BoolWithAggregatesFilter<"RiskAnalysis"> | boolean
    suspiciousPattern?: BoolWithAggregatesFilter<"RiskAnalysis"> | boolean
    amountScore?: IntWithAggregatesFilter<"RiskAnalysis"> | number
    addressScore?: IntWithAggregatesFilter<"RiskAnalysis"> | number
    behaviorScore?: IntWithAggregatesFilter<"RiskAnalysis"> | number
    totalScore?: IntWithAggregatesFilter<"RiskAnalysis"> | number
    details?: JsonNullableWithAggregatesFilter<"RiskAnalysis">
    createdAt?: DateTimeWithAggregatesFilter<"RiskAnalysis"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RiskAnalysis"> | Date | string
  }

  export type AddressRiskFactorWhereInput = {
    AND?: AddressRiskFactorWhereInput | AddressRiskFactorWhereInput[]
    OR?: AddressRiskFactorWhereInput[]
    NOT?: AddressRiskFactorWhereInput | AddressRiskFactorWhereInput[]
    id?: StringFilter<"AddressRiskFactor"> | string
    addressId?: StringFilter<"AddressRiskFactor"> | string
    factor?: StringFilter<"AddressRiskFactor"> | string
    severity?: EnumRiskLevelFilter<"AddressRiskFactor"> | $Enums.RiskLevel
    description?: StringNullableFilter<"AddressRiskFactor"> | string | null
    source?: StringNullableFilter<"AddressRiskFactor"> | string | null
    createdAt?: DateTimeFilter<"AddressRiskFactor"> | Date | string
    address?: XOR<AddressScalarRelationFilter, AddressWhereInput>
  }

  export type AddressRiskFactorOrderByWithRelationInput = {
    id?: SortOrder
    addressId?: SortOrder
    factor?: SortOrder
    severity?: SortOrder
    description?: SortOrderInput | SortOrder
    source?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    address?: AddressOrderByWithRelationInput
  }

  export type AddressRiskFactorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AddressRiskFactorWhereInput | AddressRiskFactorWhereInput[]
    OR?: AddressRiskFactorWhereInput[]
    NOT?: AddressRiskFactorWhereInput | AddressRiskFactorWhereInput[]
    addressId?: StringFilter<"AddressRiskFactor"> | string
    factor?: StringFilter<"AddressRiskFactor"> | string
    severity?: EnumRiskLevelFilter<"AddressRiskFactor"> | $Enums.RiskLevel
    description?: StringNullableFilter<"AddressRiskFactor"> | string | null
    source?: StringNullableFilter<"AddressRiskFactor"> | string | null
    createdAt?: DateTimeFilter<"AddressRiskFactor"> | Date | string
    address?: XOR<AddressScalarRelationFilter, AddressWhereInput>
  }, "id">

  export type AddressRiskFactorOrderByWithAggregationInput = {
    id?: SortOrder
    addressId?: SortOrder
    factor?: SortOrder
    severity?: SortOrder
    description?: SortOrderInput | SortOrder
    source?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AddressRiskFactorCountOrderByAggregateInput
    _max?: AddressRiskFactorMaxOrderByAggregateInput
    _min?: AddressRiskFactorMinOrderByAggregateInput
  }

  export type AddressRiskFactorScalarWhereWithAggregatesInput = {
    AND?: AddressRiskFactorScalarWhereWithAggregatesInput | AddressRiskFactorScalarWhereWithAggregatesInput[]
    OR?: AddressRiskFactorScalarWhereWithAggregatesInput[]
    NOT?: AddressRiskFactorScalarWhereWithAggregatesInput | AddressRiskFactorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AddressRiskFactor"> | string
    addressId?: StringWithAggregatesFilter<"AddressRiskFactor"> | string
    factor?: StringWithAggregatesFilter<"AddressRiskFactor"> | string
    severity?: EnumRiskLevelWithAggregatesFilter<"AddressRiskFactor"> | $Enums.RiskLevel
    description?: StringNullableWithAggregatesFilter<"AddressRiskFactor"> | string | null
    source?: StringNullableWithAggregatesFilter<"AddressRiskFactor"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AddressRiskFactor"> | Date | string
  }

  export type ApiKeyWhereInput = {
    AND?: ApiKeyWhereInput | ApiKeyWhereInput[]
    OR?: ApiKeyWhereInput[]
    NOT?: ApiKeyWhereInput | ApiKeyWhereInput[]
    id?: StringFilter<"ApiKey"> | string
    key?: StringFilter<"ApiKey"> | string
    name?: StringFilter<"ApiKey"> | string
    tier?: StringFilter<"ApiKey"> | string
    isActive?: BoolFilter<"ApiKey"> | boolean
    rateLimit?: IntFilter<"ApiKey"> | number
    requestCount?: IntFilter<"ApiKey"> | number
    lastUsed?: DateTimeNullableFilter<"ApiKey"> | Date | string | null
    createdAt?: DateTimeFilter<"ApiKey"> | Date | string
    expiresAt?: DateTimeNullableFilter<"ApiKey"> | Date | string | null
  }

  export type ApiKeyOrderByWithRelationInput = {
    id?: SortOrder
    key?: SortOrder
    name?: SortOrder
    tier?: SortOrder
    isActive?: SortOrder
    rateLimit?: SortOrder
    requestCount?: SortOrder
    lastUsed?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
  }

  export type ApiKeyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    key?: string
    AND?: ApiKeyWhereInput | ApiKeyWhereInput[]
    OR?: ApiKeyWhereInput[]
    NOT?: ApiKeyWhereInput | ApiKeyWhereInput[]
    name?: StringFilter<"ApiKey"> | string
    tier?: StringFilter<"ApiKey"> | string
    isActive?: BoolFilter<"ApiKey"> | boolean
    rateLimit?: IntFilter<"ApiKey"> | number
    requestCount?: IntFilter<"ApiKey"> | number
    lastUsed?: DateTimeNullableFilter<"ApiKey"> | Date | string | null
    createdAt?: DateTimeFilter<"ApiKey"> | Date | string
    expiresAt?: DateTimeNullableFilter<"ApiKey"> | Date | string | null
  }, "id" | "key">

  export type ApiKeyOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    name?: SortOrder
    tier?: SortOrder
    isActive?: SortOrder
    rateLimit?: SortOrder
    requestCount?: SortOrder
    lastUsed?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    _count?: ApiKeyCountOrderByAggregateInput
    _avg?: ApiKeyAvgOrderByAggregateInput
    _max?: ApiKeyMaxOrderByAggregateInput
    _min?: ApiKeyMinOrderByAggregateInput
    _sum?: ApiKeySumOrderByAggregateInput
  }

  export type ApiKeyScalarWhereWithAggregatesInput = {
    AND?: ApiKeyScalarWhereWithAggregatesInput | ApiKeyScalarWhereWithAggregatesInput[]
    OR?: ApiKeyScalarWhereWithAggregatesInput[]
    NOT?: ApiKeyScalarWhereWithAggregatesInput | ApiKeyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ApiKey"> | string
    key?: StringWithAggregatesFilter<"ApiKey"> | string
    name?: StringWithAggregatesFilter<"ApiKey"> | string
    tier?: StringWithAggregatesFilter<"ApiKey"> | string
    isActive?: BoolWithAggregatesFilter<"ApiKey"> | boolean
    rateLimit?: IntWithAggregatesFilter<"ApiKey"> | number
    requestCount?: IntWithAggregatesFilter<"ApiKey"> | number
    lastUsed?: DateTimeNullableWithAggregatesFilter<"ApiKey"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ApiKey"> | Date | string
    expiresAt?: DateTimeNullableWithAggregatesFilter<"ApiKey"> | Date | string | null
  }

  export type RequestLogWhereInput = {
    AND?: RequestLogWhereInput | RequestLogWhereInput[]
    OR?: RequestLogWhereInput[]
    NOT?: RequestLogWhereInput | RequestLogWhereInput[]
    id?: StringFilter<"RequestLog"> | string
    apiKey?: StringNullableFilter<"RequestLog"> | string | null
    endpoint?: StringFilter<"RequestLog"> | string
    method?: StringFilter<"RequestLog"> | string
    statusCode?: IntFilter<"RequestLog"> | number
    duration?: IntFilter<"RequestLog"> | number
    ipAddress?: StringNullableFilter<"RequestLog"> | string | null
    userAgent?: StringNullableFilter<"RequestLog"> | string | null
    createdAt?: DateTimeFilter<"RequestLog"> | Date | string
  }

  export type RequestLogOrderByWithRelationInput = {
    id?: SortOrder
    apiKey?: SortOrderInput | SortOrder
    endpoint?: SortOrder
    method?: SortOrder
    statusCode?: SortOrder
    duration?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
  }

  export type RequestLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RequestLogWhereInput | RequestLogWhereInput[]
    OR?: RequestLogWhereInput[]
    NOT?: RequestLogWhereInput | RequestLogWhereInput[]
    apiKey?: StringNullableFilter<"RequestLog"> | string | null
    endpoint?: StringFilter<"RequestLog"> | string
    method?: StringFilter<"RequestLog"> | string
    statusCode?: IntFilter<"RequestLog"> | number
    duration?: IntFilter<"RequestLog"> | number
    ipAddress?: StringNullableFilter<"RequestLog"> | string | null
    userAgent?: StringNullableFilter<"RequestLog"> | string | null
    createdAt?: DateTimeFilter<"RequestLog"> | Date | string
  }, "id">

  export type RequestLogOrderByWithAggregationInput = {
    id?: SortOrder
    apiKey?: SortOrderInput | SortOrder
    endpoint?: SortOrder
    method?: SortOrder
    statusCode?: SortOrder
    duration?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: RequestLogCountOrderByAggregateInput
    _avg?: RequestLogAvgOrderByAggregateInput
    _max?: RequestLogMaxOrderByAggregateInput
    _min?: RequestLogMinOrderByAggregateInput
    _sum?: RequestLogSumOrderByAggregateInput
  }

  export type RequestLogScalarWhereWithAggregatesInput = {
    AND?: RequestLogScalarWhereWithAggregatesInput | RequestLogScalarWhereWithAggregatesInput[]
    OR?: RequestLogScalarWhereWithAggregatesInput[]
    NOT?: RequestLogScalarWhereWithAggregatesInput | RequestLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RequestLog"> | string
    apiKey?: StringNullableWithAggregatesFilter<"RequestLog"> | string | null
    endpoint?: StringWithAggregatesFilter<"RequestLog"> | string
    method?: StringWithAggregatesFilter<"RequestLog"> | string
    statusCode?: IntWithAggregatesFilter<"RequestLog"> | number
    duration?: IntWithAggregatesFilter<"RequestLog"> | number
    ipAddress?: StringNullableWithAggregatesFilter<"RequestLog"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"RequestLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"RequestLog"> | Date | string
  }

  export type TransactionCreateInput = {
    id?: string
    hash: string
    value: string
    fee?: string | null
    gasUsed?: string | null
    gasPrice?: string | null
    blockNumber?: bigint | number | null
    blockHash?: string | null
    timestamp: Date | string
    status?: $Enums.TransactionStatus
    data?: string | null
    decoded?: NullableJsonNullValueInput | InputJsonValue
    riskScore?: number | null
    riskLevel?: $Enums.RiskLevel | null
    createdAt?: Date | string
    updatedAt?: Date | string
    fromAddressRel?: AddressCreateNestedOneWithoutSentTransactionsInput
    toAddressRel?: AddressCreateNestedOneWithoutReceivedTransactionsInput
    riskAnalysis?: RiskAnalysisCreateNestedOneWithoutTransactionInput
  }

  export type TransactionUncheckedCreateInput = {
    id?: string
    hash: string
    chain: $Enums.ChainType
    fromAddress: string
    toAddress?: string | null
    value: string
    fee?: string | null
    gasUsed?: string | null
    gasPrice?: string | null
    blockNumber?: bigint | number | null
    blockHash?: string | null
    timestamp: Date | string
    status?: $Enums.TransactionStatus
    data?: string | null
    decoded?: NullableJsonNullValueInput | InputJsonValue
    riskScore?: number | null
    riskLevel?: $Enums.RiskLevel | null
    createdAt?: Date | string
    updatedAt?: Date | string
    riskAnalysis?: RiskAnalysisUncheckedCreateNestedOneWithoutTransactionInput
  }

  export type TransactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    fee?: NullableStringFieldUpdateOperationsInput | string | null
    gasUsed?: NullableStringFieldUpdateOperationsInput | string | null
    gasPrice?: NullableStringFieldUpdateOperationsInput | string | null
    blockNumber?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    blockHash?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    data?: NullableStringFieldUpdateOperationsInput | string | null
    decoded?: NullableJsonNullValueInput | InputJsonValue
    riskScore?: NullableIntFieldUpdateOperationsInput | number | null
    riskLevel?: NullableEnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromAddressRel?: AddressUpdateOneWithoutSentTransactionsNestedInput
    toAddressRel?: AddressUpdateOneWithoutReceivedTransactionsNestedInput
    riskAnalysis?: RiskAnalysisUpdateOneWithoutTransactionNestedInput
  }

  export type TransactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    chain?: EnumChainTypeFieldUpdateOperationsInput | $Enums.ChainType
    fromAddress?: StringFieldUpdateOperationsInput | string
    toAddress?: NullableStringFieldUpdateOperationsInput | string | null
    value?: StringFieldUpdateOperationsInput | string
    fee?: NullableStringFieldUpdateOperationsInput | string | null
    gasUsed?: NullableStringFieldUpdateOperationsInput | string | null
    gasPrice?: NullableStringFieldUpdateOperationsInput | string | null
    blockNumber?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    blockHash?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    data?: NullableStringFieldUpdateOperationsInput | string | null
    decoded?: NullableJsonNullValueInput | InputJsonValue
    riskScore?: NullableIntFieldUpdateOperationsInput | number | null
    riskLevel?: NullableEnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    riskAnalysis?: RiskAnalysisUncheckedUpdateOneWithoutTransactionNestedInput
  }

  export type TransactionCreateManyInput = {
    id?: string
    hash: string
    chain: $Enums.ChainType
    fromAddress: string
    toAddress?: string | null
    value: string
    fee?: string | null
    gasUsed?: string | null
    gasPrice?: string | null
    blockNumber?: bigint | number | null
    blockHash?: string | null
    timestamp: Date | string
    status?: $Enums.TransactionStatus
    data?: string | null
    decoded?: NullableJsonNullValueInput | InputJsonValue
    riskScore?: number | null
    riskLevel?: $Enums.RiskLevel | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    fee?: NullableStringFieldUpdateOperationsInput | string | null
    gasUsed?: NullableStringFieldUpdateOperationsInput | string | null
    gasPrice?: NullableStringFieldUpdateOperationsInput | string | null
    blockNumber?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    blockHash?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    data?: NullableStringFieldUpdateOperationsInput | string | null
    decoded?: NullableJsonNullValueInput | InputJsonValue
    riskScore?: NullableIntFieldUpdateOperationsInput | number | null
    riskLevel?: NullableEnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    chain?: EnumChainTypeFieldUpdateOperationsInput | $Enums.ChainType
    fromAddress?: StringFieldUpdateOperationsInput | string
    toAddress?: NullableStringFieldUpdateOperationsInput | string | null
    value?: StringFieldUpdateOperationsInput | string
    fee?: NullableStringFieldUpdateOperationsInput | string | null
    gasUsed?: NullableStringFieldUpdateOperationsInput | string | null
    gasPrice?: NullableStringFieldUpdateOperationsInput | string | null
    blockNumber?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    blockHash?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    data?: NullableStringFieldUpdateOperationsInput | string | null
    decoded?: NullableJsonNullValueInput | InputJsonValue
    riskScore?: NullableIntFieldUpdateOperationsInput | number | null
    riskLevel?: NullableEnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressCreateInput = {
    id?: string
    address: string
    chain: $Enums.ChainType
    label?: string | null
    isContract?: boolean
    firstSeen?: Date | string
    lastSeen?: Date | string
    transactionCount?: number
    totalValueSent?: string
    totalValueReceived?: string
    riskScore?: number
    riskLevel?: $Enums.RiskLevel
    tags?: AddressCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    sentTransactions?: TransactionCreateNestedManyWithoutFromAddressRelInput
    receivedTransactions?: TransactionCreateNestedManyWithoutToAddressRelInput
    riskFactors?: AddressRiskFactorCreateNestedManyWithoutAddressInput
  }

  export type AddressUncheckedCreateInput = {
    id?: string
    address: string
    chain: $Enums.ChainType
    label?: string | null
    isContract?: boolean
    firstSeen?: Date | string
    lastSeen?: Date | string
    transactionCount?: number
    totalValueSent?: string
    totalValueReceived?: string
    riskScore?: number
    riskLevel?: $Enums.RiskLevel
    tags?: AddressCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    sentTransactions?: TransactionUncheckedCreateNestedManyWithoutFromAddressRelInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutToAddressRelInput
    riskFactors?: AddressRiskFactorUncheckedCreateNestedManyWithoutAddressInput
  }

  export type AddressUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    chain?: EnumChainTypeFieldUpdateOperationsInput | $Enums.ChainType
    label?: NullableStringFieldUpdateOperationsInput | string | null
    isContract?: BoolFieldUpdateOperationsInput | boolean
    firstSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    transactionCount?: IntFieldUpdateOperationsInput | number
    totalValueSent?: StringFieldUpdateOperationsInput | string
    totalValueReceived?: StringFieldUpdateOperationsInput | string
    riskScore?: IntFieldUpdateOperationsInput | number
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    tags?: AddressUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentTransactions?: TransactionUpdateManyWithoutFromAddressRelNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutToAddressRelNestedInput
    riskFactors?: AddressRiskFactorUpdateManyWithoutAddressNestedInput
  }

  export type AddressUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    chain?: EnumChainTypeFieldUpdateOperationsInput | $Enums.ChainType
    label?: NullableStringFieldUpdateOperationsInput | string | null
    isContract?: BoolFieldUpdateOperationsInput | boolean
    firstSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    transactionCount?: IntFieldUpdateOperationsInput | number
    totalValueSent?: StringFieldUpdateOperationsInput | string
    totalValueReceived?: StringFieldUpdateOperationsInput | string
    riskScore?: IntFieldUpdateOperationsInput | number
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    tags?: AddressUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentTransactions?: TransactionUncheckedUpdateManyWithoutFromAddressRelNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutToAddressRelNestedInput
    riskFactors?: AddressRiskFactorUncheckedUpdateManyWithoutAddressNestedInput
  }

  export type AddressCreateManyInput = {
    id?: string
    address: string
    chain: $Enums.ChainType
    label?: string | null
    isContract?: boolean
    firstSeen?: Date | string
    lastSeen?: Date | string
    transactionCount?: number
    totalValueSent?: string
    totalValueReceived?: string
    riskScore?: number
    riskLevel?: $Enums.RiskLevel
    tags?: AddressCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AddressUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    chain?: EnumChainTypeFieldUpdateOperationsInput | $Enums.ChainType
    label?: NullableStringFieldUpdateOperationsInput | string | null
    isContract?: BoolFieldUpdateOperationsInput | boolean
    firstSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    transactionCount?: IntFieldUpdateOperationsInput | number
    totalValueSent?: StringFieldUpdateOperationsInput | string
    totalValueReceived?: StringFieldUpdateOperationsInput | string
    riskScore?: IntFieldUpdateOperationsInput | number
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    tags?: AddressUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    chain?: EnumChainTypeFieldUpdateOperationsInput | $Enums.ChainType
    label?: NullableStringFieldUpdateOperationsInput | string | null
    isContract?: BoolFieldUpdateOperationsInput | boolean
    firstSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    transactionCount?: IntFieldUpdateOperationsInput | number
    totalValueSent?: StringFieldUpdateOperationsInput | string
    totalValueReceived?: StringFieldUpdateOperationsInput | string
    riskScore?: IntFieldUpdateOperationsInput | number
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    tags?: AddressUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RiskAnalysisCreateInput = {
    id?: string
    largeAmount?: boolean
    newAddress?: boolean
    blacklisted?: boolean
    mixingService?: boolean
    suspiciousPattern?: boolean
    amountScore?: number
    addressScore?: number
    behaviorScore?: number
    totalScore?: number
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    transaction: TransactionCreateNestedOneWithoutRiskAnalysisInput
  }

  export type RiskAnalysisUncheckedCreateInput = {
    id?: string
    transactionId: string
    largeAmount?: boolean
    newAddress?: boolean
    blacklisted?: boolean
    mixingService?: boolean
    suspiciousPattern?: boolean
    amountScore?: number
    addressScore?: number
    behaviorScore?: number
    totalScore?: number
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RiskAnalysisUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    largeAmount?: BoolFieldUpdateOperationsInput | boolean
    newAddress?: BoolFieldUpdateOperationsInput | boolean
    blacklisted?: BoolFieldUpdateOperationsInput | boolean
    mixingService?: BoolFieldUpdateOperationsInput | boolean
    suspiciousPattern?: BoolFieldUpdateOperationsInput | boolean
    amountScore?: IntFieldUpdateOperationsInput | number
    addressScore?: IntFieldUpdateOperationsInput | number
    behaviorScore?: IntFieldUpdateOperationsInput | number
    totalScore?: IntFieldUpdateOperationsInput | number
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transaction?: TransactionUpdateOneRequiredWithoutRiskAnalysisNestedInput
  }

  export type RiskAnalysisUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    transactionId?: StringFieldUpdateOperationsInput | string
    largeAmount?: BoolFieldUpdateOperationsInput | boolean
    newAddress?: BoolFieldUpdateOperationsInput | boolean
    blacklisted?: BoolFieldUpdateOperationsInput | boolean
    mixingService?: BoolFieldUpdateOperationsInput | boolean
    suspiciousPattern?: BoolFieldUpdateOperationsInput | boolean
    amountScore?: IntFieldUpdateOperationsInput | number
    addressScore?: IntFieldUpdateOperationsInput | number
    behaviorScore?: IntFieldUpdateOperationsInput | number
    totalScore?: IntFieldUpdateOperationsInput | number
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RiskAnalysisCreateManyInput = {
    id?: string
    transactionId: string
    largeAmount?: boolean
    newAddress?: boolean
    blacklisted?: boolean
    mixingService?: boolean
    suspiciousPattern?: boolean
    amountScore?: number
    addressScore?: number
    behaviorScore?: number
    totalScore?: number
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RiskAnalysisUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    largeAmount?: BoolFieldUpdateOperationsInput | boolean
    newAddress?: BoolFieldUpdateOperationsInput | boolean
    blacklisted?: BoolFieldUpdateOperationsInput | boolean
    mixingService?: BoolFieldUpdateOperationsInput | boolean
    suspiciousPattern?: BoolFieldUpdateOperationsInput | boolean
    amountScore?: IntFieldUpdateOperationsInput | number
    addressScore?: IntFieldUpdateOperationsInput | number
    behaviorScore?: IntFieldUpdateOperationsInput | number
    totalScore?: IntFieldUpdateOperationsInput | number
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RiskAnalysisUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    transactionId?: StringFieldUpdateOperationsInput | string
    largeAmount?: BoolFieldUpdateOperationsInput | boolean
    newAddress?: BoolFieldUpdateOperationsInput | boolean
    blacklisted?: BoolFieldUpdateOperationsInput | boolean
    mixingService?: BoolFieldUpdateOperationsInput | boolean
    suspiciousPattern?: BoolFieldUpdateOperationsInput | boolean
    amountScore?: IntFieldUpdateOperationsInput | number
    addressScore?: IntFieldUpdateOperationsInput | number
    behaviorScore?: IntFieldUpdateOperationsInput | number
    totalScore?: IntFieldUpdateOperationsInput | number
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressRiskFactorCreateInput = {
    id?: string
    factor: string
    severity: $Enums.RiskLevel
    description?: string | null
    source?: string | null
    createdAt?: Date | string
    address: AddressCreateNestedOneWithoutRiskFactorsInput
  }

  export type AddressRiskFactorUncheckedCreateInput = {
    id?: string
    addressId: string
    factor: string
    severity: $Enums.RiskLevel
    description?: string | null
    source?: string | null
    createdAt?: Date | string
  }

  export type AddressRiskFactorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    factor?: StringFieldUpdateOperationsInput | string
    severity?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    description?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateOneRequiredWithoutRiskFactorsNestedInput
  }

  export type AddressRiskFactorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    addressId?: StringFieldUpdateOperationsInput | string
    factor?: StringFieldUpdateOperationsInput | string
    severity?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    description?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressRiskFactorCreateManyInput = {
    id?: string
    addressId: string
    factor: string
    severity: $Enums.RiskLevel
    description?: string | null
    source?: string | null
    createdAt?: Date | string
  }

  export type AddressRiskFactorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    factor?: StringFieldUpdateOperationsInput | string
    severity?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    description?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressRiskFactorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    addressId?: StringFieldUpdateOperationsInput | string
    factor?: StringFieldUpdateOperationsInput | string
    severity?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    description?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApiKeyCreateInput = {
    id?: string
    key: string
    name: string
    tier?: string
    isActive?: boolean
    rateLimit?: number
    requestCount?: number
    lastUsed?: Date | string | null
    createdAt?: Date | string
    expiresAt?: Date | string | null
  }

  export type ApiKeyUncheckedCreateInput = {
    id?: string
    key: string
    name: string
    tier?: string
    isActive?: boolean
    rateLimit?: number
    requestCount?: number
    lastUsed?: Date | string | null
    createdAt?: Date | string
    expiresAt?: Date | string | null
  }

  export type ApiKeyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tier?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    rateLimit?: IntFieldUpdateOperationsInput | number
    requestCount?: IntFieldUpdateOperationsInput | number
    lastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ApiKeyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tier?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    rateLimit?: IntFieldUpdateOperationsInput | number
    requestCount?: IntFieldUpdateOperationsInput | number
    lastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ApiKeyCreateManyInput = {
    id?: string
    key: string
    name: string
    tier?: string
    isActive?: boolean
    rateLimit?: number
    requestCount?: number
    lastUsed?: Date | string | null
    createdAt?: Date | string
    expiresAt?: Date | string | null
  }

  export type ApiKeyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tier?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    rateLimit?: IntFieldUpdateOperationsInput | number
    requestCount?: IntFieldUpdateOperationsInput | number
    lastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ApiKeyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tier?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    rateLimit?: IntFieldUpdateOperationsInput | number
    requestCount?: IntFieldUpdateOperationsInput | number
    lastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RequestLogCreateInput = {
    id?: string
    apiKey?: string | null
    endpoint: string
    method: string
    statusCode: number
    duration: number
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type RequestLogUncheckedCreateInput = {
    id?: string
    apiKey?: string | null
    endpoint: string
    method: string
    statusCode: number
    duration: number
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type RequestLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    apiKey?: NullableStringFieldUpdateOperationsInput | string | null
    endpoint?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    statusCode?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    apiKey?: NullableStringFieldUpdateOperationsInput | string | null
    endpoint?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    statusCode?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestLogCreateManyInput = {
    id?: string
    apiKey?: string | null
    endpoint: string
    method: string
    statusCode: number
    duration: number
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type RequestLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    apiKey?: NullableStringFieldUpdateOperationsInput | string | null
    endpoint?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    statusCode?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    apiKey?: NullableStringFieldUpdateOperationsInput | string | null
    endpoint?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    statusCode?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumChainTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ChainType | EnumChainTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ChainType[] | ListEnumChainTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChainType[] | ListEnumChainTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumChainTypeFilter<$PrismaModel> | $Enums.ChainType
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumTransactionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionStatus | EnumTransactionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionStatusFilter<$PrismaModel> | $Enums.TransactionStatus
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EnumRiskLevelNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskLevel | EnumRiskLevelFieldRefInput<$PrismaModel> | null
    in?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRiskLevelNullableFilter<$PrismaModel> | $Enums.RiskLevel | null
  }

  export type AddressNullableScalarRelationFilter = {
    is?: AddressWhereInput | null
    isNot?: AddressWhereInput | null
  }

  export type RiskAnalysisNullableScalarRelationFilter = {
    is?: RiskAnalysisWhereInput | null
    isNot?: RiskAnalysisWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type TransactionCountOrderByAggregateInput = {
    id?: SortOrder
    hash?: SortOrder
    chain?: SortOrder
    fromAddress?: SortOrder
    toAddress?: SortOrder
    value?: SortOrder
    fee?: SortOrder
    gasUsed?: SortOrder
    gasPrice?: SortOrder
    blockNumber?: SortOrder
    blockHash?: SortOrder
    timestamp?: SortOrder
    status?: SortOrder
    data?: SortOrder
    decoded?: SortOrder
    riskScore?: SortOrder
    riskLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionAvgOrderByAggregateInput = {
    blockNumber?: SortOrder
    riskScore?: SortOrder
  }

  export type TransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    hash?: SortOrder
    chain?: SortOrder
    fromAddress?: SortOrder
    toAddress?: SortOrder
    value?: SortOrder
    fee?: SortOrder
    gasUsed?: SortOrder
    gasPrice?: SortOrder
    blockNumber?: SortOrder
    blockHash?: SortOrder
    timestamp?: SortOrder
    status?: SortOrder
    data?: SortOrder
    riskScore?: SortOrder
    riskLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionMinOrderByAggregateInput = {
    id?: SortOrder
    hash?: SortOrder
    chain?: SortOrder
    fromAddress?: SortOrder
    toAddress?: SortOrder
    value?: SortOrder
    fee?: SortOrder
    gasUsed?: SortOrder
    gasPrice?: SortOrder
    blockNumber?: SortOrder
    blockHash?: SortOrder
    timestamp?: SortOrder
    status?: SortOrder
    data?: SortOrder
    riskScore?: SortOrder
    riskLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionSumOrderByAggregateInput = {
    blockNumber?: SortOrder
    riskScore?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumChainTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ChainType | EnumChainTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ChainType[] | ListEnumChainTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChainType[] | ListEnumChainTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumChainTypeWithAggregatesFilter<$PrismaModel> | $Enums.ChainType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumChainTypeFilter<$PrismaModel>
    _max?: NestedEnumChainTypeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumTransactionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionStatus | EnumTransactionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionStatusWithAggregatesFilter<$PrismaModel> | $Enums.TransactionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransactionStatusFilter<$PrismaModel>
    _max?: NestedEnumTransactionStatusFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumRiskLevelNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskLevel | EnumRiskLevelFieldRefInput<$PrismaModel> | null
    in?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRiskLevelNullableWithAggregatesFilter<$PrismaModel> | $Enums.RiskLevel | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumRiskLevelNullableFilter<$PrismaModel>
    _max?: NestedEnumRiskLevelNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnumRiskLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskLevel | EnumRiskLevelFieldRefInput<$PrismaModel>
    in?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskLevelFilter<$PrismaModel> | $Enums.RiskLevel
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type TransactionListRelationFilter = {
    every?: TransactionWhereInput
    some?: TransactionWhereInput
    none?: TransactionWhereInput
  }

  export type AddressRiskFactorListRelationFilter = {
    every?: AddressRiskFactorWhereInput
    some?: AddressRiskFactorWhereInput
    none?: AddressRiskFactorWhereInput
  }

  export type TransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AddressRiskFactorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AddressAddressChainCompoundUniqueInput = {
    address: string
    chain: $Enums.ChainType
  }

  export type AddressCountOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    chain?: SortOrder
    label?: SortOrder
    isContract?: SortOrder
    firstSeen?: SortOrder
    lastSeen?: SortOrder
    transactionCount?: SortOrder
    totalValueSent?: SortOrder
    totalValueReceived?: SortOrder
    riskScore?: SortOrder
    riskLevel?: SortOrder
    tags?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AddressAvgOrderByAggregateInput = {
    transactionCount?: SortOrder
    riskScore?: SortOrder
  }

  export type AddressMaxOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    chain?: SortOrder
    label?: SortOrder
    isContract?: SortOrder
    firstSeen?: SortOrder
    lastSeen?: SortOrder
    transactionCount?: SortOrder
    totalValueSent?: SortOrder
    totalValueReceived?: SortOrder
    riskScore?: SortOrder
    riskLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AddressMinOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    chain?: SortOrder
    label?: SortOrder
    isContract?: SortOrder
    firstSeen?: SortOrder
    lastSeen?: SortOrder
    transactionCount?: SortOrder
    totalValueSent?: SortOrder
    totalValueReceived?: SortOrder
    riskScore?: SortOrder
    riskLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AddressSumOrderByAggregateInput = {
    transactionCount?: SortOrder
    riskScore?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumRiskLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskLevel | EnumRiskLevelFieldRefInput<$PrismaModel>
    in?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskLevelWithAggregatesFilter<$PrismaModel> | $Enums.RiskLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRiskLevelFilter<$PrismaModel>
    _max?: NestedEnumRiskLevelFilter<$PrismaModel>
  }

  export type TransactionScalarRelationFilter = {
    is?: TransactionWhereInput
    isNot?: TransactionWhereInput
  }

  export type RiskAnalysisCountOrderByAggregateInput = {
    id?: SortOrder
    transactionId?: SortOrder
    largeAmount?: SortOrder
    newAddress?: SortOrder
    blacklisted?: SortOrder
    mixingService?: SortOrder
    suspiciousPattern?: SortOrder
    amountScore?: SortOrder
    addressScore?: SortOrder
    behaviorScore?: SortOrder
    totalScore?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RiskAnalysisAvgOrderByAggregateInput = {
    amountScore?: SortOrder
    addressScore?: SortOrder
    behaviorScore?: SortOrder
    totalScore?: SortOrder
  }

  export type RiskAnalysisMaxOrderByAggregateInput = {
    id?: SortOrder
    transactionId?: SortOrder
    largeAmount?: SortOrder
    newAddress?: SortOrder
    blacklisted?: SortOrder
    mixingService?: SortOrder
    suspiciousPattern?: SortOrder
    amountScore?: SortOrder
    addressScore?: SortOrder
    behaviorScore?: SortOrder
    totalScore?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RiskAnalysisMinOrderByAggregateInput = {
    id?: SortOrder
    transactionId?: SortOrder
    largeAmount?: SortOrder
    newAddress?: SortOrder
    blacklisted?: SortOrder
    mixingService?: SortOrder
    suspiciousPattern?: SortOrder
    amountScore?: SortOrder
    addressScore?: SortOrder
    behaviorScore?: SortOrder
    totalScore?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RiskAnalysisSumOrderByAggregateInput = {
    amountScore?: SortOrder
    addressScore?: SortOrder
    behaviorScore?: SortOrder
    totalScore?: SortOrder
  }

  export type AddressScalarRelationFilter = {
    is?: AddressWhereInput
    isNot?: AddressWhereInput
  }

  export type AddressRiskFactorCountOrderByAggregateInput = {
    id?: SortOrder
    addressId?: SortOrder
    factor?: SortOrder
    severity?: SortOrder
    description?: SortOrder
    source?: SortOrder
    createdAt?: SortOrder
  }

  export type AddressRiskFactorMaxOrderByAggregateInput = {
    id?: SortOrder
    addressId?: SortOrder
    factor?: SortOrder
    severity?: SortOrder
    description?: SortOrder
    source?: SortOrder
    createdAt?: SortOrder
  }

  export type AddressRiskFactorMinOrderByAggregateInput = {
    id?: SortOrder
    addressId?: SortOrder
    factor?: SortOrder
    severity?: SortOrder
    description?: SortOrder
    source?: SortOrder
    createdAt?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ApiKeyCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    name?: SortOrder
    tier?: SortOrder
    isActive?: SortOrder
    rateLimit?: SortOrder
    requestCount?: SortOrder
    lastUsed?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type ApiKeyAvgOrderByAggregateInput = {
    rateLimit?: SortOrder
    requestCount?: SortOrder
  }

  export type ApiKeyMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    name?: SortOrder
    tier?: SortOrder
    isActive?: SortOrder
    rateLimit?: SortOrder
    requestCount?: SortOrder
    lastUsed?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type ApiKeyMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    name?: SortOrder
    tier?: SortOrder
    isActive?: SortOrder
    rateLimit?: SortOrder
    requestCount?: SortOrder
    lastUsed?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type ApiKeySumOrderByAggregateInput = {
    rateLimit?: SortOrder
    requestCount?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type RequestLogCountOrderByAggregateInput = {
    id?: SortOrder
    apiKey?: SortOrder
    endpoint?: SortOrder
    method?: SortOrder
    statusCode?: SortOrder
    duration?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type RequestLogAvgOrderByAggregateInput = {
    statusCode?: SortOrder
    duration?: SortOrder
  }

  export type RequestLogMaxOrderByAggregateInput = {
    id?: SortOrder
    apiKey?: SortOrder
    endpoint?: SortOrder
    method?: SortOrder
    statusCode?: SortOrder
    duration?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type RequestLogMinOrderByAggregateInput = {
    id?: SortOrder
    apiKey?: SortOrder
    endpoint?: SortOrder
    method?: SortOrder
    statusCode?: SortOrder
    duration?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type RequestLogSumOrderByAggregateInput = {
    statusCode?: SortOrder
    duration?: SortOrder
  }

  export type AddressCreateNestedOneWithoutSentTransactionsInput = {
    create?: XOR<AddressCreateWithoutSentTransactionsInput, AddressUncheckedCreateWithoutSentTransactionsInput>
    connectOrCreate?: AddressCreateOrConnectWithoutSentTransactionsInput
    connect?: AddressWhereUniqueInput
  }

  export type AddressCreateNestedOneWithoutReceivedTransactionsInput = {
    create?: XOR<AddressCreateWithoutReceivedTransactionsInput, AddressUncheckedCreateWithoutReceivedTransactionsInput>
    connectOrCreate?: AddressCreateOrConnectWithoutReceivedTransactionsInput
    connect?: AddressWhereUniqueInput
  }

  export type RiskAnalysisCreateNestedOneWithoutTransactionInput = {
    create?: XOR<RiskAnalysisCreateWithoutTransactionInput, RiskAnalysisUncheckedCreateWithoutTransactionInput>
    connectOrCreate?: RiskAnalysisCreateOrConnectWithoutTransactionInput
    connect?: RiskAnalysisWhereUniqueInput
  }

  export type RiskAnalysisUncheckedCreateNestedOneWithoutTransactionInput = {
    create?: XOR<RiskAnalysisCreateWithoutTransactionInput, RiskAnalysisUncheckedCreateWithoutTransactionInput>
    connectOrCreate?: RiskAnalysisCreateOrConnectWithoutTransactionInput
    connect?: RiskAnalysisWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumTransactionStatusFieldUpdateOperationsInput = {
    set?: $Enums.TransactionStatus
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableEnumRiskLevelFieldUpdateOperationsInput = {
    set?: $Enums.RiskLevel | null
  }

  export type AddressUpdateOneWithoutSentTransactionsNestedInput = {
    create?: XOR<AddressCreateWithoutSentTransactionsInput, AddressUncheckedCreateWithoutSentTransactionsInput>
    connectOrCreate?: AddressCreateOrConnectWithoutSentTransactionsInput
    upsert?: AddressUpsertWithoutSentTransactionsInput
    disconnect?: AddressWhereInput | boolean
    delete?: AddressWhereInput | boolean
    connect?: AddressWhereUniqueInput
    update?: XOR<XOR<AddressUpdateToOneWithWhereWithoutSentTransactionsInput, AddressUpdateWithoutSentTransactionsInput>, AddressUncheckedUpdateWithoutSentTransactionsInput>
  }

  export type AddressUpdateOneWithoutReceivedTransactionsNestedInput = {
    create?: XOR<AddressCreateWithoutReceivedTransactionsInput, AddressUncheckedCreateWithoutReceivedTransactionsInput>
    connectOrCreate?: AddressCreateOrConnectWithoutReceivedTransactionsInput
    upsert?: AddressUpsertWithoutReceivedTransactionsInput
    disconnect?: AddressWhereInput | boolean
    delete?: AddressWhereInput | boolean
    connect?: AddressWhereUniqueInput
    update?: XOR<XOR<AddressUpdateToOneWithWhereWithoutReceivedTransactionsInput, AddressUpdateWithoutReceivedTransactionsInput>, AddressUncheckedUpdateWithoutReceivedTransactionsInput>
  }

  export type RiskAnalysisUpdateOneWithoutTransactionNestedInput = {
    create?: XOR<RiskAnalysisCreateWithoutTransactionInput, RiskAnalysisUncheckedCreateWithoutTransactionInput>
    connectOrCreate?: RiskAnalysisCreateOrConnectWithoutTransactionInput
    upsert?: RiskAnalysisUpsertWithoutTransactionInput
    disconnect?: RiskAnalysisWhereInput | boolean
    delete?: RiskAnalysisWhereInput | boolean
    connect?: RiskAnalysisWhereUniqueInput
    update?: XOR<XOR<RiskAnalysisUpdateToOneWithWhereWithoutTransactionInput, RiskAnalysisUpdateWithoutTransactionInput>, RiskAnalysisUncheckedUpdateWithoutTransactionInput>
  }

  export type EnumChainTypeFieldUpdateOperationsInput = {
    set?: $Enums.ChainType
  }

  export type RiskAnalysisUncheckedUpdateOneWithoutTransactionNestedInput = {
    create?: XOR<RiskAnalysisCreateWithoutTransactionInput, RiskAnalysisUncheckedCreateWithoutTransactionInput>
    connectOrCreate?: RiskAnalysisCreateOrConnectWithoutTransactionInput
    upsert?: RiskAnalysisUpsertWithoutTransactionInput
    disconnect?: RiskAnalysisWhereInput | boolean
    delete?: RiskAnalysisWhereInput | boolean
    connect?: RiskAnalysisWhereUniqueInput
    update?: XOR<XOR<RiskAnalysisUpdateToOneWithWhereWithoutTransactionInput, RiskAnalysisUpdateWithoutTransactionInput>, RiskAnalysisUncheckedUpdateWithoutTransactionInput>
  }

  export type AddressCreatetagsInput = {
    set: string[]
  }

  export type TransactionCreateNestedManyWithoutFromAddressRelInput = {
    create?: XOR<TransactionCreateWithoutFromAddressRelInput, TransactionUncheckedCreateWithoutFromAddressRelInput> | TransactionCreateWithoutFromAddressRelInput[] | TransactionUncheckedCreateWithoutFromAddressRelInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutFromAddressRelInput | TransactionCreateOrConnectWithoutFromAddressRelInput[]
    createMany?: TransactionCreateManyFromAddressRelInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type TransactionCreateNestedManyWithoutToAddressRelInput = {
    create?: XOR<TransactionCreateWithoutToAddressRelInput, TransactionUncheckedCreateWithoutToAddressRelInput> | TransactionCreateWithoutToAddressRelInput[] | TransactionUncheckedCreateWithoutToAddressRelInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutToAddressRelInput | TransactionCreateOrConnectWithoutToAddressRelInput[]
    createMany?: TransactionCreateManyToAddressRelInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type AddressRiskFactorCreateNestedManyWithoutAddressInput = {
    create?: XOR<AddressRiskFactorCreateWithoutAddressInput, AddressRiskFactorUncheckedCreateWithoutAddressInput> | AddressRiskFactorCreateWithoutAddressInput[] | AddressRiskFactorUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: AddressRiskFactorCreateOrConnectWithoutAddressInput | AddressRiskFactorCreateOrConnectWithoutAddressInput[]
    createMany?: AddressRiskFactorCreateManyAddressInputEnvelope
    connect?: AddressRiskFactorWhereUniqueInput | AddressRiskFactorWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutFromAddressRelInput = {
    create?: XOR<TransactionCreateWithoutFromAddressRelInput, TransactionUncheckedCreateWithoutFromAddressRelInput> | TransactionCreateWithoutFromAddressRelInput[] | TransactionUncheckedCreateWithoutFromAddressRelInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutFromAddressRelInput | TransactionCreateOrConnectWithoutFromAddressRelInput[]
    createMany?: TransactionCreateManyFromAddressRelInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutToAddressRelInput = {
    create?: XOR<TransactionCreateWithoutToAddressRelInput, TransactionUncheckedCreateWithoutToAddressRelInput> | TransactionCreateWithoutToAddressRelInput[] | TransactionUncheckedCreateWithoutToAddressRelInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutToAddressRelInput | TransactionCreateOrConnectWithoutToAddressRelInput[]
    createMany?: TransactionCreateManyToAddressRelInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type AddressRiskFactorUncheckedCreateNestedManyWithoutAddressInput = {
    create?: XOR<AddressRiskFactorCreateWithoutAddressInput, AddressRiskFactorUncheckedCreateWithoutAddressInput> | AddressRiskFactorCreateWithoutAddressInput[] | AddressRiskFactorUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: AddressRiskFactorCreateOrConnectWithoutAddressInput | AddressRiskFactorCreateOrConnectWithoutAddressInput[]
    createMany?: AddressRiskFactorCreateManyAddressInputEnvelope
    connect?: AddressRiskFactorWhereUniqueInput | AddressRiskFactorWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumRiskLevelFieldUpdateOperationsInput = {
    set?: $Enums.RiskLevel
  }

  export type AddressUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type TransactionUpdateManyWithoutFromAddressRelNestedInput = {
    create?: XOR<TransactionCreateWithoutFromAddressRelInput, TransactionUncheckedCreateWithoutFromAddressRelInput> | TransactionCreateWithoutFromAddressRelInput[] | TransactionUncheckedCreateWithoutFromAddressRelInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutFromAddressRelInput | TransactionCreateOrConnectWithoutFromAddressRelInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutFromAddressRelInput | TransactionUpsertWithWhereUniqueWithoutFromAddressRelInput[]
    createMany?: TransactionCreateManyFromAddressRelInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutFromAddressRelInput | TransactionUpdateWithWhereUniqueWithoutFromAddressRelInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutFromAddressRelInput | TransactionUpdateManyWithWhereWithoutFromAddressRelInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type TransactionUpdateManyWithoutToAddressRelNestedInput = {
    create?: XOR<TransactionCreateWithoutToAddressRelInput, TransactionUncheckedCreateWithoutToAddressRelInput> | TransactionCreateWithoutToAddressRelInput[] | TransactionUncheckedCreateWithoutToAddressRelInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutToAddressRelInput | TransactionCreateOrConnectWithoutToAddressRelInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutToAddressRelInput | TransactionUpsertWithWhereUniqueWithoutToAddressRelInput[]
    createMany?: TransactionCreateManyToAddressRelInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutToAddressRelInput | TransactionUpdateWithWhereUniqueWithoutToAddressRelInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutToAddressRelInput | TransactionUpdateManyWithWhereWithoutToAddressRelInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type AddressRiskFactorUpdateManyWithoutAddressNestedInput = {
    create?: XOR<AddressRiskFactorCreateWithoutAddressInput, AddressRiskFactorUncheckedCreateWithoutAddressInput> | AddressRiskFactorCreateWithoutAddressInput[] | AddressRiskFactorUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: AddressRiskFactorCreateOrConnectWithoutAddressInput | AddressRiskFactorCreateOrConnectWithoutAddressInput[]
    upsert?: AddressRiskFactorUpsertWithWhereUniqueWithoutAddressInput | AddressRiskFactorUpsertWithWhereUniqueWithoutAddressInput[]
    createMany?: AddressRiskFactorCreateManyAddressInputEnvelope
    set?: AddressRiskFactorWhereUniqueInput | AddressRiskFactorWhereUniqueInput[]
    disconnect?: AddressRiskFactorWhereUniqueInput | AddressRiskFactorWhereUniqueInput[]
    delete?: AddressRiskFactorWhereUniqueInput | AddressRiskFactorWhereUniqueInput[]
    connect?: AddressRiskFactorWhereUniqueInput | AddressRiskFactorWhereUniqueInput[]
    update?: AddressRiskFactorUpdateWithWhereUniqueWithoutAddressInput | AddressRiskFactorUpdateWithWhereUniqueWithoutAddressInput[]
    updateMany?: AddressRiskFactorUpdateManyWithWhereWithoutAddressInput | AddressRiskFactorUpdateManyWithWhereWithoutAddressInput[]
    deleteMany?: AddressRiskFactorScalarWhereInput | AddressRiskFactorScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutFromAddressRelNestedInput = {
    create?: XOR<TransactionCreateWithoutFromAddressRelInput, TransactionUncheckedCreateWithoutFromAddressRelInput> | TransactionCreateWithoutFromAddressRelInput[] | TransactionUncheckedCreateWithoutFromAddressRelInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutFromAddressRelInput | TransactionCreateOrConnectWithoutFromAddressRelInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutFromAddressRelInput | TransactionUpsertWithWhereUniqueWithoutFromAddressRelInput[]
    createMany?: TransactionCreateManyFromAddressRelInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutFromAddressRelInput | TransactionUpdateWithWhereUniqueWithoutFromAddressRelInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutFromAddressRelInput | TransactionUpdateManyWithWhereWithoutFromAddressRelInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutToAddressRelNestedInput = {
    create?: XOR<TransactionCreateWithoutToAddressRelInput, TransactionUncheckedCreateWithoutToAddressRelInput> | TransactionCreateWithoutToAddressRelInput[] | TransactionUncheckedCreateWithoutToAddressRelInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutToAddressRelInput | TransactionCreateOrConnectWithoutToAddressRelInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutToAddressRelInput | TransactionUpsertWithWhereUniqueWithoutToAddressRelInput[]
    createMany?: TransactionCreateManyToAddressRelInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutToAddressRelInput | TransactionUpdateWithWhereUniqueWithoutToAddressRelInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutToAddressRelInput | TransactionUpdateManyWithWhereWithoutToAddressRelInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type AddressRiskFactorUncheckedUpdateManyWithoutAddressNestedInput = {
    create?: XOR<AddressRiskFactorCreateWithoutAddressInput, AddressRiskFactorUncheckedCreateWithoutAddressInput> | AddressRiskFactorCreateWithoutAddressInput[] | AddressRiskFactorUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: AddressRiskFactorCreateOrConnectWithoutAddressInput | AddressRiskFactorCreateOrConnectWithoutAddressInput[]
    upsert?: AddressRiskFactorUpsertWithWhereUniqueWithoutAddressInput | AddressRiskFactorUpsertWithWhereUniqueWithoutAddressInput[]
    createMany?: AddressRiskFactorCreateManyAddressInputEnvelope
    set?: AddressRiskFactorWhereUniqueInput | AddressRiskFactorWhereUniqueInput[]
    disconnect?: AddressRiskFactorWhereUniqueInput | AddressRiskFactorWhereUniqueInput[]
    delete?: AddressRiskFactorWhereUniqueInput | AddressRiskFactorWhereUniqueInput[]
    connect?: AddressRiskFactorWhereUniqueInput | AddressRiskFactorWhereUniqueInput[]
    update?: AddressRiskFactorUpdateWithWhereUniqueWithoutAddressInput | AddressRiskFactorUpdateWithWhereUniqueWithoutAddressInput[]
    updateMany?: AddressRiskFactorUpdateManyWithWhereWithoutAddressInput | AddressRiskFactorUpdateManyWithWhereWithoutAddressInput[]
    deleteMany?: AddressRiskFactorScalarWhereInput | AddressRiskFactorScalarWhereInput[]
  }

  export type TransactionCreateNestedOneWithoutRiskAnalysisInput = {
    create?: XOR<TransactionCreateWithoutRiskAnalysisInput, TransactionUncheckedCreateWithoutRiskAnalysisInput>
    connectOrCreate?: TransactionCreateOrConnectWithoutRiskAnalysisInput
    connect?: TransactionWhereUniqueInput
  }

  export type TransactionUpdateOneRequiredWithoutRiskAnalysisNestedInput = {
    create?: XOR<TransactionCreateWithoutRiskAnalysisInput, TransactionUncheckedCreateWithoutRiskAnalysisInput>
    connectOrCreate?: TransactionCreateOrConnectWithoutRiskAnalysisInput
    upsert?: TransactionUpsertWithoutRiskAnalysisInput
    connect?: TransactionWhereUniqueInput
    update?: XOR<XOR<TransactionUpdateToOneWithWhereWithoutRiskAnalysisInput, TransactionUpdateWithoutRiskAnalysisInput>, TransactionUncheckedUpdateWithoutRiskAnalysisInput>
  }

  export type AddressCreateNestedOneWithoutRiskFactorsInput = {
    create?: XOR<AddressCreateWithoutRiskFactorsInput, AddressUncheckedCreateWithoutRiskFactorsInput>
    connectOrCreate?: AddressCreateOrConnectWithoutRiskFactorsInput
    connect?: AddressWhereUniqueInput
  }

  export type AddressUpdateOneRequiredWithoutRiskFactorsNestedInput = {
    create?: XOR<AddressCreateWithoutRiskFactorsInput, AddressUncheckedCreateWithoutRiskFactorsInput>
    connectOrCreate?: AddressCreateOrConnectWithoutRiskFactorsInput
    upsert?: AddressUpsertWithoutRiskFactorsInput
    connect?: AddressWhereUniqueInput
    update?: XOR<XOR<AddressUpdateToOneWithWhereWithoutRiskFactorsInput, AddressUpdateWithoutRiskFactorsInput>, AddressUncheckedUpdateWithoutRiskFactorsInput>
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumChainTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ChainType | EnumChainTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ChainType[] | ListEnumChainTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChainType[] | ListEnumChainTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumChainTypeFilter<$PrismaModel> | $Enums.ChainType
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumTransactionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionStatus | EnumTransactionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionStatusFilter<$PrismaModel> | $Enums.TransactionStatus
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumRiskLevelNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskLevel | EnumRiskLevelFieldRefInput<$PrismaModel> | null
    in?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRiskLevelNullableFilter<$PrismaModel> | $Enums.RiskLevel | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumChainTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ChainType | EnumChainTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ChainType[] | ListEnumChainTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChainType[] | ListEnumChainTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumChainTypeWithAggregatesFilter<$PrismaModel> | $Enums.ChainType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumChainTypeFilter<$PrismaModel>
    _max?: NestedEnumChainTypeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumTransactionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionStatus | EnumTransactionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionStatusWithAggregatesFilter<$PrismaModel> | $Enums.TransactionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransactionStatusFilter<$PrismaModel>
    _max?: NestedEnumTransactionStatusFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedEnumRiskLevelNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskLevel | EnumRiskLevelFieldRefInput<$PrismaModel> | null
    in?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel> | null
    not?: NestedEnumRiskLevelNullableWithAggregatesFilter<$PrismaModel> | $Enums.RiskLevel | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumRiskLevelNullableFilter<$PrismaModel>
    _max?: NestedEnumRiskLevelNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumRiskLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskLevel | EnumRiskLevelFieldRefInput<$PrismaModel>
    in?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskLevelFilter<$PrismaModel> | $Enums.RiskLevel
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumRiskLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskLevel | EnumRiskLevelFieldRefInput<$PrismaModel>
    in?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskLevelWithAggregatesFilter<$PrismaModel> | $Enums.RiskLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRiskLevelFilter<$PrismaModel>
    _max?: NestedEnumRiskLevelFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type AddressCreateWithoutSentTransactionsInput = {
    id?: string
    address: string
    chain: $Enums.ChainType
    label?: string | null
    isContract?: boolean
    firstSeen?: Date | string
    lastSeen?: Date | string
    transactionCount?: number
    totalValueSent?: string
    totalValueReceived?: string
    riskScore?: number
    riskLevel?: $Enums.RiskLevel
    tags?: AddressCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    receivedTransactions?: TransactionCreateNestedManyWithoutToAddressRelInput
    riskFactors?: AddressRiskFactorCreateNestedManyWithoutAddressInput
  }

  export type AddressUncheckedCreateWithoutSentTransactionsInput = {
    id?: string
    address: string
    chain: $Enums.ChainType
    label?: string | null
    isContract?: boolean
    firstSeen?: Date | string
    lastSeen?: Date | string
    transactionCount?: number
    totalValueSent?: string
    totalValueReceived?: string
    riskScore?: number
    riskLevel?: $Enums.RiskLevel
    tags?: AddressCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutToAddressRelInput
    riskFactors?: AddressRiskFactorUncheckedCreateNestedManyWithoutAddressInput
  }

  export type AddressCreateOrConnectWithoutSentTransactionsInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutSentTransactionsInput, AddressUncheckedCreateWithoutSentTransactionsInput>
  }

  export type AddressCreateWithoutReceivedTransactionsInput = {
    id?: string
    address: string
    chain: $Enums.ChainType
    label?: string | null
    isContract?: boolean
    firstSeen?: Date | string
    lastSeen?: Date | string
    transactionCount?: number
    totalValueSent?: string
    totalValueReceived?: string
    riskScore?: number
    riskLevel?: $Enums.RiskLevel
    tags?: AddressCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    sentTransactions?: TransactionCreateNestedManyWithoutFromAddressRelInput
    riskFactors?: AddressRiskFactorCreateNestedManyWithoutAddressInput
  }

  export type AddressUncheckedCreateWithoutReceivedTransactionsInput = {
    id?: string
    address: string
    chain: $Enums.ChainType
    label?: string | null
    isContract?: boolean
    firstSeen?: Date | string
    lastSeen?: Date | string
    transactionCount?: number
    totalValueSent?: string
    totalValueReceived?: string
    riskScore?: number
    riskLevel?: $Enums.RiskLevel
    tags?: AddressCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    sentTransactions?: TransactionUncheckedCreateNestedManyWithoutFromAddressRelInput
    riskFactors?: AddressRiskFactorUncheckedCreateNestedManyWithoutAddressInput
  }

  export type AddressCreateOrConnectWithoutReceivedTransactionsInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutReceivedTransactionsInput, AddressUncheckedCreateWithoutReceivedTransactionsInput>
  }

  export type RiskAnalysisCreateWithoutTransactionInput = {
    id?: string
    largeAmount?: boolean
    newAddress?: boolean
    blacklisted?: boolean
    mixingService?: boolean
    suspiciousPattern?: boolean
    amountScore?: number
    addressScore?: number
    behaviorScore?: number
    totalScore?: number
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RiskAnalysisUncheckedCreateWithoutTransactionInput = {
    id?: string
    largeAmount?: boolean
    newAddress?: boolean
    blacklisted?: boolean
    mixingService?: boolean
    suspiciousPattern?: boolean
    amountScore?: number
    addressScore?: number
    behaviorScore?: number
    totalScore?: number
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RiskAnalysisCreateOrConnectWithoutTransactionInput = {
    where: RiskAnalysisWhereUniqueInput
    create: XOR<RiskAnalysisCreateWithoutTransactionInput, RiskAnalysisUncheckedCreateWithoutTransactionInput>
  }

  export type AddressUpsertWithoutSentTransactionsInput = {
    update: XOR<AddressUpdateWithoutSentTransactionsInput, AddressUncheckedUpdateWithoutSentTransactionsInput>
    create: XOR<AddressCreateWithoutSentTransactionsInput, AddressUncheckedCreateWithoutSentTransactionsInput>
    where?: AddressWhereInput
  }

  export type AddressUpdateToOneWithWhereWithoutSentTransactionsInput = {
    where?: AddressWhereInput
    data: XOR<AddressUpdateWithoutSentTransactionsInput, AddressUncheckedUpdateWithoutSentTransactionsInput>
  }

  export type AddressUpdateWithoutSentTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    chain?: EnumChainTypeFieldUpdateOperationsInput | $Enums.ChainType
    label?: NullableStringFieldUpdateOperationsInput | string | null
    isContract?: BoolFieldUpdateOperationsInput | boolean
    firstSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    transactionCount?: IntFieldUpdateOperationsInput | number
    totalValueSent?: StringFieldUpdateOperationsInput | string
    totalValueReceived?: StringFieldUpdateOperationsInput | string
    riskScore?: IntFieldUpdateOperationsInput | number
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    tags?: AddressUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receivedTransactions?: TransactionUpdateManyWithoutToAddressRelNestedInput
    riskFactors?: AddressRiskFactorUpdateManyWithoutAddressNestedInput
  }

  export type AddressUncheckedUpdateWithoutSentTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    chain?: EnumChainTypeFieldUpdateOperationsInput | $Enums.ChainType
    label?: NullableStringFieldUpdateOperationsInput | string | null
    isContract?: BoolFieldUpdateOperationsInput | boolean
    firstSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    transactionCount?: IntFieldUpdateOperationsInput | number
    totalValueSent?: StringFieldUpdateOperationsInput | string
    totalValueReceived?: StringFieldUpdateOperationsInput | string
    riskScore?: IntFieldUpdateOperationsInput | number
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    tags?: AddressUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutToAddressRelNestedInput
    riskFactors?: AddressRiskFactorUncheckedUpdateManyWithoutAddressNestedInput
  }

  export type AddressUpsertWithoutReceivedTransactionsInput = {
    update: XOR<AddressUpdateWithoutReceivedTransactionsInput, AddressUncheckedUpdateWithoutReceivedTransactionsInput>
    create: XOR<AddressCreateWithoutReceivedTransactionsInput, AddressUncheckedCreateWithoutReceivedTransactionsInput>
    where?: AddressWhereInput
  }

  export type AddressUpdateToOneWithWhereWithoutReceivedTransactionsInput = {
    where?: AddressWhereInput
    data: XOR<AddressUpdateWithoutReceivedTransactionsInput, AddressUncheckedUpdateWithoutReceivedTransactionsInput>
  }

  export type AddressUpdateWithoutReceivedTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    chain?: EnumChainTypeFieldUpdateOperationsInput | $Enums.ChainType
    label?: NullableStringFieldUpdateOperationsInput | string | null
    isContract?: BoolFieldUpdateOperationsInput | boolean
    firstSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    transactionCount?: IntFieldUpdateOperationsInput | number
    totalValueSent?: StringFieldUpdateOperationsInput | string
    totalValueReceived?: StringFieldUpdateOperationsInput | string
    riskScore?: IntFieldUpdateOperationsInput | number
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    tags?: AddressUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentTransactions?: TransactionUpdateManyWithoutFromAddressRelNestedInput
    riskFactors?: AddressRiskFactorUpdateManyWithoutAddressNestedInput
  }

  export type AddressUncheckedUpdateWithoutReceivedTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    chain?: EnumChainTypeFieldUpdateOperationsInput | $Enums.ChainType
    label?: NullableStringFieldUpdateOperationsInput | string | null
    isContract?: BoolFieldUpdateOperationsInput | boolean
    firstSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    transactionCount?: IntFieldUpdateOperationsInput | number
    totalValueSent?: StringFieldUpdateOperationsInput | string
    totalValueReceived?: StringFieldUpdateOperationsInput | string
    riskScore?: IntFieldUpdateOperationsInput | number
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    tags?: AddressUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentTransactions?: TransactionUncheckedUpdateManyWithoutFromAddressRelNestedInput
    riskFactors?: AddressRiskFactorUncheckedUpdateManyWithoutAddressNestedInput
  }

  export type RiskAnalysisUpsertWithoutTransactionInput = {
    update: XOR<RiskAnalysisUpdateWithoutTransactionInput, RiskAnalysisUncheckedUpdateWithoutTransactionInput>
    create: XOR<RiskAnalysisCreateWithoutTransactionInput, RiskAnalysisUncheckedCreateWithoutTransactionInput>
    where?: RiskAnalysisWhereInput
  }

  export type RiskAnalysisUpdateToOneWithWhereWithoutTransactionInput = {
    where?: RiskAnalysisWhereInput
    data: XOR<RiskAnalysisUpdateWithoutTransactionInput, RiskAnalysisUncheckedUpdateWithoutTransactionInput>
  }

  export type RiskAnalysisUpdateWithoutTransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    largeAmount?: BoolFieldUpdateOperationsInput | boolean
    newAddress?: BoolFieldUpdateOperationsInput | boolean
    blacklisted?: BoolFieldUpdateOperationsInput | boolean
    mixingService?: BoolFieldUpdateOperationsInput | boolean
    suspiciousPattern?: BoolFieldUpdateOperationsInput | boolean
    amountScore?: IntFieldUpdateOperationsInput | number
    addressScore?: IntFieldUpdateOperationsInput | number
    behaviorScore?: IntFieldUpdateOperationsInput | number
    totalScore?: IntFieldUpdateOperationsInput | number
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RiskAnalysisUncheckedUpdateWithoutTransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    largeAmount?: BoolFieldUpdateOperationsInput | boolean
    newAddress?: BoolFieldUpdateOperationsInput | boolean
    blacklisted?: BoolFieldUpdateOperationsInput | boolean
    mixingService?: BoolFieldUpdateOperationsInput | boolean
    suspiciousPattern?: BoolFieldUpdateOperationsInput | boolean
    amountScore?: IntFieldUpdateOperationsInput | number
    addressScore?: IntFieldUpdateOperationsInput | number
    behaviorScore?: IntFieldUpdateOperationsInput | number
    totalScore?: IntFieldUpdateOperationsInput | number
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateWithoutFromAddressRelInput = {
    id?: string
    hash: string
    value: string
    fee?: string | null
    gasUsed?: string | null
    gasPrice?: string | null
    blockNumber?: bigint | number | null
    blockHash?: string | null
    timestamp: Date | string
    status?: $Enums.TransactionStatus
    data?: string | null
    decoded?: NullableJsonNullValueInput | InputJsonValue
    riskScore?: number | null
    riskLevel?: $Enums.RiskLevel | null
    createdAt?: Date | string
    updatedAt?: Date | string
    toAddressRel?: AddressCreateNestedOneWithoutReceivedTransactionsInput
    riskAnalysis?: RiskAnalysisCreateNestedOneWithoutTransactionInput
  }

  export type TransactionUncheckedCreateWithoutFromAddressRelInput = {
    id?: string
    hash: string
    toAddress?: string | null
    value: string
    fee?: string | null
    gasUsed?: string | null
    gasPrice?: string | null
    blockNumber?: bigint | number | null
    blockHash?: string | null
    timestamp: Date | string
    status?: $Enums.TransactionStatus
    data?: string | null
    decoded?: NullableJsonNullValueInput | InputJsonValue
    riskScore?: number | null
    riskLevel?: $Enums.RiskLevel | null
    createdAt?: Date | string
    updatedAt?: Date | string
    riskAnalysis?: RiskAnalysisUncheckedCreateNestedOneWithoutTransactionInput
  }

  export type TransactionCreateOrConnectWithoutFromAddressRelInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutFromAddressRelInput, TransactionUncheckedCreateWithoutFromAddressRelInput>
  }

  export type TransactionCreateManyFromAddressRelInputEnvelope = {
    data: TransactionCreateManyFromAddressRelInput | TransactionCreateManyFromAddressRelInput[]
    skipDuplicates?: boolean
  }

  export type TransactionCreateWithoutToAddressRelInput = {
    id?: string
    hash: string
    value: string
    fee?: string | null
    gasUsed?: string | null
    gasPrice?: string | null
    blockNumber?: bigint | number | null
    blockHash?: string | null
    timestamp: Date | string
    status?: $Enums.TransactionStatus
    data?: string | null
    decoded?: NullableJsonNullValueInput | InputJsonValue
    riskScore?: number | null
    riskLevel?: $Enums.RiskLevel | null
    createdAt?: Date | string
    updatedAt?: Date | string
    fromAddressRel?: AddressCreateNestedOneWithoutSentTransactionsInput
    riskAnalysis?: RiskAnalysisCreateNestedOneWithoutTransactionInput
  }

  export type TransactionUncheckedCreateWithoutToAddressRelInput = {
    id?: string
    hash: string
    fromAddress: string
    value: string
    fee?: string | null
    gasUsed?: string | null
    gasPrice?: string | null
    blockNumber?: bigint | number | null
    blockHash?: string | null
    timestamp: Date | string
    status?: $Enums.TransactionStatus
    data?: string | null
    decoded?: NullableJsonNullValueInput | InputJsonValue
    riskScore?: number | null
    riskLevel?: $Enums.RiskLevel | null
    createdAt?: Date | string
    updatedAt?: Date | string
    riskAnalysis?: RiskAnalysisUncheckedCreateNestedOneWithoutTransactionInput
  }

  export type TransactionCreateOrConnectWithoutToAddressRelInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutToAddressRelInput, TransactionUncheckedCreateWithoutToAddressRelInput>
  }

  export type TransactionCreateManyToAddressRelInputEnvelope = {
    data: TransactionCreateManyToAddressRelInput | TransactionCreateManyToAddressRelInput[]
    skipDuplicates?: boolean
  }

  export type AddressRiskFactorCreateWithoutAddressInput = {
    id?: string
    factor: string
    severity: $Enums.RiskLevel
    description?: string | null
    source?: string | null
    createdAt?: Date | string
  }

  export type AddressRiskFactorUncheckedCreateWithoutAddressInput = {
    id?: string
    factor: string
    severity: $Enums.RiskLevel
    description?: string | null
    source?: string | null
    createdAt?: Date | string
  }

  export type AddressRiskFactorCreateOrConnectWithoutAddressInput = {
    where: AddressRiskFactorWhereUniqueInput
    create: XOR<AddressRiskFactorCreateWithoutAddressInput, AddressRiskFactorUncheckedCreateWithoutAddressInput>
  }

  export type AddressRiskFactorCreateManyAddressInputEnvelope = {
    data: AddressRiskFactorCreateManyAddressInput | AddressRiskFactorCreateManyAddressInput[]
    skipDuplicates?: boolean
  }

  export type TransactionUpsertWithWhereUniqueWithoutFromAddressRelInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutFromAddressRelInput, TransactionUncheckedUpdateWithoutFromAddressRelInput>
    create: XOR<TransactionCreateWithoutFromAddressRelInput, TransactionUncheckedCreateWithoutFromAddressRelInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutFromAddressRelInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutFromAddressRelInput, TransactionUncheckedUpdateWithoutFromAddressRelInput>
  }

  export type TransactionUpdateManyWithWhereWithoutFromAddressRelInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutFromAddressRelInput>
  }

  export type TransactionScalarWhereInput = {
    AND?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    OR?: TransactionScalarWhereInput[]
    NOT?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    id?: StringFilter<"Transaction"> | string
    hash?: StringFilter<"Transaction"> | string
    chain?: EnumChainTypeFilter<"Transaction"> | $Enums.ChainType
    fromAddress?: StringFilter<"Transaction"> | string
    toAddress?: StringNullableFilter<"Transaction"> | string | null
    value?: StringFilter<"Transaction"> | string
    fee?: StringNullableFilter<"Transaction"> | string | null
    gasUsed?: StringNullableFilter<"Transaction"> | string | null
    gasPrice?: StringNullableFilter<"Transaction"> | string | null
    blockNumber?: BigIntNullableFilter<"Transaction"> | bigint | number | null
    blockHash?: StringNullableFilter<"Transaction"> | string | null
    timestamp?: DateTimeFilter<"Transaction"> | Date | string
    status?: EnumTransactionStatusFilter<"Transaction"> | $Enums.TransactionStatus
    data?: StringNullableFilter<"Transaction"> | string | null
    decoded?: JsonNullableFilter<"Transaction">
    riskScore?: IntNullableFilter<"Transaction"> | number | null
    riskLevel?: EnumRiskLevelNullableFilter<"Transaction"> | $Enums.RiskLevel | null
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
  }

  export type TransactionUpsertWithWhereUniqueWithoutToAddressRelInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutToAddressRelInput, TransactionUncheckedUpdateWithoutToAddressRelInput>
    create: XOR<TransactionCreateWithoutToAddressRelInput, TransactionUncheckedCreateWithoutToAddressRelInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutToAddressRelInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutToAddressRelInput, TransactionUncheckedUpdateWithoutToAddressRelInput>
  }

  export type TransactionUpdateManyWithWhereWithoutToAddressRelInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutToAddressRelInput>
  }

  export type AddressRiskFactorUpsertWithWhereUniqueWithoutAddressInput = {
    where: AddressRiskFactorWhereUniqueInput
    update: XOR<AddressRiskFactorUpdateWithoutAddressInput, AddressRiskFactorUncheckedUpdateWithoutAddressInput>
    create: XOR<AddressRiskFactorCreateWithoutAddressInput, AddressRiskFactorUncheckedCreateWithoutAddressInput>
  }

  export type AddressRiskFactorUpdateWithWhereUniqueWithoutAddressInput = {
    where: AddressRiskFactorWhereUniqueInput
    data: XOR<AddressRiskFactorUpdateWithoutAddressInput, AddressRiskFactorUncheckedUpdateWithoutAddressInput>
  }

  export type AddressRiskFactorUpdateManyWithWhereWithoutAddressInput = {
    where: AddressRiskFactorScalarWhereInput
    data: XOR<AddressRiskFactorUpdateManyMutationInput, AddressRiskFactorUncheckedUpdateManyWithoutAddressInput>
  }

  export type AddressRiskFactorScalarWhereInput = {
    AND?: AddressRiskFactorScalarWhereInput | AddressRiskFactorScalarWhereInput[]
    OR?: AddressRiskFactorScalarWhereInput[]
    NOT?: AddressRiskFactorScalarWhereInput | AddressRiskFactorScalarWhereInput[]
    id?: StringFilter<"AddressRiskFactor"> | string
    addressId?: StringFilter<"AddressRiskFactor"> | string
    factor?: StringFilter<"AddressRiskFactor"> | string
    severity?: EnumRiskLevelFilter<"AddressRiskFactor"> | $Enums.RiskLevel
    description?: StringNullableFilter<"AddressRiskFactor"> | string | null
    source?: StringNullableFilter<"AddressRiskFactor"> | string | null
    createdAt?: DateTimeFilter<"AddressRiskFactor"> | Date | string
  }

  export type TransactionCreateWithoutRiskAnalysisInput = {
    id?: string
    hash: string
    value: string
    fee?: string | null
    gasUsed?: string | null
    gasPrice?: string | null
    blockNumber?: bigint | number | null
    blockHash?: string | null
    timestamp: Date | string
    status?: $Enums.TransactionStatus
    data?: string | null
    decoded?: NullableJsonNullValueInput | InputJsonValue
    riskScore?: number | null
    riskLevel?: $Enums.RiskLevel | null
    createdAt?: Date | string
    updatedAt?: Date | string
    fromAddressRel?: AddressCreateNestedOneWithoutSentTransactionsInput
    toAddressRel?: AddressCreateNestedOneWithoutReceivedTransactionsInput
  }

  export type TransactionUncheckedCreateWithoutRiskAnalysisInput = {
    id?: string
    hash: string
    chain: $Enums.ChainType
    fromAddress: string
    toAddress?: string | null
    value: string
    fee?: string | null
    gasUsed?: string | null
    gasPrice?: string | null
    blockNumber?: bigint | number | null
    blockHash?: string | null
    timestamp: Date | string
    status?: $Enums.TransactionStatus
    data?: string | null
    decoded?: NullableJsonNullValueInput | InputJsonValue
    riskScore?: number | null
    riskLevel?: $Enums.RiskLevel | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateOrConnectWithoutRiskAnalysisInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutRiskAnalysisInput, TransactionUncheckedCreateWithoutRiskAnalysisInput>
  }

  export type TransactionUpsertWithoutRiskAnalysisInput = {
    update: XOR<TransactionUpdateWithoutRiskAnalysisInput, TransactionUncheckedUpdateWithoutRiskAnalysisInput>
    create: XOR<TransactionCreateWithoutRiskAnalysisInput, TransactionUncheckedCreateWithoutRiskAnalysisInput>
    where?: TransactionWhereInput
  }

  export type TransactionUpdateToOneWithWhereWithoutRiskAnalysisInput = {
    where?: TransactionWhereInput
    data: XOR<TransactionUpdateWithoutRiskAnalysisInput, TransactionUncheckedUpdateWithoutRiskAnalysisInput>
  }

  export type TransactionUpdateWithoutRiskAnalysisInput = {
    id?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    fee?: NullableStringFieldUpdateOperationsInput | string | null
    gasUsed?: NullableStringFieldUpdateOperationsInput | string | null
    gasPrice?: NullableStringFieldUpdateOperationsInput | string | null
    blockNumber?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    blockHash?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    data?: NullableStringFieldUpdateOperationsInput | string | null
    decoded?: NullableJsonNullValueInput | InputJsonValue
    riskScore?: NullableIntFieldUpdateOperationsInput | number | null
    riskLevel?: NullableEnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromAddressRel?: AddressUpdateOneWithoutSentTransactionsNestedInput
    toAddressRel?: AddressUpdateOneWithoutReceivedTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateWithoutRiskAnalysisInput = {
    id?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    chain?: EnumChainTypeFieldUpdateOperationsInput | $Enums.ChainType
    fromAddress?: StringFieldUpdateOperationsInput | string
    toAddress?: NullableStringFieldUpdateOperationsInput | string | null
    value?: StringFieldUpdateOperationsInput | string
    fee?: NullableStringFieldUpdateOperationsInput | string | null
    gasUsed?: NullableStringFieldUpdateOperationsInput | string | null
    gasPrice?: NullableStringFieldUpdateOperationsInput | string | null
    blockNumber?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    blockHash?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    data?: NullableStringFieldUpdateOperationsInput | string | null
    decoded?: NullableJsonNullValueInput | InputJsonValue
    riskScore?: NullableIntFieldUpdateOperationsInput | number | null
    riskLevel?: NullableEnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressCreateWithoutRiskFactorsInput = {
    id?: string
    address: string
    chain: $Enums.ChainType
    label?: string | null
    isContract?: boolean
    firstSeen?: Date | string
    lastSeen?: Date | string
    transactionCount?: number
    totalValueSent?: string
    totalValueReceived?: string
    riskScore?: number
    riskLevel?: $Enums.RiskLevel
    tags?: AddressCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    sentTransactions?: TransactionCreateNestedManyWithoutFromAddressRelInput
    receivedTransactions?: TransactionCreateNestedManyWithoutToAddressRelInput
  }

  export type AddressUncheckedCreateWithoutRiskFactorsInput = {
    id?: string
    address: string
    chain: $Enums.ChainType
    label?: string | null
    isContract?: boolean
    firstSeen?: Date | string
    lastSeen?: Date | string
    transactionCount?: number
    totalValueSent?: string
    totalValueReceived?: string
    riskScore?: number
    riskLevel?: $Enums.RiskLevel
    tags?: AddressCreatetagsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    sentTransactions?: TransactionUncheckedCreateNestedManyWithoutFromAddressRelInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutToAddressRelInput
  }

  export type AddressCreateOrConnectWithoutRiskFactorsInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutRiskFactorsInput, AddressUncheckedCreateWithoutRiskFactorsInput>
  }

  export type AddressUpsertWithoutRiskFactorsInput = {
    update: XOR<AddressUpdateWithoutRiskFactorsInput, AddressUncheckedUpdateWithoutRiskFactorsInput>
    create: XOR<AddressCreateWithoutRiskFactorsInput, AddressUncheckedCreateWithoutRiskFactorsInput>
    where?: AddressWhereInput
  }

  export type AddressUpdateToOneWithWhereWithoutRiskFactorsInput = {
    where?: AddressWhereInput
    data: XOR<AddressUpdateWithoutRiskFactorsInput, AddressUncheckedUpdateWithoutRiskFactorsInput>
  }

  export type AddressUpdateWithoutRiskFactorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    chain?: EnumChainTypeFieldUpdateOperationsInput | $Enums.ChainType
    label?: NullableStringFieldUpdateOperationsInput | string | null
    isContract?: BoolFieldUpdateOperationsInput | boolean
    firstSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    transactionCount?: IntFieldUpdateOperationsInput | number
    totalValueSent?: StringFieldUpdateOperationsInput | string
    totalValueReceived?: StringFieldUpdateOperationsInput | string
    riskScore?: IntFieldUpdateOperationsInput | number
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    tags?: AddressUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentTransactions?: TransactionUpdateManyWithoutFromAddressRelNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutToAddressRelNestedInput
  }

  export type AddressUncheckedUpdateWithoutRiskFactorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    chain?: EnumChainTypeFieldUpdateOperationsInput | $Enums.ChainType
    label?: NullableStringFieldUpdateOperationsInput | string | null
    isContract?: BoolFieldUpdateOperationsInput | boolean
    firstSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    lastSeen?: DateTimeFieldUpdateOperationsInput | Date | string
    transactionCount?: IntFieldUpdateOperationsInput | number
    totalValueSent?: StringFieldUpdateOperationsInput | string
    totalValueReceived?: StringFieldUpdateOperationsInput | string
    riskScore?: IntFieldUpdateOperationsInput | number
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    tags?: AddressUpdatetagsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentTransactions?: TransactionUncheckedUpdateManyWithoutFromAddressRelNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutToAddressRelNestedInput
  }

  export type TransactionCreateManyFromAddressRelInput = {
    id?: string
    hash: string
    toAddress?: string | null
    value: string
    fee?: string | null
    gasUsed?: string | null
    gasPrice?: string | null
    blockNumber?: bigint | number | null
    blockHash?: string | null
    timestamp: Date | string
    status?: $Enums.TransactionStatus
    data?: string | null
    decoded?: NullableJsonNullValueInput | InputJsonValue
    riskScore?: number | null
    riskLevel?: $Enums.RiskLevel | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateManyToAddressRelInput = {
    id?: string
    hash: string
    fromAddress: string
    value: string
    fee?: string | null
    gasUsed?: string | null
    gasPrice?: string | null
    blockNumber?: bigint | number | null
    blockHash?: string | null
    timestamp: Date | string
    status?: $Enums.TransactionStatus
    data?: string | null
    decoded?: NullableJsonNullValueInput | InputJsonValue
    riskScore?: number | null
    riskLevel?: $Enums.RiskLevel | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AddressRiskFactorCreateManyAddressInput = {
    id?: string
    factor: string
    severity: $Enums.RiskLevel
    description?: string | null
    source?: string | null
    createdAt?: Date | string
  }

  export type TransactionUpdateWithoutFromAddressRelInput = {
    id?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    fee?: NullableStringFieldUpdateOperationsInput | string | null
    gasUsed?: NullableStringFieldUpdateOperationsInput | string | null
    gasPrice?: NullableStringFieldUpdateOperationsInput | string | null
    blockNumber?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    blockHash?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    data?: NullableStringFieldUpdateOperationsInput | string | null
    decoded?: NullableJsonNullValueInput | InputJsonValue
    riskScore?: NullableIntFieldUpdateOperationsInput | number | null
    riskLevel?: NullableEnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    toAddressRel?: AddressUpdateOneWithoutReceivedTransactionsNestedInput
    riskAnalysis?: RiskAnalysisUpdateOneWithoutTransactionNestedInput
  }

  export type TransactionUncheckedUpdateWithoutFromAddressRelInput = {
    id?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    toAddress?: NullableStringFieldUpdateOperationsInput | string | null
    value?: StringFieldUpdateOperationsInput | string
    fee?: NullableStringFieldUpdateOperationsInput | string | null
    gasUsed?: NullableStringFieldUpdateOperationsInput | string | null
    gasPrice?: NullableStringFieldUpdateOperationsInput | string | null
    blockNumber?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    blockHash?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    data?: NullableStringFieldUpdateOperationsInput | string | null
    decoded?: NullableJsonNullValueInput | InputJsonValue
    riskScore?: NullableIntFieldUpdateOperationsInput | number | null
    riskLevel?: NullableEnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    riskAnalysis?: RiskAnalysisUncheckedUpdateOneWithoutTransactionNestedInput
  }

  export type TransactionUncheckedUpdateManyWithoutFromAddressRelInput = {
    id?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    toAddress?: NullableStringFieldUpdateOperationsInput | string | null
    value?: StringFieldUpdateOperationsInput | string
    fee?: NullableStringFieldUpdateOperationsInput | string | null
    gasUsed?: NullableStringFieldUpdateOperationsInput | string | null
    gasPrice?: NullableStringFieldUpdateOperationsInput | string | null
    blockNumber?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    blockHash?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    data?: NullableStringFieldUpdateOperationsInput | string | null
    decoded?: NullableJsonNullValueInput | InputJsonValue
    riskScore?: NullableIntFieldUpdateOperationsInput | number | null
    riskLevel?: NullableEnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUpdateWithoutToAddressRelInput = {
    id?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    fee?: NullableStringFieldUpdateOperationsInput | string | null
    gasUsed?: NullableStringFieldUpdateOperationsInput | string | null
    gasPrice?: NullableStringFieldUpdateOperationsInput | string | null
    blockNumber?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    blockHash?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    data?: NullableStringFieldUpdateOperationsInput | string | null
    decoded?: NullableJsonNullValueInput | InputJsonValue
    riskScore?: NullableIntFieldUpdateOperationsInput | number | null
    riskLevel?: NullableEnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromAddressRel?: AddressUpdateOneWithoutSentTransactionsNestedInput
    riskAnalysis?: RiskAnalysisUpdateOneWithoutTransactionNestedInput
  }

  export type TransactionUncheckedUpdateWithoutToAddressRelInput = {
    id?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    fromAddress?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    fee?: NullableStringFieldUpdateOperationsInput | string | null
    gasUsed?: NullableStringFieldUpdateOperationsInput | string | null
    gasPrice?: NullableStringFieldUpdateOperationsInput | string | null
    blockNumber?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    blockHash?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    data?: NullableStringFieldUpdateOperationsInput | string | null
    decoded?: NullableJsonNullValueInput | InputJsonValue
    riskScore?: NullableIntFieldUpdateOperationsInput | number | null
    riskLevel?: NullableEnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    riskAnalysis?: RiskAnalysisUncheckedUpdateOneWithoutTransactionNestedInput
  }

  export type TransactionUncheckedUpdateManyWithoutToAddressRelInput = {
    id?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    fromAddress?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    fee?: NullableStringFieldUpdateOperationsInput | string | null
    gasUsed?: NullableStringFieldUpdateOperationsInput | string | null
    gasPrice?: NullableStringFieldUpdateOperationsInput | string | null
    blockNumber?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    blockHash?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    data?: NullableStringFieldUpdateOperationsInput | string | null
    decoded?: NullableJsonNullValueInput | InputJsonValue
    riskScore?: NullableIntFieldUpdateOperationsInput | number | null
    riskLevel?: NullableEnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressRiskFactorUpdateWithoutAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    factor?: StringFieldUpdateOperationsInput | string
    severity?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    description?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressRiskFactorUncheckedUpdateWithoutAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    factor?: StringFieldUpdateOperationsInput | string
    severity?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    description?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressRiskFactorUncheckedUpdateManyWithoutAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    factor?: StringFieldUpdateOperationsInput | string
    severity?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    description?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}