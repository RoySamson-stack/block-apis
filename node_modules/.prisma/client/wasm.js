
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  hash: 'hash',
  chain: 'chain',
  fromAddress: 'fromAddress',
  toAddress: 'toAddress',
  value: 'value',
  fee: 'fee',
  gasUsed: 'gasUsed',
  gasPrice: 'gasPrice',
  blockNumber: 'blockNumber',
  blockHash: 'blockHash',
  timestamp: 'timestamp',
  status: 'status',
  data: 'data',
  decoded: 'decoded',
  riskScore: 'riskScore',
  riskLevel: 'riskLevel',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  address: 'address',
  chain: 'chain',
  label: 'label',
  isContract: 'isContract',
  firstSeen: 'firstSeen',
  lastSeen: 'lastSeen',
  transactionCount: 'transactionCount',
  totalValueSent: 'totalValueSent',
  totalValueReceived: 'totalValueReceived',
  riskScore: 'riskScore',
  riskLevel: 'riskLevel',
  tags: 'tags',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RiskAnalysisScalarFieldEnum = {
  id: 'id',
  transactionId: 'transactionId',
  largeAmount: 'largeAmount',
  newAddress: 'newAddress',
  blacklisted: 'blacklisted',
  mixingService: 'mixingService',
  suspiciousPattern: 'suspiciousPattern',
  amountScore: 'amountScore',
  addressScore: 'addressScore',
  behaviorScore: 'behaviorScore',
  totalScore: 'totalScore',
  details: 'details',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AddressRiskFactorScalarFieldEnum = {
  id: 'id',
  addressId: 'addressId',
  factor: 'factor',
  severity: 'severity',
  description: 'description',
  source: 'source',
  createdAt: 'createdAt'
};

exports.Prisma.ApiKeyScalarFieldEnum = {
  id: 'id',
  key: 'key',
  name: 'name',
  tier: 'tier',
  isActive: 'isActive',
  rateLimit: 'rateLimit',
  requestCount: 'requestCount',
  lastUsed: 'lastUsed',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.RequestLogScalarFieldEnum = {
  id: 'id',
  apiKey: 'apiKey',
  endpoint: 'endpoint',
  method: 'method',
  statusCode: 'statusCode',
  duration: 'duration',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.ChainType = exports.$Enums.ChainType = {
  BITCOIN: 'BITCOIN',
  ETHEREUM: 'ETHEREUM',
  POLYGON: 'POLYGON',
  BSC: 'BSC'
};

exports.TransactionStatus = exports.$Enums.TransactionStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  FAILED: 'FAILED'
};

exports.RiskLevel = exports.$Enums.RiskLevel = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.Prisma.ModelName = {
  Transaction: 'Transaction',
  Address: 'Address',
  RiskAnalysis: 'RiskAnalysis',
  AddressRiskFactor: 'AddressRiskFactor',
  ApiKey: 'ApiKey',
  RequestLog: 'RequestLog'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/ralan/personal-projects/blockchain-transaction-api/node_modules/@prisma/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/home/ralan/personal-projects/blockchain-transaction-api/prisma/schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.17.1",
  "engineVersion": "272a37d34178c2894197e17273bf937f25acdeac",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nenum ChainType {\n  BITCOIN\n  ETHEREUM\n  POLYGON\n  BSC\n}\n\nenum TransactionStatus {\n  PENDING\n  CONFIRMED\n  FAILED\n}\n\nenum RiskLevel {\n  LOW\n  MEDIUM\n  HIGH\n  CRITICAL\n}\n\nmodel Transaction {\n  id          String            @id @default(uuid())\n  hash        String            @unique\n  chain       ChainType\n  fromAddress String\n  toAddress   String?\n  value       String\n  fee         String?\n  gasUsed     String?\n  gasPrice    String?\n  blockNumber BigInt?\n  blockHash   String?\n  timestamp   DateTime\n  status      TransactionStatus @default(PENDING)\n  data        String? // Raw transaction data\n  decoded     Json? // Decoded transaction details\n  riskScore   Int?              @default(0)\n  riskLevel   RiskLevel?        @default(LOW)\n\n  // Relations\n  fromAddressRel Address?      @relation(\"FromTransactions\", fields: [fromAddress, chain], references: [address, chain])\n  toAddressRel   Address?      @relation(\"ToTransactions\", fields: [toAddress, chain], references: [address, chain])\n  riskAnalysis   RiskAnalysis?\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([hash])\n  @@index([chain])\n  @@index([fromAddress])\n  @@index([toAddress])\n  @@index([blockNumber])\n  @@index([timestamp])\n}\n\nmodel Address {\n  id                 String    @id @default(uuid())\n  address            String\n  chain              ChainType\n  label              String? // Exchange, DeFi Protocol, etc.\n  isContract         Boolean   @default(false)\n  firstSeen          DateTime  @default(now())\n  lastSeen           DateTime  @default(now())\n  transactionCount   Int       @default(0)\n  totalValueSent     String    @default(\"0\")\n  totalValueReceived String    @default(\"0\")\n  riskScore          Int       @default(0)\n  riskLevel          RiskLevel @default(LOW)\n  tags               String[] // [\"exchange\", \"whale\", \"suspicious\"]\n\n  // Relations\n  sentTransactions     Transaction[]       @relation(\"FromTransactions\")\n  receivedTransactions Transaction[]       @relation(\"ToTransactions\")\n  riskFactors          AddressRiskFactor[]\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@unique([address, chain])\n  @@index([address])\n  @@index([chain])\n  @@index([riskScore])\n}\n\nmodel RiskAnalysis {\n  id            String      @id @default(uuid())\n  transactionId String      @unique\n  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)\n\n  // Risk factors\n  largeAmount       Boolean @default(false)\n  newAddress        Boolean @default(false)\n  blacklisted       Boolean @default(false)\n  mixingService     Boolean @default(false)\n  suspiciousPattern Boolean @default(false)\n\n  // Scores\n  amountScore   Int @default(0)\n  addressScore  Int @default(0)\n  behaviorScore Int @default(0)\n  totalScore    Int @default(0)\n\n  details Json? // Additional analysis details\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n\nmodel AddressRiskFactor {\n  id        String  @id @default(uuid())\n  addressId String\n  address   Address @relation(fields: [addressId], references: [id], onDelete: Cascade)\n\n  factor      String // \"sanctioned\", \"scam\", \"mixer\", etc.\n  severity    RiskLevel\n  description String?\n  source      String? // Where this info came from\n\n  createdAt DateTime @default(now())\n\n  @@index([addressId])\n}\n\nmodel ApiKey {\n  id        String  @id @default(uuid())\n  key       String  @unique\n  name      String\n  tier      String  @default(\"free\") // free, pro, enterprise\n  isActive  Boolean @default(true)\n  rateLimit Int     @default(100) // Requests per window\n\n  // Usage stats\n  requestCount Int       @default(0)\n  lastUsed     DateTime?\n\n  createdAt DateTime  @default(now())\n  expiresAt DateTime?\n\n  @@index([key])\n}\n\nmodel RequestLog {\n  id         String  @id @default(uuid())\n  apiKey     String?\n  endpoint   String\n  method     String\n  statusCode Int\n  duration   Int // milliseconds\n  ipAddress  String?\n  userAgent  String?\n\n  createdAt DateTime @default(now())\n\n  @@index([apiKey])\n  @@index([createdAt])\n}\n",
  "inlineSchemaHash": "6847a3f8f5c9349dd11132986d675052e0231c2c5557cc3d79b793c0c3bed1c3",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Transaction\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"hash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"chain\",\"kind\":\"enum\",\"type\":\"ChainType\"},{\"name\":\"fromAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"toAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"value\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fee\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"gasUsed\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"gasPrice\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"blockNumber\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"blockHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"timestamp\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"TransactionStatus\"},{\"name\":\"data\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"decoded\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"riskScore\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"riskLevel\",\"kind\":\"enum\",\"type\":\"RiskLevel\"},{\"name\":\"fromAddressRel\",\"kind\":\"object\",\"type\":\"Address\",\"relationName\":\"FromTransactions\"},{\"name\":\"toAddressRel\",\"kind\":\"object\",\"type\":\"Address\",\"relationName\":\"ToTransactions\"},{\"name\":\"riskAnalysis\",\"kind\":\"object\",\"type\":\"RiskAnalysis\",\"relationName\":\"RiskAnalysisToTransaction\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Address\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"address\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"chain\",\"kind\":\"enum\",\"type\":\"ChainType\"},{\"name\":\"label\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isContract\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"firstSeen\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastSeen\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"transactionCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalValueSent\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"totalValueReceived\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"riskScore\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"riskLevel\",\"kind\":\"enum\",\"type\":\"RiskLevel\"},{\"name\":\"tags\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sentTransactions\",\"kind\":\"object\",\"type\":\"Transaction\",\"relationName\":\"FromTransactions\"},{\"name\":\"receivedTransactions\",\"kind\":\"object\",\"type\":\"Transaction\",\"relationName\":\"ToTransactions\"},{\"name\":\"riskFactors\",\"kind\":\"object\",\"type\":\"AddressRiskFactor\",\"relationName\":\"AddressToAddressRiskFactor\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"RiskAnalysis\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"transactionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"transaction\",\"kind\":\"object\",\"type\":\"Transaction\",\"relationName\":\"RiskAnalysisToTransaction\"},{\"name\":\"largeAmount\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"newAddress\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"blacklisted\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"mixingService\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"suspiciousPattern\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"amountScore\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"addressScore\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"behaviorScore\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalScore\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"details\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"AddressRiskFactor\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"addressId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"address\",\"kind\":\"object\",\"type\":\"Address\",\"relationName\":\"AddressToAddressRiskFactor\"},{\"name\":\"factor\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"severity\",\"kind\":\"enum\",\"type\":\"RiskLevel\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"source\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"ApiKey\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"key\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tier\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"rateLimit\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"requestCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"lastUsed\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"RequestLog\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"apiKey\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"endpoint\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"method\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"statusCode\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"duration\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"ipAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userAgent\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

